(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1024218,      19528]
NotebookOptionsPosition[   1022845,      19493]
NotebookOutlinePosition[   1023208,      19509]
CellTagsIndexPosition[   1023165,      19506]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
   "This", " ", "is", " ", "the", " ", "lastest", " ", "version", " ", "of", 
    " ", "TR", " ", "ESR", " ", "treatment", " ", "program"}], ";", 
   "\[IndentingNewLine]", " ", 
   RowBox[{"For", " ", "any", " ", 
    RowBox[{"suggestions", "/", "comments"}], " ", "contact", " ", "me", " ", 
    "via", " ", 
    RowBox[{"anatoly", ".", 
     RowBox[{"melnikov", "@", "tomo"}], ".", "nsc", ".", "ru"}]}]}], 
  "*)"}]], "Input",
 Deletable->False,
 InitializationCell->True,
 CellChangeTimes->{{3.763449618022914*^9, 3.7634496394650517`*^9}, {
   3.7634499560524197`*^9, 3.763449957681872*^9}, {3.763450076207563*^9, 
   3.763450110626459*^9}, {3.764022137110076*^9, 3.764022158684332*^9}, 
   3.765148325773408*^9, {3.765157932874115*^9, 3.765157944631364*^9}, {
   3.76558269296139*^9, 3.7655826929629593`*^9}, 3.765583382663167*^9, {
   3.765595369770954*^9, 3.7655953906805973`*^9}, {3.765595612453785*^9, 
   3.7655956302971067`*^9}, {3.765600883726624*^9, 3.7656008849076023`*^9}, {
   3.765601221580099*^9, 3.765601221979843*^9}, {3.765601273935369*^9, 
   3.765601300788185*^9}, {3.767488244004404*^9, 3.767488244907127*^9}, {
   3.767488611980335*^9, 3.767488613756207*^9}, {3.7699825227417192`*^9, 
   3.769982522897605*^9}, {3.769982711805153*^9, 3.769982711890141*^9}, 
   3.769986518629428*^9, {3.769987701703148*^9, 3.769987701876164*^9}, {
   3.769988090138607*^9, 3.769988139086104*^9}, {3.770002815231614*^9, 
   3.7700028703090687`*^9}, {3.770002920498474*^9, 3.770002921263571*^9}, {
   3.770015535600049*^9, 3.7700155367558317`*^9}, 3.770328144553293*^9, {
   3.770355204905074*^9, 3.770355205061791*^9}, 3.770367160982273*^9, {
   3.771886481749916*^9, 3.771886535317629*^9}, {3.7718868162758007`*^9, 
   3.771886819779971*^9}, {3.771887369797097*^9, 3.7718874305093718`*^9}, 
   3.771887511071147*^9, {3.771977238167573*^9, 3.77197723897196*^9}, 
   3.7747379603258142`*^9},
 CellLabel->"In[36]:=",ExpressionUUID->"44007f2d-3311-4868-8693-4ebdb8a0dcbb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}], ";"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Off", "[", 
     RowBox[{"Part", "::", "pkspec1"}], "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Off", "[", 
     RowBox[{"Transpose", "::", "nmtx"}], "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Off", "[", 
     RowBox[{"ListLinePlot", "::", "lpn"}], "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Off", "[", 
     RowBox[{"General", "::", "partd"}], "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Off", "[", 
     RowBox[{"General", "::", "strse"}], "]"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"LaunchKernels", "[", "4", "]"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"SubstracteField", "=", "0"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"SubstracteTime", "=", "0"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\:0421licker2", "=", "0"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\:0421licker3", "=", "0"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\:0421licker4", "=", "0"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"droplines", "=", "0"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\:0421licker", "=", "0"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"plot2dSliceRes", "=", "100"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"counter", "=", "0"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Off", "[", 
     RowBox[{"Part", "::", "pkspec1"}], "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Off", "[", 
     RowBox[{"Transpose", "::", "nmtx"}], "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Off", "[", 
     RowBox[{"ListLinePlot", "::", "lpn"}], "]"}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"DesiredResolutionX", "=", "100"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"DesiredResolutionY", "=", "200"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Graphs", " ", "for", " ", "NonLinearModelFit"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "plotGrid", "]"}], "=", 
     RowBox[{"{", 
      RowBox[{"ImagePadding", "\[Rule]", "40"}], "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"plotGrid", "[", 
      RowBox[{"l_List", ",", "w_", ",", "h_", ",", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nx", ",", "ny", ",", 
         RowBox[{"sidePadding", "=", 
          RowBox[{"OptionValue", "[", 
           RowBox[{"plotGrid", ",", "ImagePadding"}], "]"}]}], ",", 
         RowBox[{"topPadding", "=", "0"}], ",", "widths", ",", "heights", ",",
          "dimensions", ",", "positions", ",", 
         RowBox[{"frameOptions", "=", 
          RowBox[{"FilterRules", "[", 
           RowBox[{
            RowBox[{"{", "opts", "}"}], ",", 
            RowBox[{"FilterRules", "[", 
             RowBox[{
              RowBox[{"Options", "[", "Graphics", "]"}], ",", 
              RowBox[{"Except", "[", 
               RowBox[{"{", 
                RowBox[{"ImagePadding", ",", "Frame", ",", "FrameTicks"}], 
                "}"}], "]"}]}], "]"}]}], "]"}]}]}], "}"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"ny", ",", "nx"}], "}"}], "=", 
         RowBox[{"Dimensions", "[", "l", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"widths", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"w", "-", 
             RowBox[{"2", " ", "sidePadding"}]}], ")"}], "/", "nx"}], " ", 
          RowBox[{"Table", "[", 
           RowBox[{"1", ",", 
            RowBox[{"{", "nx", "}"}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"widths", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "=", 
         RowBox[{
          RowBox[{"widths", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "+", "sidePadding"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"widths", "[", 
          RowBox[{"[", 
           RowBox[{"-", "1"}], "]"}], "]"}], "=", 
         RowBox[{
          RowBox[{"widths", "[", 
           RowBox[{"[", 
            RowBox[{"-", "1"}], "]"}], "]"}], "+", "sidePadding"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"heights", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"h", "-", 
             RowBox[{"2", " ", "sidePadding"}]}], ")"}], "/", "ny"}], " ", 
          RowBox[{"Table", "[", 
           RowBox[{"1", ",", 
            RowBox[{"{", "ny", "}"}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"heights", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "=", 
         RowBox[{
          RowBox[{"heights", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "+", "sidePadding"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"heights", "[", 
          RowBox[{"[", 
           RowBox[{"-", "1"}], "]"}], "]"}], "=", 
         RowBox[{
          RowBox[{"heights", "[", 
           RowBox[{"[", 
            RowBox[{"-", "1"}], "]"}], "]"}], "+", "sidePadding"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"positions", "=", 
         RowBox[{"Transpose", "@", 
          RowBox[{"Partition", "[", 
           RowBox[{
            RowBox[{"Tuples", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Prepend", "[", 
                RowBox[{
                 RowBox[{"Accumulate", "[", 
                  RowBox[{"Most", "[", "#", "]"}], "]"}], ",", "0"}], "]"}], 
               "&"}], "/@", 
              RowBox[{"{", 
               RowBox[{"widths", ",", "heights"}], "}"}]}], "]"}], ",", 
            "ny"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Graphics", "[", 
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Inset", "[", 
             RowBox[{
              RowBox[{"Show", "[", 
               RowBox[{
                RowBox[{"l", "[", 
                 RowBox[{"[", 
                  RowBox[{
                   RowBox[{"ny", "-", "j", "+", "1"}], ",", "i"}], "]"}], 
                 "]"}], ",", 
                RowBox[{"ImagePadding", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"i", "\[Equal]", "1"}], ",", "sidePadding", ",", 
                    "0"}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"i", "\[Equal]", "nx"}], ",", "sidePadding", ",", 
                    "0"}], "]"}]}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"j", "\[Equal]", "1"}], ",", "sidePadding", ",", 
                    "0"}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"j", "\[Equal]", "ny"}], ",", "sidePadding", ",", 
                    "topPadding"}], "]"}]}], "}"}]}], "}"}]}], ",", 
                RowBox[{"AspectRatio", "\[Rule]", "Full"}]}], "]"}], ",", 
              RowBox[{"positions", "[", 
               RowBox[{"[", 
                RowBox[{"j", ",", "i"}], "]"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"Left", ",", "Bottom"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"widths", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", 
                RowBox[{"heights", "[", 
                 RowBox[{"[", "j", "]"}], "]"}]}], "}"}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", "nx"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"j", ",", "1", ",", "ny"}], "}"}]}], "]"}], ",", 
          RowBox[{"PlotRange", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0", ",", "w"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", "h"}], "}"}]}], "}"}]}], ",", 
          RowBox[{"ImageSize", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"w", ",", "h"}], "}"}]}], ",", 
          RowBox[{"Evaluate", "@", 
           RowBox[{"Apply", "[", 
            RowBox[{"Sequence", ",", "frameOptions"}], "]"}]}]}], "]"}]}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Starting", " ", "values", " ", "for", " ", "Exp", " ", "fit"}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ZL0", "=", "0"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"A10", "=", "0.5"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"T0", "=", "500"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"A20", "=", "0.1"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"T20", "=", "2000"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "Run", "[", "\"\<echo lmr | sudo -S mount -t ntfs /dev/sda1 /media\>\"", 
     "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Run", "[", "\"\<clear\>\"", "]"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"DynamicModule", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "x", ",", "GraphDensityPlot", ",", "\[IndentingNewLine]", "manip1", ",",
        "manip1Corr", ",", "manip1PE", ",", "manip1PECorr", ",", "manip2", 
       ",", "manip2Corr", ",", "manip2PE", ",", "manip2PECorr", ",", "z", ",",
        "f3", ",", "GraphDensityPlotManip", ",", "d2", ",", "manip1CorrField",
        ",", "manip1PECorrField", ",", "manip2CorrField", ",", 
       "manip2PECorrField", ",", "GraphDensityPlotManipCorrField", ",", 
       "GraphDensityPlotManipCorr", ",", "logplot", ",", 
       "\[IndentingNewLine]", "no", ",", "z5", ",", "MemKin", ",", 
       "MemKinNorm", ",", "MemSpec", ",", "MemSpecNorm", ",", "datasum", ",", 
       "f", ",", "averData", ",", "fn", ",", "t", ",", "MemKinNormSh", ",", 
       "MemSpecNormSh", ",", "or", ",", "posnegcheck", ",", "ndel", ",", 
       "fieldLegend", ",", "timeLegend"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Panel", "[", 
      RowBox[{
       RowBox[{"Grid", "[", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Style", "[", 
             RowBox[{"\"\<Full Path to File: \>\"", ",", "Bold"}], "]"}], ",", 
            RowBox[{"Dynamic", "@", "file"}], ",", "SpanFromLeft"}], "}"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Style", "[", 
             RowBox[{"\"\<Full Path to File For Saving: \>\"", ",", "Bold"}], 
             "]"}], ",", 
            RowBox[{"Dynamic", "[", "f3", "]"}], ",", "SpanFromLeft"}], "}"}],
           ",", "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           StyleBox[
            RowBox[{"(*", 
             RowBox[{"Open", " ", "File", " ", "Panel"}], "*)"}], "Title",
            FontWeight->"Plain"], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Panel", "[", 
             RowBox[{
              RowBox[{"Grid", "[", 
               RowBox[{"{", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\"\<Open Old File?\>\"", ",", " ", 
                   RowBox[{"Checkbox", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "oldnew", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "}"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"{", 
                  RowBox[{"Button", "[", 
                   RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Open File\>\"", ",", "Bold"}], "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"dir", "=", 
                    RowBox[{"SetDirectory", "[", "\"\</home/\>\"", "]"}]}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"file", "=", 
                    RowBox[{"SystemDialogInput", "[", 
                    RowBox[{"\"\<FileOpen\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"dir", ",", 
                    RowBox[{"{", 
                    RowBox[{"\"\<CSV Files\>\"", "\[Rule]", 
                    RowBox[{"{", "\"\<*.csv\>\"", "}"}]}], "}"}]}], "}"}], 
                    ",", 
                    RowBox[{
                    "WindowTitle", "\[Rule]", "\"\<Open Raw Data...\>\""}]}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"fileData", "=", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"file", "=!=", "$Canceled"}], ",", 
                    RowBox[{"Import", "[", 
                    RowBox[{"file", ",", "\"\<CSV\>\""}], "]"}], ",", 
                    "\"\<Nothing\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "fileData", "]"}], "\[Equal]", 
                    "List"}], ",", 
                    RowBox[{
                    RowBox[{"StringStartsQ", "[", 
                    RowBox[{
                    RowBox[{"fileData", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", "\"\<%\>\""}],
                     "]"}], "\[Equal]", "True"}]}], "]"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"droplines", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"FirstPosition", "[", 
                    RowBox[{
                    RowBox[{"fileData", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
                    RowBox[{"_", "?", "NumberQ"}]}], "]"}], "-", "2"}], ")"}],
                     "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"counter", "=", 
                    RowBox[{"counter", "+", "1"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"fileDataParam", "=", 
                    RowBox[{"Take", "[", 
                    RowBox[{"fileData", ",", "droplines"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"For", " ", "reverse", " ", "plot"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"CheckQuestion", "=", 
                    RowBox[{"StringContainsQ", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "fileDataParam", "]"}], ",", 
                    "\"\<back\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"TimeResolutionF", "::", "usage"}], "=", 
                    "\"\<TimeResolutionF[ParametersFile] returns the value of \
Time Resolution from parameter file of TR experiment; Also get Time Label for \
graphs\>\""}], ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"TimeResolutionF", "[", "ParametersFile_", "]"}], 
                    ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"temp4", ",", "temp5"}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"temp4", ":=", 
                    RowBox[{"ParallelMap", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Select", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringContainsQ", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "#", "]"}], ",", 
                    "\"\<Time resolution\>\""}], "]"}], "\[Equal]", "True"}], 
                    "&"}]}], "]"}], "&"}], ",", "ParametersFile"}], "]"}]}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"temp5", ":=", 
                    RowBox[{"StringReplace", "[", 
                    RowBox[{
                    RowBox[{"Flatten", "[", "temp4", "]"}], ",", 
                    RowBox[{
                    "\"\<% Time resolution = \>\"", "\[Rule]", 
                    "\"\< \>\""}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"TimeResolution", "=", 
                    RowBox[{
                    RowBox[{"ToExpression", "[", 
                    RowBox[{"StringDrop", "[", 
                    RowBox[{"temp5", ",", 
                    RowBox[{"-", "3"}]}], "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"label", "=", 
                    RowBox[{"StringJoin", "[", 
                    RowBox[{"\"\<Time / \>\"", ",", " ", 
                    RowBox[{
                    RowBox[{"StringTake", "[", 
                    RowBox[{"temp5", ",", 
                    RowBox[{"-", "2"}]}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"TimeResolutionF", "[", "fileDataParam", "]"}], 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RecordLengthF", "::", "usage"}], "=", 
                    "\"\<RecordLengthF[ParametersFile] returns the value of \
Record Length from parameter file of TR experiment\>\""}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RecordLengthF", "[", "ParametersFile_", "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "temp3", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"temp3", ":=", 
                    RowBox[{"ParallelMap", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Select", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringContainsQ", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "#", "]"}], ",", 
                    "\"\<Record length\>\""}], "]"}], "\[Equal]", "True"}], 
                    "&"}]}], "]"}], "&"}], ",", "ParametersFile"}], "]"}]}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"RecordLength", "=", 
                    RowBox[{"ToExpression", "[", 
                    RowBox[{
                    RowBox[{"StringCases", "[", 
                    RowBox[{
                    RowBox[{"Flatten", "[", "temp3", "]"}], ",", 
                    RowBox[{"DigitCharacter", ".."}]}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}]}], ";"}]}], 
                    " ", 
                    RowBox[{"(*", "points", "*)"}], "\[IndentingNewLine]", 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"RecordLengthF", "[", "fileDataParam", "]"}], ";",
                     "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"NumberofScansF", "::", "usage"}], "=", 
                    "\"\<NumberofScansF[ParametersFile] returns the number of \
Scans from parameter file of TR experiment\>\""}], ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"NumberofScansF", "[", "ParametersFile_", "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "tempN", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"tempN", ":=", 
                    RowBox[{"ParallelMap", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Select", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringContainsQ", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "#", "]"}], ",", 
                    "\"\<Num. scans\>\""}], "]"}], "\[Equal]", "True"}], 
                    "&"}]}], "]"}], "&"}], ",", "ParametersFile"}], "]"}]}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"NumberofScans", "=", 
                    RowBox[{"ToExpression", "[", 
                    RowBox[{
                    RowBox[{"StringCases", "[", 
                    RowBox[{
                    RowBox[{"Flatten", "[", "tempN", "]"}], ",", 
                    RowBox[{"DigitCharacter", ".."}]}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}]}], ";"}]}], 
                    " ", 
                    RowBox[{"(*", "scans", "*)"}], "\[IndentingNewLine]", 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"NumberofScansF", "[", "fileDataParam", "]"}], 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"FieldResolutionF", "::", "usage"}], "=", 
                    "\"\<FieldResolutionF[ParametersFile] returns the value \
of Field Resolution from parameter file of TR experiment\>\""}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"FieldResolutionF", "[", "ParametersFile_", "]"}],
                     ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"temp2", ",", "temp7"}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"temp2", ":=", 
                    RowBox[{"ParallelMap", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Select", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringContainsQ", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "#", "]"}], ",", 
                    "\"\<Field step\>\""}], "]"}], "\[Equal]", "True"}], 
                    "&"}]}], "]"}], "&"}], ",", "ParametersFile"}], "]"}]}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"FieldResolution", "=", 
                    RowBox[{"ToExpression", "[", 
                    RowBox[{
                    RowBox[{"StringCases", "[", 
                    RowBox[{
                    RowBox[{"Flatten", "[", "temp2", "]"}], ",", 
                    RowBox[{"DigitCharacter", ".."}]}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}]}], ";"}], 
                    "*)"}], 
                    RowBox[{"(*", 
                    RowBox[{"in", " ", "Gauss"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"temp7", ":=", 
                    RowBox[{"StringReplace", "[", 
                    RowBox[{
                    RowBox[{"Flatten", "[", "temp2", "]"}], ",", 
                    RowBox[{
                    "\"\<% Field step    \t= \>\"", "\[Rule]", 
                    "\"\< \>\""}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"FieldResolution", "=", 
                    RowBox[{
                    RowBox[{"ToExpression", "[", 
                    RowBox[{"StringDrop", "[", 
                    RowBox[{"temp7", ",", 
                    RowBox[{"-", "3"}]}], "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"FieldResolutionF", "[", "fileDataParam", "]"}], 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"RecordLengthFieldF", "::", "usage"}], "=", 
                    "\"\<RecordLengthFieldF[ParametersFile] obtains the value \
of Start Field, End Field, Record Length Field, Field Points values from \
parameter file of TR experiment\>\""}], ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    "RecordLengthFieldF", "[", "ParametersFile_", "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"temp", ",", "temp6"}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"temp", ":=", 
                    RowBox[{"ParallelMap", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Select", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringContainsQ", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "#", "]"}], ",", 
                    "\"\<Start_field\>\""}], "]"}], "\[Equal]", "True"}], 
                    "&"}]}], "]"}], "&"}], ",", "ParametersFile"}], "]"}]}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"temp6", ":=", 
                    RowBox[{"ParallelMap", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Select", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringContainsQ", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "#", "]"}], ",", 
                    "\"\<End field\>\""}], "]"}], "\[Equal]", "True"}], 
                    "&"}]}], "]"}], "&"}], ",", "ParametersFile"}], "]"}]}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"StartField", "=", 
                    RowBox[{"ToExpression", "[", 
                    RowBox[{"StringJoin", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringCases", "[", 
                    RowBox[{
                    RowBox[{"Flatten", "[", "temp", "]"}], ",", 
                    RowBox[{"DigitCharacter", ".."}]}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", "\"\<.\>\"", 
                    ",", 
                    RowBox[{
                    RowBox[{"StringCases", "[", 
                    RowBox[{
                    RowBox[{"Flatten", "[", "temp", "]"}], ",", 
                    RowBox[{"DigitCharacter", ".."}]}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "2"}], "]"}], "]"}]}], "]"}], "]"}]}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"EndField", "=", 
                    RowBox[{"ToExpression", "[", 
                    RowBox[{"StringJoin", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringCases", "[", 
                    RowBox[{
                    RowBox[{"Flatten", "[", "temp6", "]"}], ",", 
                    RowBox[{"DigitCharacter", ".."}]}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", "\"\<.\>\"", 
                    ",", 
                    RowBox[{
                    RowBox[{"StringCases", "[", 
                    RowBox[{
                    RowBox[{"Flatten", "[", "temp6", "]"}], ",", 
                    RowBox[{"DigitCharacter", ".."}]}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "2"}], "]"}], "]"}]}], "]"}], "]"}]}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"EndFieldReserve", "=", "EndField"}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"Unfinished", " ", "files"}], ";", " ", 
                    RowBox[{"first", " ", "for", " ", "only", " ", "offres"}],
                     ";", " ", 
                    RowBox[{"second", " ", "for", " ", "unfinished"}]}], 
                    "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"oldnew", "\[Equal]", "1"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"NumberofScans", "\[Equal]", "1"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"ToExpression", "[", 
                    RowBox[{"StringDrop", "[", 
                    RowBox[{
                    RowBox[{"fileData", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "RecordLength"}], "-", "1"}], "]"}], "]"}], 
                    ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", 
                    RowBox[{"ToExpression", "[", 
                    RowBox[{
                    RowBox[{"StringDrop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileData", ",", "droplines"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", "8"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ",", 
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Attention! Only off-resonance is recorded; Do not \
press Convert Data Button\>\"", ",", "18", ",", "Black"}], "]"}], "]"}], 
                    ";"}], "}"}], ",", 
                    RowBox[{"EndField", "=", "EndField"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"ToExpression", "[", 
                    RowBox[{"StringDrop", "[", 
                    RowBox[{
                    RowBox[{"fileData", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "RecordLength"}], "-", "1"}], "]"}], "]"}], 
                    ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", 
                    RowBox[{"ToExpression", "[", 
                    RowBox[{
                    RowBox[{"StringDrop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileData", ",", "droplines"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", "8"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"EndField", "=", "EndField"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"fileData", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileData", ",", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"RecordLength", "+", "1"}], ")"}]}]}], "]"}]}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Attention! Only off-resonance is recorded for the \
last scan; Only finished scans are shown\>\"", ",", "18", ",", "Black"}], 
                    "]"}], "]"}], ";"}], "}"}], ",", 
                    RowBox[{"EndField", "=", "EndField"}]}], "]"}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"NumberofScans", "\[Equal]", "1"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"ToExpression", "[", 
                    RowBox[{"StringDrop", "[", 
                    RowBox[{
                    RowBox[{"fileData", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "RecordLength"}], "-", "1"}], "]"}], "]"}], 
                    ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "\[NotEqual]", 
                    "EndField"}], ",", 
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{"EndField", "=", 
                    RowBox[{
                    RowBox[{"ToExpression", "[", 
                    RowBox[{"StringDrop", "[", 
                    RowBox[{
                    RowBox[{"fileData", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "RecordLength"}], "-", "1"}], "]"}], "]"}], 
                    ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ";", 
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Attention! Your file is not finished\>\"", ",", "18",
                     ",", "Black"}], "]"}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"EndField", "\[Equal]", "StartField"}], ",", 
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Attention! Only one field point is recorded do not \
use 2D plot\>\"", ",", "18", ",", "Black"}], "]"}], "]"}]}], "]"}], ";"}], 
                    "}"}], ",", 
                    RowBox[{"EndField", "=", "EndField"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"ToExpression", "[", 
                    RowBox[{"StringDrop", "[", 
                    RowBox[{
                    RowBox[{"fileData", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "RecordLength"}], "-", "1"}], "]"}], "]"}], 
                    ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "\[NotEqual]", 
                    "EndField"}], ",", 
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{"EndField", "=", 
                    RowBox[{
                    RowBox[{"ToExpression", "[", 
                    RowBox[{"StringDrop", "[", 
                    RowBox[{
                    RowBox[{"fileData", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "RecordLength"}], "-", "1"}], "]"}], "]"}], 
                    ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"fileData", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileData", ",", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"RecordLength", "*", 
                    RowBox[{"Round", "[", 
                    RowBox[{"2", "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"EndField", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}]}], "]"}]}], "+", "2", "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"EndField", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}]}], ")"}]}]}], "]"}]}], ";", 
                    RowBox[{"EndField", "=", "EndFieldReserve"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Attention! Your last scan is not finished; Only \
finished scans are shown\>\"", ",", "18", ",", "Black"}], "]"}], "]"}], ";"}],
                     "}"}], ",", 
                    RowBox[{"EndField", "=", "EndField"}]}], "]"}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"NumberofScans", "\[Equal]", "1"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"ToExpression", "[", 
                    RowBox[{"StringDrop", "[", 
                    RowBox[{
                    RowBox[{"fileData", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "RecordLength"}], "-", "1"}], "]"}], "]"}], 
                    ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "\[NotEqual]", 
                    "EndField"}], ",", 
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{"EndField", "=", 
                    RowBox[{
                    RowBox[{"ToExpression", "[", 
                    RowBox[{"StringDrop", "[", 
                    RowBox[{
                    RowBox[{"fileData", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "RecordLength"}], "-", "1"}], "]"}], "]"}], 
                    ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ";", 
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Attention! Your file is not finished\>\"", ",", "18",
                     ",", "Black"}], "]"}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"EndField", "\[Equal]", "StartField"}], ",", 
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Attention! Only one field point is recorded do not \
use 2D plot\>\"", ",", "18", ",", "Black"}], "]"}], "]"}]}], "]"}], ";"}], 
                    "}"}], ",", 
                    RowBox[{"EndField", "=", "EndField"}]}], "]"}]}], "]"}], 
                    ";"}], "}"}], ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"NumberofScans", "\[Equal]", "1"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"ToExpression", "[", 
                    RowBox[{"StringDrop", "[", 
                    RowBox[{
                    RowBox[{"fileData", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "RecordLength"}], "-", "1", "-", 
                    "RecordLength", "-", "1"}], "]"}], "]"}], ",", "1"}], 
                    "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "\[NotEqual]", 
                    "EndField"}], ",", 
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{"EndField", "=", 
                    RowBox[{
                    RowBox[{"ToExpression", "[", 
                    RowBox[{"StringDrop", "[", 
                    RowBox[{
                    RowBox[{"fileData", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "RecordLength"}], "-", "1", "-", 
                    "RecordLength", "-", "1"}], "]"}], "]"}], ",", "1"}], 
                    "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ";", 
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Attention! Your file is not finished\>\"", ",", "18",
                     ",", "Black"}], "]"}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"EndField", "\[Equal]", "StartField"}], ",", 
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Attention! Only one field point is recorded do not \
use 2D plot\>\"", ",", "18", ",", "Black"}], "]"}], "]"}]}], "]"}], ";"}], 
                    "}"}], ",", 
                    RowBox[{"EndField", "=", "EndField"}]}], "]"}]}], "]"}], 
                    ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"RecordLengthField", "=", 
                    RowBox[{"(", 
                    RowBox[{"EndField", "-", "StartField"}], ")"}]}], ";", 
                    RowBox[{"(*", 
                    RowBox[{"field", " ", "duration"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"FieldPoints", "=", 
                    RowBox[{"Round", "[", 
                    RowBox[{"1", "+", 
                    RowBox[{"RecordLengthField", "/", "FieldResolution"}]}], 
                    "]"}]}], ";", 
                    RowBox[{"(*", 
                    RowBox[{"field", " ", "points"}], "*)"}], 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{
                    "totalpointsinonescan", " ", "is", " ", "for", " ", 
                    "number", " ", "of", " ", "scans"}], " ", 
                    "\[GreaterEqual]", " ", "2"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"totalpointsinonescan", "=", 
                    RowBox[{
                    RowBox[{"RecordLength", "*", 
                    RowBox[{"(", 
                    RowBox[{"FieldPoints", "+", "1"}], ")"}]}], "+", 
                    RowBox[{"(", 
                    RowBox[{"FieldPoints", "+", "1"}], ")"}]}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"scans", "=", 
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{"Round", "[", 
                    RowBox[{
                    RowBox[{"Length", "[", "fileData", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"totalpointsinonescan", "+", "droplines"}], 
                    ")"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"todrop", "=", 
                    RowBox[{
                    RowBox[{"totalpointsinonescan", "*", 
                    RowBox[{"(", 
                    RowBox[{"scans", "-", "1"}], ")"}]}], "+", 
                    "droplines"}]}], ";"}]}], "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"RecordLengthFieldF", "[", "fileDataParam", "]"}],
                     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"SubstracteField", "=", "StartField"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"SubstracteTime", "=", "TimeResolution"}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"\:0421licker2", "=", "0"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"\:0421licker3", "=", "0"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"\:0421licker4", "=", "0"}], ";"}], 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<An incorrect file has been opened\>\"", ",", "18", 
                    ",", "Black"}], "]"}], "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"Abort", "[", "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<An incorrect file has been opened\>\"", ",", "18", 
                    ",", "Black"}], "]"}], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}]}], "}"}]}], "]"}], ";"}], 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
                    RowBox[{"FrameMargins", "\[Rule]", "10"}], ",", 
                    RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}]}], "]"}], 
                  "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"f3", "=", 
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\</media/Melnikov/00_Experimental_Data/\>\"", ",", 
                    "\"\<2019/FEL/\>\""}], "}"}], "]"}]}], ";"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{"Change", " ", "Directory", " ", "in", " ", 
                    RowBox[{"FileNameSette", "[", "]"}]}], "*)"}], 
                  "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"{", 
                  RowBox[{"\"\<Comments In File: \>\"", ",", 
                   RowBox[{"Dynamic", "@", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ListQ", "[", "fileDataParam", "]"}], "\[Equal]", 
                    "True"}], ",", 
                    RowBox[{"TableForm", "@", 
                    RowBox[{"Select", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringDrop", "[", 
                    RowBox[{"#", ",", "2"}], "]"}], "&"}], ",", 
                    RowBox[{"Select", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Select", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringContainsQ", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "#", "]"}], ",", "\"\<%%\>\""}], 
                    "]"}], "\[Equal]", "True"}], "&"}]}], "]"}], "&"}], ",", 
                    "fileDataParam"}], "]"}], ",", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "#", "]"}], "\[Equal]", "1"}], 
                    "&"}]}], "]"}]}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringLength", "[", "#", "]"}], ">", "0"}], 
                    "&"}]}], "]"}]}], ",", "\"\<File Does Not Open\>\""}], 
                    "]"}]}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{"Dynamic", "[", 
                    RowBox[{"StringJoin", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"fileData", "[", 
                    RowBox[{"[", 
                    RowBox[{"droplines", "-", "6"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"fileData", "[", 
                    RowBox[{"[", 
                    RowBox[{"droplines", "-", "5"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", "\"\<\n\>\"", ",", 
                    RowBox[{
                    RowBox[{"fileData", "[", 
                    RowBox[{"[", 
                    RowBox[{"droplines", "-", "4"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"fileData", "[", 
                    RowBox[{"[", 
                    RowBox[{"droplines", "-", "3"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", "\"\<\n\>\"", ",", 
                    RowBox[{
                    RowBox[{"fileData", "[", 
                    RowBox[{"[", 
                    RowBox[{"droplines", "-", "2"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"fileData", "[", 
                    RowBox[{"[", 
                    RowBox[{"droplines", "-", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "]"}], "*)"}], 
                  "}"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                 "\[IndentingNewLine]", 
                 RowBox[{"{", 
                  RowBox[{"\"\<Field for Substraction / G:\>\"", ",", " ", 
                   RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"SubstracteField", ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "True"}]}], "]"}], 
                    ",", "Number"}], "]"}]}], "}"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"{", 
                  RowBox[{"\"\<Time for Substaction / \[Mu]s:\>\"", ",", " ", 
                   RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"SubstracteTime", ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "True"}]}], "]"}], 
                    ",", "Number"}], "]"}]}], "}"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<After Changing Convert Data Should Be Pressed\>\"", 
                   ",", " ", "SpanFromLeft"}], "}"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"{", 
                  RowBox[{"\"\<Substraction Type:\>\"", ",", " ", 
                   RowBox[{"RadioButtonBar", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "s", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"1", "\[Rule]", "\"\<Nothing\>\""}], ",", 
                    RowBox[{"2", "\[Rule]", "\"\<Kinetics\>\""}], ",", 
                    RowBox[{"3", "\[Rule]", "\"\<Spectrum\>\""}]}], "}"}]}], 
                    "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"{", 
                  RowBox[{"\"\<Off-Resonance Field / G:\>\"", ",", 
                   RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{"StringDrop", "[", 
                    RowBox[{
                    RowBox[{"fileDataOffRes", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", "8"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<Do Not Want To Substracte Off-Resonance?\>\"", ",", 
                   " ", 
                   RowBox[{"Checkbox", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "offres", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "}"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<After Changing Convert Data Should Be Pressed\>\"", 
                   ",", "SpanFromLeft"}], "}"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"{", 
                  RowBox[{"\"\<Time Of The Maximum / \[Mu]s: \>\"", ",", " ", 
                   RowBox[{"Dynamic", "@", "TimeIn"}]}], "}"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"{", 
                  RowBox[{"Button", "[", 
                   RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Convert Data\>\"", ",", "Bold"}], "]"}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"oldnew", "=", "1"}], ";"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"\:0421licker", "=", "1"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"\:0421licker2", "=", "1"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"\:0421licker4", "=", "0"}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "fileData", "]"}], "\[Equal]", 
                    "List"}], ",", 
                    RowBox[{
                    RowBox[{"StringStartsQ", "[", 
                    RowBox[{
                    RowBox[{"fileData", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", "\"\<%\>\""}],
                     "]"}], "\[Equal]", "True"}], ",", 
                    RowBox[{
                    "SubstracteField", "\[GreaterEqual]", "StartField"}], ",", 
                    RowBox[{"SubstracteField", "\[LessEqual]", "EndField"}], 
                    ",", 
                    RowBox[{
                    "SubstracteTime", "\[GreaterEqual]", " ", 
                    "TimeResolution"}], ",", 
                    RowBox[{
                    "SubstracteTime", "\[LessEqual]", " ", "RecordLength"}]}],
                     "]"}], ",", 
                    RowBox[{
                    "{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"Convert", " ", "Data"}], "*)"}], 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"CheckQuestion", "\[Equal]", "False"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"datafield", "=", 
                    RowBox[{"Table", "[", 
                    RowBox[{"i", ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "StartField", ",", 
                    RowBox[{"StartField", "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"FieldPoints", "-", "1"}], ")"}], "*", 
                    "FieldResolution"}]}], ",", "FieldResolution"}], " ", 
                    "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"datafield", "=", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{"Table", "[", 
                    RowBox[{"i", ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "StartField", ",", 
                    RowBox[{"StartField", "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"FieldPoints", "-", "1"}], ")"}], "*", 
                    "FieldResolution"}]}], ",", "FieldResolution"}], " ", 
                    "}"}]}], "]"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"datafield", "=", 
                    RowBox[{"Table", "[", 
                    RowBox[{"i", ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "StartField", ",", 
                    RowBox[{"StartField", "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"FieldPoints", "-", "1"}], ")"}], "*", 
                    "FieldResolution"}]}], ",", "FieldResolution"}], " ", 
                    "}"}]}], "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "Take", " ", "kinetics", " ", "from", " ", "data", " ", 
                    "file"}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{
                    "totalpointsinonescan", " ", "is", " ", "for", " ", 
                    "number", " ", "of", " ", "scans"}], " ", 
                    "\[GreaterEqual]", " ", "2"}], "*)"}], 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"oldnew", "\[Equal]", "1"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "fileData", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"totalpointsinonescan", "+", "droplines"}], 
                    ")"}]}], "\[Equal]", "1"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"CheckQuestion", "\[Equal]", "False"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"fileDataTR", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileData", ",", "droplines"}], "]"}], ",", 
                    RowBox[{"(", 
                    RowBox[{"RecordLength", "+", "1"}], ")"}]}], "]"}]}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{"fileDataTR", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileData", ",", "droplines"}], "]"}], ",", 
                    RowBox[{"(", 
                    RowBox[{"RecordLength", "+", "1"}], ")"}]}], "]"}]}]}], 
                    "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"CheckQuestion", "\[Equal]", "False"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"fileDataTR", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileData", ",", "todrop"}], "]"}], ",", 
                    RowBox[{"(", 
                    RowBox[{"RecordLength", "+", "1"}], ")"}]}], "]"}]}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{"fileDataTR", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileData", ",", "todrop"}], "]"}], ",", 
                    RowBox[{"(", 
                    RowBox[{"RecordLength", "+", "1"}], ")"}]}], "]"}]}]}], 
                    "\[IndentingNewLine]", "]"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "fileData", "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"totalpointsinonescan", "+", "droplines"}], 
                    ")"}]}], "\[Equal]", "1"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"CheckQuestion", "\[Equal]", "False"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"fileDataOffRes", "=", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileData", ",", "droplines"}], "]"}], ",", 
                    RowBox[{"(", 
                    RowBox[{"RecordLength", "+", "1"}], ")"}]}], "]"}]}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{"fileDataOffRes", "=", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileData", ",", "droplines"}], "]"}], ",", 
                    RowBox[{"(", 
                    RowBox[{"RecordLength", "+", "1"}], ")"}]}], "]"}]}]}], 
                    "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"CheckQuestion", "\[Equal]", "False"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"fileDataOffRes", "=", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileData", ",", "todrop"}], "]"}], ",", 
                    RowBox[{"(", 
                    RowBox[{"RecordLength", "+", "1"}], ")"}]}], "]"}]}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{"fileDataOffRes", "=", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileData", ",", "todrop"}], "]"}], ",", 
                    RowBox[{"(", 
                    RowBox[{"RecordLength", "+", "1"}], ")"}]}], "]"}]}]}], 
                    "\[IndentingNewLine]", "]"}]}], "]"}], ";"}], 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"For", " ", "files", " ", "before", " ", 
                    RowBox[{
                    RowBox[{"10", "/", "07"}], "/", "2019"}]}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"CheckQuestion", "\[Equal]", "False"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"fileDataTR", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileData", ",", "droplines"}], "]"}], ",", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"RecordLength", "+", "1"}], ")"}]}]}], "]"}]}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"fileDataTR", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileData", ",", "droplines"}], "]"}], ",", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"RecordLength", "+", "1"}], ")"}]}]}], "]"}]}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"fileDataOffRes", "=", 
                    RowBox[{"Take", "[", 
                    RowBox[{"fileData", ",", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"RecordLength", "+", "1"}], ")"}]}]}], "]"}]}], 
                    ";"}], "\[IndentingNewLine]", "}"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"offres", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "dataKineticsTemp", "}"}], ",", 
                    RowBox[{
                    RowBox[{"dataKineticsTemp", "=", 
                    RowBox[{"ParallelMap", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"#", ",", "1"}], "]"}], "&"}], ",", 
                    RowBox[{"Partition", "[", 
                    RowBox[{
                    RowBox[{"Flatten", "[", "fileDataTR", "]"}], ",", 
                    RowBox[{"RecordLength", "+", "1"}]}], "]"}]}], "]"}]}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"dataKinetics", "=", 
                    RowBox[{"ParallelMap", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "-", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileDataOffRes", ",", "1"}], "]"}], "]"}]}], 
                    "&"}], ",", "dataKineticsTemp"}], "]"}]}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"offres", "\[Equal]", "2"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "dataKineticsTemp", "}"}], ",", 
                    RowBox[{
                    RowBox[{"dataKineticsTemp", "=", 
                    RowBox[{"ParallelMap", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"#", ",", "1"}], "]"}], "&"}], ",", 
                    RowBox[{"Partition", "[", 
                    RowBox[{
                    RowBox[{"Flatten", "[", "fileDataTR", "]"}], ",", 
                    RowBox[{"RecordLength", "+", "1"}]}], "]"}]}], "]"}]}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"dataKinetics", "=", "dataKineticsTemp"}], 
                    ";"}]}], "\[IndentingNewLine]", "]"}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "Create", " ", "a", " ", "List", " ", "with", " ", 
                    "Time"}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"dataTime", "=", 
                    RowBox[{"Table", "[", 
                    RowBox[{"i", ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "TimeResolution", ",", 
                    RowBox[{"RecordLength", "*", "TimeResolution"}], ",", 
                    "TimeResolution"}], "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Field", "=", "StartField"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"temp", "=", "FieldResolution"}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "For", " ", "Manipulate", " ", "2", "D", " ", "plot"}], 
                    "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"dataResample", "=", 
                    RowBox[{"ArrayResample", "[", 
                    RowBox[{"dataKinetics", ",", 
                    RowBox[{"{", 
                    RowBox[{"100", ",", "500"}], "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "Old", " ", "variant", " ", "of", " ", "Zero", " ", 
                    "Time"}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"TimeResolution", "\[Equal]", "0.5"}], ",", 
                    RowBox[{"TimeIn", "=", "250"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"TimeResolution", "\[Equal]", "1"}], ",", 
                    RowBox[{"TimeIn", "=", "500"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"TimeResolution", "\[Equal]", "2"}], ",", 
                    RowBox[{"TimeIn", "=", "1000"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"TimeResolution", "\[Equal]", "0.25"}], ",", 
                    RowBox[{"TimeIn", "=", "125"}]}], "\[IndentingNewLine]", 
                    "]"}], ";"}], "\[IndentingNewLine]", "*)"}], 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"TimeIn", "=", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"FirstPosition", "[", 
                    RowBox[{
                    RowBox[{"Mean", "[", 
                    RowBox[{"Abs", "[", "dataKinetics", "]"}], "]"}], ",", 
                    RowBox[{"_", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#", ">", "threshold"}], "&"}], ")"}]}]}], "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "*", "TimeResolution"}]}],
                     ";"}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"TimeIn", "=", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"Position", "[", 
                    RowBox[{"dataKinetics", ",", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "@", "dataKinetics"}], "]"}]}], "]"}], 
                    "]"}], "\[Equal]", "0"}], ",", 
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{
                    RowBox[{"-", "dataKinetics"}], ",", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "@", "dataKinetics"}], "]"}]}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "2"}], "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{"dataKinetics", ",", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "@", "dataKinetics"}], "]"}]}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "2"}], "]"}], "]"}]}], "]"}], "]"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"TimeOut", "=", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", 
                    RowBox[{"-", "1"}], "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"Substracte", " ", "arbitary", " ", "kinetics"}], 
                    "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Mean", "[", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"dataKinetics", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"SubstracteField", "-", "StartField"}], ")"}], 
                    "/", "FieldResolution"}], " ", "]"}], "+", "1"}], "]"}], 
                    "]"}], ",", "15"}], "]"}], "]"}], ">", "0"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"dataKineticsCorr", "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "-", 
                    RowBox[{"dataKinetics", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"SubstracteField", "-", "StartField"}], ")"}], 
                    "/", "FieldResolution"}], " ", "]"}], "+", "1"}], "]"}], 
                    "]"}]}], "&"}], ",", "dataKinetics"}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"dataKineticsCorr", "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "-", 
                    RowBox[{"dataKinetics", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"SubstracteField", "-", "StartField"}], ")"}], 
                    "/", "FieldResolution"}], " ", "]"}], "+", "1"}], "]"}], 
                    "]"}]}], "&"}], ",", "dataKinetics"}], "]"}]}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "For", " ", "Manipulate", " ", "2", "D", " ", "plot"}], 
                    "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"dataResampleCorr", "=", 
                    RowBox[{"ArrayResample", "[", 
                    RowBox[{"dataKineticsCorr", ",", 
                    RowBox[{"{", 
                    RowBox[{"100", ",", "500"}], "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"Substracte", " ", "arbitary", " ", "spectrum"}], 
                    "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"dataKineticsCorrField", "=", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "-", 
                    RowBox[{"dataKinetics", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"SubstracteTime", "-", "TimeResolution"}], ")"}], 
                    "/", "TimeResolution"}], " ", "]"}], "+", "1"}]}], "]"}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"Transpose", "[", "dataKinetics", "]"}]}], "]"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "For", " ", "Manipulate", " ", "2", "D", " ", "plot"}], 
                    "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"dataResampleCorrField", "=", 
                    RowBox[{"ArrayResample", "[", 
                    RowBox[{"dataKineticsCorrField", ",", 
                    RowBox[{"{", 
                    RowBox[{"100", ",", "500"}], "}"}]}], "]"}]}], ";"}], 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"Or", "[", 
                    RowBox[{
                    RowBox[{"SubstracteField", "<", "StartField"}], ",", 
                    RowBox[{"SubstracteField", ">", "EndField"}]}], "]"}], 
                    ",", " ", 
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Field for substraction is incorrect\>\"", ",", "18", 
                    ",", "Black"}], "]"}], "]"}], ",", 
                    RowBox[{"Or", "[", 
                    RowBox[{
                    RowBox[{"SubstracteTime", "<", " ", "TimeResolution"}], 
                    ",", 
                    RowBox[{"SubstracteTime", ">", " ", "RecordLength"}]}], 
                    "]"}], ",", " ", 
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Time for substraction is incorrect\>\"", ",", "18", 
                    ",", "Black"}], "]"}], "]"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Abort", "[", "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<An incorrect file has been opened\>\"", ",", "18", 
                    ",", "Black"}], "]"}], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}]}], "}"}]}], "]"}], ";"}], 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", "}"}], 
                    "\[IndentingNewLine]", ",", 
                    RowBox[{"FrameMargins", "\[Rule]", "10"}], ",", 
                    RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}]}], "]"}], 
                  "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"{", "}"}]}], "\[IndentingNewLine]", 
                "\[IndentingNewLine]", "}"}], "]"}], ",", 
              RowBox[{"FrameMargins", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"20", ",", "20"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"15", ",", "15"}], "}"}]}], "}"}]}], ",", 
              RowBox[{"Background", "\[Rule]", 
               RowBox[{"Lighter", "[", 
                RowBox[{"Gray", ",", " ", "0.97"}], "]"}]}]}], 
             "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            StyleBox[
             RowBox[{"(*", 
              RowBox[{"2", "D", " ", "Plot", " ", "Panel"}], "*)"}], "Title"],
             "\[IndentingNewLine]", 
            RowBox[{"Panel", "[", 
             RowBox[{
              RowBox[{"Grid", "[", 
               RowBox[{"{", 
                RowBox[{
                "{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 "\[IndentingNewLine]", 
                 RowBox[{"Panel", "[", 
                  RowBox[{
                   RowBox[{"Grid", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<2D Spectrum:\n\>\"", ",", "Bold"}], "]"}], 
                    ",", "SpanFromLeft"}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Time Axis / Points:\>\"", ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "DesiredResolutionX", "]"}], ",", 
                    "Number", ",", 
                    RowBox[{"FieldSize", "\[Rule]", "13"}]}], "]"}]}], "}"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Field Axis / Points:\>\"", ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "DesiredResolutionY", "]"}], ",", 
                    "Number", ",", 
                    RowBox[{"FieldSize", "\[Rule]", "13"}]}], "]"}]}], "}"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Plot Explorer Function:\>\"", ",", " ", 
                    RowBox[{"Checkbox", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "x", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Density Plot\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{
                    "{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "fileData", "]"}], "\[Equal]", 
                    "List"}], ",", 
                    RowBox[{
                    RowBox[{"Head", "[", "dataKinetics", "]"}], "\[Equal]", 
                    "List"}], ",", 
                    RowBox[{
                    RowBox[{"StringStartsQ", "[", 
                    RowBox[{
                    RowBox[{"fileData", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", "\"\<%\>\""}],
                     "]"}], "\[Equal]", "True"}]}], "]"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"\:0421licker4", "=", "1"}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"CheckQuestion", "\[Equal]", "False"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"s", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"GraphDensityPlot", "=", 
                    RowBox[{"ListDensityPlot", "[", 
                    RowBox[{"dataKinetics", ",", 
                    RowBox[{"MaxPlotPoints", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"DesiredResolutionX", ",", "DesiredResolutionY"}],
                     "}"}]}], ",", " ", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
                    RowBox[{"ColorFunction", "\[Rule]", "\"\<Rainbow\>\""}], 
                    ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{
                    RowBox[{"BarLegend", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<Rainbow\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}], ",", 
                    RowBox[{"LegendMarkerSize", "\[Rule]", "320"}], ",", 
                    RowBox[{"LegendMargins", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"32", ",", "0"}], "}"}]}], "}"}]}]}], "]"}], ",", 
                    "Right"}], "]"}]}], ",", 
                    RowBox[{"DataRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"RecordLength", "*", "TimeResolution"}]}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StartField", "/", "1000"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"StartField", "+", "RecordLengthField"}], ")"}], 
                    "/", "1000"}]}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<Magnetic Field / kG\>\""}], 
                    "}"}]}], ",", 
                    RowBox[{"AspectRatio", "\[Rule]", 
                    RowBox[{"1", "/", "1"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "400"}], "}"}]}], ",", 
                    RowBox[{"LabelStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"14", ",", " ", "Bold"}], "]"}]}]}], "]"}]}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{"s", "\[Equal]", "2"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"GraphDensityPlot", "=", 
                    RowBox[{"ListDensityPlot", "[", 
                    RowBox[{"dataKineticsCorr", ",", 
                    RowBox[{"MaxPlotPoints", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"DesiredResolutionX", ",", "DesiredResolutionY"}],
                     "}"}]}], ",", " ", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
                    RowBox[{"ColorFunction", "\[Rule]", "\"\<Rainbow\>\""}], 
                    ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{
                    RowBox[{"BarLegend", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<Rainbow\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}], ",", 
                    RowBox[{"LegendMarkerSize", "\[Rule]", "320"}], ",", 
                    RowBox[{"LegendMargins", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"32", ",", "0"}], "}"}]}], "}"}]}]}], "]"}], ",", 
                    "Right"}], "]"}]}], ",", 
                    RowBox[{"DataRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"RecordLength", "*", "TimeResolution"}]}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StartField", "/", "1000"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"StartField", "+", "RecordLengthField"}], ")"}], 
                    "/", "1000"}]}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<Magnetic Field / kG\>\""}], 
                    "}"}]}], ",", 
                    RowBox[{"AspectRatio", "\[Rule]", 
                    RowBox[{"1", "/", "1"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "400"}], "}"}]}], ",", 
                    RowBox[{"LabelStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"14", ",", " ", "Bold"}], "]"}]}]}], "]"}]}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{"s", "\[Equal]", "3"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"GraphDensityPlot", "=", 
                    RowBox[{"ListDensityPlot", "[", 
                    RowBox[{"dataKineticsCorrField", ",", 
                    RowBox[{"MaxPlotPoints", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"DesiredResolutionX", ",", "DesiredResolutionY"}],
                     "}"}]}], ",", " ", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
                    RowBox[{"ColorFunction", "\[Rule]", "\"\<Rainbow\>\""}], 
                    ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{
                    RowBox[{"BarLegend", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<Rainbow\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}], ",", 
                    RowBox[{"LegendMarkerSize", "\[Rule]", "350"}], ",", 
                    RowBox[{"LegendMargins", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"32", ",", "0"}], "}"}]}], "}"}]}]}], "]"}], ",", 
                    "Right"}], "]"}]}], ",", 
                    RowBox[{"DataRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"RecordLength", "*", "TimeResolution"}]}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StartField", "/", "1000"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"StartField", "+", "RecordLengthField"}], ")"}], 
                    "/", "1000"}]}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<Magnetic Field / kG\>\""}], 
                    "}"}]}], ",", 
                    RowBox[{"AspectRatio", "\[Rule]", 
                    RowBox[{"1", "/", "1"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "400"}], "}"}]}], ",", 
                    RowBox[{"LabelStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"14", ",", " ", "Bold"}], "]"}]}]}], "]"}]}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"s", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"GraphDensityPlot", "=", 
                    RowBox[{"ListDensityPlot", "[", 
                    RowBox[{
                    RowBox[{"Reverse", "[", "dataKinetics", "]"}], ",", 
                    RowBox[{"MaxPlotPoints", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"DesiredResolutionX", ",", "DesiredResolutionY"}],
                     "}"}]}], ",", " ", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
                    RowBox[{"ColorFunction", "\[Rule]", "\"\<Rainbow\>\""}], 
                    ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{
                    RowBox[{"BarLegend", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<Rainbow\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}], ",", 
                    RowBox[{"LegendMarkerSize", "\[Rule]", "320"}], ",", 
                    RowBox[{"LegendMargins", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"32", ",", "0"}], "}"}]}], "}"}]}]}], "]"}], ",", 
                    "Right"}], "]"}]}], ",", 
                    RowBox[{"DataRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"RecordLength", "*", "TimeResolution"}]}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", "StartField", ")"}], "/", "1000"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"StartField", "+", "RecordLengthField"}], ")"}], 
                    "/", "1000"}]}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<Magnetic Field / kG\>\""}], 
                    "}"}]}], ",", 
                    RowBox[{"AspectRatio", "\[Rule]", 
                    RowBox[{"1", "/", "1"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "400"}], "}"}]}], ",", 
                    RowBox[{"LabelStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"14", ",", " ", "Bold"}], "]"}]}]}], "]"}]}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{"s", "\[Equal]", "2"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"GraphDensityPlot", "=", 
                    RowBox[{"ListDensityPlot", "[", 
                    RowBox[{
                    RowBox[{"Reverse", "[", "dataKineticsCorr", "]"}], ",", 
                    RowBox[{"MaxPlotPoints", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"DesiredResolutionX", ",", "DesiredResolutionY"}],
                     "}"}]}], ",", " ", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
                    RowBox[{"ColorFunction", "\[Rule]", "\"\<Rainbow\>\""}], 
                    ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{
                    RowBox[{"BarLegend", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<Rainbow\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}], ",", 
                    RowBox[{"LegendMarkerSize", "\[Rule]", "320"}], ",", 
                    RowBox[{"LegendMargins", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"32", ",", "0"}], "}"}]}], "}"}]}]}], "]"}], ",", 
                    "Right"}], "]"}]}], ",", 
                    RowBox[{"DataRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"RecordLength", "*", "TimeResolution"}]}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", "StartField", ")"}], "/", "1000"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"StartField", "+", "RecordLengthField"}], ")"}], 
                    "/", "1000"}]}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<Magnetic Field / kG\>\""}], 
                    "}"}]}], ",", 
                    RowBox[{"AspectRatio", "\[Rule]", 
                    RowBox[{"1", "/", "1"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "400"}], "}"}]}], ",", 
                    RowBox[{"LabelStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"14", ",", " ", "Bold"}], "]"}]}]}], "]"}]}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{"s", "\[Equal]", "3"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"GraphDensityPlot", "=", 
                    RowBox[{"ListDensityPlot", "[", 
                    RowBox[{
                    RowBox[{"Reverse", "[", "dataKineticsCorrField", "]"}], 
                    ",", 
                    RowBox[{"MaxPlotPoints", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"DesiredResolutionX", ",", "DesiredResolutionY"}],
                     "}"}]}], ",", " ", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
                    RowBox[{"ColorFunction", "\[Rule]", "\"\<Rainbow\>\""}], 
                    ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{
                    RowBox[{"BarLegend", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<Rainbow\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}], ",", 
                    RowBox[{"LegendMarkerSize", "\[Rule]", "320"}], ",", 
                    RowBox[{"LegendMargins", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"32", ",", "0"}], "}"}]}], "}"}]}]}], "]"}], ",", 
                    "Right"}], "]"}]}], ",", 
                    RowBox[{"DataRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"RecordLength", "*", "TimeResolution"}]}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", "StartField", ")"}], "/", "1000"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"StartField", "+", "RecordLengthField"}], ")"}], 
                    "/", "1000"}]}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<Magnetic Field / kG\>\""}], 
                    "}"}]}], ",", 
                    RowBox[{"AspectRatio", "\[Rule]", 
                    RowBox[{"1", "/", "1"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "400"}], "}"}]}], ",", 
                    RowBox[{"LabelStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"14", ",", " ", "Bold"}], "]"}]}]}], "]"}]}]}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<An incorrect file has been opened\>\"", ",", "18", 
                    ",", "Black"}], "]"}], "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"Abort", "[", "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<An incorrect file has been opened\>\"", ",", "18", 
                    ",", "Black"}], "]"}], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}]}], "}"}]}], "]"}], ";"}], 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"FrameMargins", "\[Rule]", "10"}], ",", 
                    RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}]}], 
                    "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Clear Figure\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\:0421licker4", "=", "0"}], ";"}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"FrameMargins", "\[Rule]", "10"}], ",", 
                    RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}]}], 
                    "]"}]}], "}"}]}], "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", 
                    "]"}], ",", 
                   RowBox[{"FrameMargins", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"20", ",", "10"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "5"}], "}"}]}], "}"}]}], ",", 
                   RowBox[{"Background", "\[Rule]", 
                    RowBox[{"Lighter", "[", 
                    RowBox[{"Gray", ",", " ", "0.97"}], "]"}]}]}], 
                  "\[IndentingNewLine]", "]"}], "}"}], "\[IndentingNewLine]", 
                "}"}], "]"}], ",", 
              RowBox[{"FrameMargins", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"20", ",", "10"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"5", ",", "5"}], "}"}]}], "}"}]}], ",", 
              RowBox[{"Background", "\[Rule]", 
               RowBox[{"Lighter", "[", 
                RowBox[{"Gray", ",", " ", "0.97"}], "]"}]}]}], "]"}], ",", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            StyleBox[
             RowBox[{"(*", 
              RowBox[{"Manipulate", " ", "Panel"}], "*)"}], "Title"], 
            "\[IndentingNewLine]", 
            RowBox[{"Panel", "[", 
             RowBox[{
              RowBox[{"Grid", "[", 
               RowBox[{"{", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{"Panel", "[", 
                  RowBox[{
                   RowBox[{"Grid", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Cross-Sections:\>\"", ",", "Bold"}], "]"}], 
                    ",", "SpanFromLeft"}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<Time for Substracte Slice:\>\"", ",", " ", 
                    RowBox[{"InputField", "[", 
                    RowBox[{"Dynamic", "[", "SubstracteTime", "]"}], "]"}]}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<Substract Field / G: \>\"", ",", " ", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"StartField", "+", 
                    RowBox[{"FieldResolution", "*", 
                    RowBox[{"(", 
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"SubstracteField", "-", "StartField"}], ")"}], 
                    "/", "FieldResolution"}], " ", "]"}], " ", ")"}]}]}], 
                    "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Substract Time / \[Mu]s: \>\"", ",", " ", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"TimeResolution", "+", 
                    RowBox[{"TimeResolution", "*", 
                    RowBox[{"(", 
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"SubstracteTime", "-", "TimeResolution"}], ")"}], 
                    "/", "TimeResolution"}], " ", "]"}], " ", ")"}]}]}], 
                    "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Substraction:\>\"", ",", " ", 
                    RowBox[{"RadioButtonBar", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "s", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"1", "\[Rule]", "\"\<Nothing\>\""}], ",", 
                    RowBox[{"2", "\[Rule]", "\"\<Kinetics\>\""}], ",", 
                    RowBox[{"3", "\[Rule]", "\"\<Spectrum\>\""}]}], "}"}]}], 
                    "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    "{", "\"\<N.B. Substract Should Be Recalculated!\>\"", 
                    "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Plot Explorer Function:\>\"", ",", " ", 
                    RowBox[{"Checkbox", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "z", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<2D Graph:\>\"", ",", " ", 
                    RowBox[{"Checkbox", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "d2", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<Log Plot:\>\"", ",", " ", 
                    RowBox[{"Checkbox", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "logplot", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Cross-Section Plot\>\"", ",", "Bold"}], 
                    "]"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"dataKineticsCorr", "=", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"a", "\[Equal]", "1"}], "&&", 
                    RowBox[{"s", "\[Equal]", "2"}]}], ",", 
                    "dataKineticsCorr1", ",", 
                    RowBox[{
                    RowBox[{"a", "\[Equal]", "2"}], "&&", 
                    RowBox[{"s", "\[Equal]", "1"}]}], ",", 
                    "dataKineticsCorr2"}], "]"}], "]"}]}], ";"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"\:0421licker3", "=", "1"}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "fileData", "]"}], "\[Equal]", 
                    "List"}], ",", 
                    RowBox[{
                    RowBox[{"Head", "[", "dataKinetics", "]"}], "\[Equal]", 
                    "List"}], ",", 
                    RowBox[{
                    RowBox[{"StringStartsQ", "[", 
                    RowBox[{
                    RowBox[{"fileData", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", "\"\<%\>\""}],
                     "]"}], "\[Equal]", "True"}], ",", 
                    RowBox[{"\:0421licker", "\[Equal]", "1"}], ",", " ", 
                    RowBox[{"Or", "[", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"NumericQ", "[", "TimeIn", "]"}], "\[Equal]", 
                    "True"}], ",", 
                    RowBox[{"TimeIn", "\[NotEqual]", " ", "Null"}]}], "]"}]}],
                     "]"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"manip1", "=", 
                    RowBox[{"Manipulate", "[", 
                    RowBox[{
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"datafield", ",", 
                    RowBox[{"dataKinetics", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"TimeIn", "-", "TimeResolution"}], ")"}], "/", 
                    "TimeResolution"}], " ", "]"}], "+", "1"}]}], "]"}], 
                    "]"}]}], "}"}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Mangetic Field / G\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"380", ",", "220"}], "}"}]}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"TimeIn", " ", ",", "TimeResolution", ",", 
                    RowBox[{"TimeResolution", "*", "RecordLength"}], ",", 
                    "TimeResolution", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}], ",", 
                    RowBox[{"TrackingFunction", "\[Rule]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"#", "\[GreaterEqual]", " ", "TimeResolution"}], 
                    ",", 
                    RowBox[{"#", "\[LessEqual]", 
                    RowBox[{"TimeResolution", "*", "RecordLength"}]}]}], 
                    "]"}], ",", 
                    RowBox[{"TimeIn", "=", "#"}], ",", 
                    RowBox[{"TimeIn", "=", "TimeResolution"}]}], "]"}], "&"}],
                     ")"}]}]}], "}"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"LocalizeVariables", "\[Rule]", "False"}], ",", 
                    RowBox[{"Paneled", "\[Rule]", "False"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"manip1Corr", "=", 
                    RowBox[{"Manipulate", "[", 
                    RowBox[{
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"datafield", ",", 
                    RowBox[{"dataKineticsCorr", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"TimeIn", "-", "TimeResolution"}], ")"}], "/", 
                    "TimeResolution"}], " ", "]"}], "+", "1"}]}], "]"}], 
                    "]"}]}], "}"}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Mangetic Field / G\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"380", ",", "220"}], "}"}]}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"TimeIn", " ", ",", "TimeResolution", ",", 
                    RowBox[{"TimeResolution", "*", "RecordLength"}], ",", 
                    "TimeResolution", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}], ",", 
                    RowBox[{"TrackingFunction", "\[Rule]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"#", "\[GreaterEqual]", " ", "TimeResolution"}], 
                    ",", 
                    RowBox[{"#", "\[LessEqual]", 
                    RowBox[{"TimeResolution", "*", "RecordLength"}]}]}], 
                    "]"}], ",", 
                    RowBox[{"TimeIn", "=", "#"}], ",", 
                    RowBox[{"TimeIn", "=", "TimeResolution"}]}], "]"}], "&"}],
                     ")"}]}]}], "}"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"LocalizeVariables", "\[Rule]", "False"}], ",", 
                    RowBox[{"Paneled", "\[Rule]", "False"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"manip1CorrField", "=", 
                    RowBox[{"Manipulate", "[", 
                    RowBox[{
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"datafield", ",", 
                    RowBox[{"dataKineticsCorrField", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"TimeIn", "-", "TimeResolution"}], ")"}], "/", 
                    "TimeResolution"}], " ", "]"}], "+", "1"}]}], "]"}], 
                    "]"}]}], "}"}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Mangetic Field / G\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"380", ",", "220"}], "}"}]}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"TimeIn", " ", ",", "TimeResolution", ",", 
                    RowBox[{"TimeResolution", "*", "RecordLength"}], ",", 
                    "TimeResolution", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}], ",", 
                    RowBox[{"TrackingFunction", "\[Rule]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"#", "\[GreaterEqual]", " ", "TimeResolution"}], 
                    ",", 
                    RowBox[{"#", "\[LessEqual]", 
                    RowBox[{"TimeResolution", "*", "RecordLength"}]}]}], 
                    "]"}], ",", 
                    RowBox[{"TimeIn", "=", "#"}], ",", 
                    RowBox[{"TimeIn", "=", "TimeResolution"}]}], "]"}], "&"}],
                     ")"}]}]}], "}"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"LocalizeVariables", "\[Rule]", "False"}], ",", 
                    RowBox[{"Paneled", "\[Rule]", "False"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"manip1PE", "=", 
                    RowBox[{"Manipulate", "[", 
                    RowBox[{
                    RowBox[{"PlotExplorer", "@", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"datafield", ",", 
                    RowBox[{"dataKinetics", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"TimeIn", "-", "TimeResolution"}], ")"}], "/", 
                    "TimeResolution"}], " ", "]"}], "+", "1"}]}], "]"}], 
                    "]"}]}], "}"}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Mangetic Field / G\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"380", ",", "220"}], "}"}]}]}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"TimeIn", " ", ",", "TimeResolution", ",", 
                    RowBox[{"TimeResolution", "*", "RecordLength"}], ",", 
                    "TimeResolution", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}], ",", 
                    RowBox[{"TrackingFunction", "\[Rule]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"#", "\[GreaterEqual]", " ", "TimeResolution"}], 
                    ",", 
                    RowBox[{"#", "\[LessEqual]", 
                    RowBox[{"TimeResolution", "*", "RecordLength"}]}]}], 
                    "]"}], ",", 
                    RowBox[{"TimeIn", "=", "#"}], ",", 
                    RowBox[{"TimeIn", "=", "TimeResolution"}]}], "]"}], "&"}],
                     ")"}]}]}], "}"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"LocalizeVariables", "\[Rule]", "False"}], ",", 
                    RowBox[{"Paneled", "\[Rule]", "False"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"manip1PECorr", "=", 
                    RowBox[{"Manipulate", "[", 
                    RowBox[{
                    RowBox[{"PlotExplorer", "@", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"datafield", ",", 
                    RowBox[{"dataKineticsCorr", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"TimeIn", "-", "TimeResolution"}], ")"}], "/", 
                    "TimeResolution"}], " ", "]"}], "+", "1"}]}], "]"}], 
                    "]"}]}], "}"}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Mangetic Field / G\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"380", ",", "220"}], "}"}]}]}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"TimeIn", " ", ",", "TimeResolution", ",", 
                    RowBox[{"TimeResolution", "*", "RecordLength"}], ",", 
                    "TimeResolution", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}], ",", 
                    RowBox[{"TrackingFunction", "\[Rule]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"#", "\[GreaterEqual]", " ", "TimeResolution"}], 
                    ",", 
                    RowBox[{"#", "\[LessEqual]", 
                    RowBox[{"TimeResolution", "*", "RecordLength"}]}]}], 
                    "]"}], ",", 
                    RowBox[{"TimeIn", "=", "#"}], ",", 
                    RowBox[{"TimeIn", "=", "TimeResolution"}]}], "]"}], "&"}],
                     ")"}]}]}], "}"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"LocalizeVariables", "\[Rule]", "False"}], ",", 
                    RowBox[{"Paneled", "\[Rule]", "False"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"manip1PECorrField", "=", 
                    RowBox[{"Manipulate", "[", 
                    RowBox[{
                    RowBox[{"PlotExplorer", "@", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"datafield", ",", 
                    RowBox[{"dataKineticsCorrField", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"TimeIn", "-", "TimeResolution"}], ")"}], "/", 
                    "TimeResolution"}], " ", "]"}], "+", "1"}]}], "]"}], 
                    "]"}]}], "}"}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Mangetic Field / G\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"380", ",", "220"}], "}"}]}]}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"TimeIn", " ", ",", "TimeResolution", ",", 
                    RowBox[{"TimeResolution", "*", "RecordLength"}], ",", 
                    "TimeResolution", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}], ",", 
                    RowBox[{"TrackingFunction", "\[Rule]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"#", "\[GreaterEqual]", " ", "TimeResolution"}], 
                    ",", 
                    RowBox[{"#", "\[LessEqual]", 
                    RowBox[{"TimeResolution", "*", "RecordLength"}]}]}], 
                    "]"}], ",", 
                    RowBox[{"TimeIn", "=", "#"}], ",", 
                    RowBox[{"TimeIn", "=", "TimeResolution"}]}], "]"}], "&"}],
                     ")"}]}]}], "}"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"LocalizeVariables", "\[Rule]", "False"}], ",", 
                    RowBox[{"Paneled", "\[Rule]", "False"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"logplot", "=", "1"}], ";", "\[IndentingNewLine]",
                     "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{
                    "An", " ", "attempt", " ", "to", " ", "do", " ", "Log", 
                    " ", "Plot"}], ";", " ", 
                    RowBox[{
                    "I", " ", "used", " ", "Abs", " ", "for", " ", "Negative",
                     " ", "signal"}]}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"logplot", "\[Equal]", "1"}], ",", 
                    RowBox[{"manip2", "=", 
                    RowBox[{"Manipulate", "[", 
                    RowBox[{
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{"dataKinetics", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "}"}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<Intensity / a. u.\>\""}], 
                    "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"380", ",", "220"}], "}"}]}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Field", ",", "StartField", ",", 
                    RowBox[{"StartField", "+", "RecordLengthField"}], ",", 
                    "FieldResolution", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}], ",", 
                    RowBox[{"TrackingFunction", "\[Rule]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"#", "\[GreaterEqual]", " ", "StartField"}], ",", 
                    RowBox[{"#", "\[LessEqual]", 
                    RowBox[{"(", 
                    RowBox[{"StartField", "+", "RecordLengthField"}], 
                    ")"}]}]}], "]"}], ",", 
                    RowBox[{"Field", "=", "#"}], ",", 
                    RowBox[{"Field", "=", "StartField"}]}], "]"}], "&"}], 
                    ")"}]}]}], "}"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"LocalizeVariables", "\[Rule]", "False"}], ",", 
                    RowBox[{"Paneled", "\[Rule]", "False"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"logplot", "\[Equal]", "2"}], ",", 
                    "\[IndentingNewLine]", "\"\<Negative Signal\>\""}], "]"}],
                     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"logplot", "\[Equal]", "1"}], ",", 
                    RowBox[{"manip2Corr", "=", 
                    RowBox[{"Manipulate", "[", 
                    RowBox[{
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{"dataKineticsCorr", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "}"}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<Intensity / a. u.\>\""}], 
                    "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"380", ",", "220"}], "}"}]}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Field", ",", "StartField", ",", 
                    RowBox[{"StartField", "+", "RecordLengthField"}], ",", 
                    "FieldResolution", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}], ",", 
                    RowBox[{"TrackingFunction", "\[Rule]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"#", "\[GreaterEqual]", " ", "StartField"}], ",", 
                    RowBox[{"#", "\[LessEqual]", 
                    RowBox[{"(", 
                    RowBox[{"StartField", "+", "RecordLengthField"}], 
                    ")"}]}]}], "]"}], ",", 
                    RowBox[{"Field", "=", "#"}], ",", 
                    RowBox[{"Field", "=", "StartField"}]}], "]"}], "&"}], 
                    ")"}]}]}], "}"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"LocalizeVariables", "\[Rule]", "False"}], ",", 
                    RowBox[{"Paneled", "\[Rule]", "False"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"logplot", "\[Equal]", "2"}], ",", 
                    "\[IndentingNewLine]", "\"\<Negative Signal\>\""}], "]"}],
                     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"logplot", "\[Equal]", "1"}], ",", 
                    RowBox[{"manip2CorrField", "=", 
                    RowBox[{"Manipulate", "[", 
                    RowBox[{
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{"dataKineticsCorrField", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "}"}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<Intensity / a. u.\>\""}], 
                    "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"380", ",", "220"}], "}"}]}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Field", ",", "StartField", ",", 
                    RowBox[{"StartField", "+", "RecordLengthField"}], ",", 
                    "FieldResolution", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}], ",", 
                    RowBox[{"TrackingFunction", "\[Rule]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"#", "\[GreaterEqual]", " ", "StartField"}], ",", 
                    RowBox[{"#", "\[LessEqual]", 
                    RowBox[{"(", 
                    RowBox[{"StartField", "+", "RecordLengthField"}], 
                    ")"}]}]}], "]"}], ",", 
                    RowBox[{"Field", "=", "#"}], ",", 
                    RowBox[{"Field", "=", "StartField"}]}], "]"}], "&"}], 
                    ")"}]}]}], "}"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"LocalizeVariables", "\[Rule]", "False"}], ",", 
                    RowBox[{"Paneled", "\[Rule]", "False"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"logplot", "\[Equal]", "2"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"manip2CorrField", "=", 
                    RowBox[{"Manipulate", "[", 
                    RowBox[{
                    RowBox[{"ListLogPlot", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{"Abs", "@", 
                    RowBox[{"dataKineticsCorrField", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}]}], "}"}], "]"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"PlotRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"All", ",", 
                    RowBox[{"{", 
                    RowBox[{"0.001", ",", "All"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "label", ",", "\"\<Log[Abs[Intensity]] / a. u.\>\""}], 
                    "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"380", ",", "220"}], "}"}]}], ",", 
                    RowBox[{"Joined", "\[Rule]", "True"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Field", ",", "StartField", ",", 
                    RowBox[{"StartField", "+", "RecordLengthField"}], ",", 
                    "FieldResolution", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}], ",", 
                    RowBox[{"TrackingFunction", "\[Rule]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"#", "\[GreaterEqual]", " ", "StartField"}], ",", 
                    RowBox[{"#", "\[LessEqual]", 
                    RowBox[{"(", 
                    RowBox[{"StartField", "+", "RecordLengthField"}], 
                    ")"}]}]}], "]"}], ",", 
                    RowBox[{"Field", "=", "#"}], ",", 
                    RowBox[{"Field", "=", "StartField"}]}], "]"}], "&"}], 
                    ")"}]}]}], "}"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"LocalizeVariables", "\[Rule]", "False"}], ",", 
                    RowBox[{"Paneled", "\[Rule]", "False"}]}], "]"}]}]}], 
                    "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"manip2PE", "=", 
                    RowBox[{"Manipulate", "[", 
                    RowBox[{
                    RowBox[{"PlotExplorer", "@", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{"dataKinetics", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "}"}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<Intensity / a. u.\>\""}], 
                    "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"380", ",", "220"}], "}"}]}]}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Field", ",", "StartField", ",", 
                    RowBox[{"StartField", "+", "RecordLengthField"}], ",", 
                    "FieldResolution", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}], ",", 
                    RowBox[{"TrackingFunction", "\[Rule]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"#", "\[GreaterEqual]", " ", "StartField"}], ",", 
                    RowBox[{"#", "\[LessEqual]", 
                    RowBox[{"(", 
                    RowBox[{"StartField", "+", "RecordLengthField"}], 
                    ")"}]}]}], "]"}], ",", 
                    RowBox[{"Field", "=", "#"}], ",", 
                    RowBox[{"Field", "=", "StartField"}]}], "]"}], "&"}], 
                    ")"}]}]}], "}"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"LocalizeVariables", "\[Rule]", "False"}], ",", 
                    RowBox[{"Paneled", "\[Rule]", "False"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"manip2PECorr", "=", 
                    RowBox[{"Manipulate", "[", 
                    RowBox[{
                    RowBox[{"PlotExplorer", "@", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{"dataKineticsCorr", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "}"}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<Intensity / a. u.\>\""}], 
                    "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"380", ",", "220"}], "}"}]}]}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Field", ",", "StartField", ",", 
                    RowBox[{"StartField", "+", "RecordLengthField"}], ",", 
                    "FieldResolution", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}], ",", 
                    RowBox[{"TrackingFunction", "\[Rule]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"#", "\[GreaterEqual]", " ", "StartField"}], ",", 
                    RowBox[{"#", "\[LessEqual]", 
                    RowBox[{"(", 
                    RowBox[{"StartField", "+", "RecordLengthField"}], 
                    ")"}]}]}], "]"}], ",", 
                    RowBox[{"Field", "=", "#"}], ",", 
                    RowBox[{"Field", "=", 
                    RowBox[{"Dynamic", "@", "StartField"}]}]}], "]"}], "&"}], 
                    ")"}]}]}], "}"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"LocalizeVariables", "\[Rule]", "False"}], ",", 
                    RowBox[{"Paneled", "\[Rule]", "False"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"manip2PECorrField", "=", 
                    RowBox[{"Manipulate", "[", 
                    RowBox[{
                    RowBox[{"PlotExplorer", "@", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{"dataKineticsCorrField", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "}"}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<Intensity / a. u.\>\""}], 
                    "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"380", ",", "220"}], "}"}]}]}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Field", ",", "StartField", ",", 
                    RowBox[{"StartField", "+", "RecordLengthField"}], ",", 
                    "FieldResolution", ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}], ",", 
                    RowBox[{"TrackingFunction", "\[Rule]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"#", "\[GreaterEqual]", " ", "StartField"}], ",", 
                    RowBox[{"#", "\[LessEqual]", 
                    RowBox[{"(", 
                    RowBox[{"StartField", "+", "RecordLengthField"}], 
                    ")"}]}]}], "]"}], ",", 
                    RowBox[{"Field", "=", "#"}], ",", 
                    RowBox[{"Field", "=", "StartField"}]}], "]"}], "&"}], 
                    ")"}]}]}], "}"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"LocalizeVariables", "\[Rule]", "False"}], ",", 
                    RowBox[{"Paneled", "\[Rule]", "False"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"GraphDensityPlotManip", "=", 
                    RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"ListDensityPlot", "[", 
                    RowBox[{"dataResample", ",", 
                    RowBox[{"MaxPlotPoints", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"plot2dSliceRes", ",", "plot2dSliceRes"}], 
                    "}"}]}], ",", " ", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
                    RowBox[{"ColorFunction", "\[Rule]", "\"\<Rainbow\>\""}], 
                    ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{
                    RowBox[{"BarLegend", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<Rainbow\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}], ",", 
                    RowBox[{"LegendMarkerSize", "\[Rule]", "180"}], ",", 
                    RowBox[{"LegendMargins", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"32", ",", "0"}], "}"}]}], "}"}]}]}], "]"}], ",", 
                    "Right"}], "]"}]}], ",", 
                    RowBox[{"DataRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"TimeResolution", ",", 
                    RowBox[{"RecordLength", "*", "TimeResolution"}]}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StartField", "/", "1000"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"StartField", "+", "RecordLengthField"}], ")"}], 
                    "/", "1000"}]}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<Magnetic Field / kG\>\""}], 
                    "}"}]}], ",", 
                    RowBox[{"AspectRatio", "\[Rule]", 
                    RowBox[{"1", "/", "1"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"350", ",", "350"}], "}"}]}], ",", 
                    RowBox[{"LabelStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"12", ",", " ", "Bold"}], "]"}]}], ",", 
                    RowBox[{"Mesh", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "TimeIn", "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Field", "/", "1000"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"MeshStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Directive", "[", 
                    RowBox[{"Red", ",", "Dashed"}], "]"}], ",", " ", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"Red", ",", "Dashed"}], "]"}]}], "}"}]}]}], "]"}],
                     ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"LocalizeVariables", "\[Rule]", "False"}], ",", 
                    RowBox[{"Paneled", "\[Rule]", "False"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"For", " ", "Automatic", " ", "Change"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"GraphDensityPlotManipCorr", "=", 
                    RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"ListDensityPlot", "[", 
                    RowBox[{"dataResampleCorr", ",", 
                    RowBox[{"MaxPlotPoints", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"plot2dSliceRes", ",", "plot2dSliceRes"}], 
                    "}"}]}], ",", " ", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
                    RowBox[{"ColorFunction", "\[Rule]", "\"\<Rainbow\>\""}], 
                    ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{
                    RowBox[{"BarLegend", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<Rainbow\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}], ",", 
                    RowBox[{"LegendMarkerSize", "\[Rule]", "180"}], ",", 
                    RowBox[{"LegendMargins", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"32", ",", "0"}], "}"}]}], "}"}]}]}], "]"}], ",", 
                    "Right"}], "]"}]}], ",", 
                    RowBox[{"DataRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"TimeResolution", ",", 
                    RowBox[{"RecordLength", "*", "TimeResolution"}]}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StartField", "/", "1000"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"StartField", "+", "RecordLengthField"}], ")"}], 
                    "/", "1000"}]}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<Magnetic Field / kG\>\""}], 
                    "}"}]}], ",", 
                    RowBox[{"AspectRatio", "\[Rule]", 
                    RowBox[{"1", "/", "1"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"350", ",", "350"}], "}"}]}], ",", 
                    RowBox[{"LabelStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"12", ",", " ", "Bold"}], "]"}]}], ",", 
                    RowBox[{"Mesh", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "TimeIn", "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Field", "/", "1000"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"MeshStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Directive", "[", 
                    RowBox[{"Red", ",", "Dashed"}], "]"}], ",", " ", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"Red", ",", "Dashed"}], "]"}]}], "}"}]}]}], "]"}],
                     ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"LocalizeVariables", "\[Rule]", "False"}], ",", 
                    RowBox[{"Paneled", "\[Rule]", "False"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"GraphDensityPlotManipCorrField", "=", 
                    RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"ListDensityPlot", "[", 
                    RowBox[{"dataResampleCorrField", ",", 
                    RowBox[{"MaxPlotPoints", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"plot2dSliceRes", ",", "plot2dSliceRes"}], 
                    "}"}]}], ",", " ", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
                    RowBox[{"ColorFunction", "\[Rule]", "\"\<Rainbow\>\""}], 
                    ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{
                    RowBox[{"BarLegend", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<Rainbow\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}], ",", 
                    RowBox[{"LegendMarkerSize", "\[Rule]", "180"}], ",", 
                    RowBox[{"LegendMargins", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"32", ",", "0"}], "}"}]}], "}"}]}]}], "]"}], ",", 
                    "Right"}], "]"}]}], ",", 
                    RowBox[{"DataRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"RecordLength", "*", "TimeResolution"}]}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StartField", "/", "1000"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"StartField", "+", "RecordLengthField"}], ")"}], 
                    "/", "1000"}]}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<Magnetic Field / kG\>\""}], 
                    "}"}]}], ",", 
                    RowBox[{"AspectRatio", "\[Rule]", 
                    RowBox[{"1", "/", "1"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"350", ",", "350"}], "}"}]}], ",", 
                    RowBox[{"LabelStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"12", ",", " ", "Bold"}], "]"}]}], ",", 
                    RowBox[{"Mesh", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "TimeIn", "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Field", "/", "1000"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"MeshStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Directive", "[", 
                    RowBox[{"Red", ",", "Dashed"}], "]"}], ",", " ", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"Red", ",", "Dashed"}], "]"}]}], "}"}]}]}], "]"}],
                     ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"LocalizeVariables", "\[Rule]", "False"}], ",", 
                    RowBox[{"Paneled", "\[Rule]", "False"}]}], "]"}]}], ";"}],
                     "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker", "\[Equal]", "0"}], ",", 
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Convert data button has not been pressed\>\"", ",", 
                    "18", ",", "Black"}], "]"}], "]"}], ",", 
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<An incorrect file has been opened\>\"", ",", "18", 
                    ",", "Black"}], "]"}], "]"}]}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Abort", "[", "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<An incorrect file has been opened\>\"", ",", "18", 
                    ",", "Black"}], "]"}], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}]}], "}"}]}], "]"}], ";"}], 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", ",", 
                    RowBox[{"FrameMargins", "\[Rule]", "10"}], ",", 
                    RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}]}], 
                    "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Clear Figures\>\"", ",", "Bold"}], "]"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\:0421licker3", "=", "0"}], ";"}], "}"}], ",", 
                    RowBox[{"FrameMargins", "\[Rule]", "10"}], ",", 
                    RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}]}], 
                    "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Choose File Name to Save:\>\"", ",", 
                    RowBox[{"FileNameSetter", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "f3", "]"}], ",", "\"\<Save\>\"", 
                    ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"100", ",", "40"}], "}"}]}]}], "]"}]}], "}"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Please, Use Experimental_Data Folder\>\"", ",", 
                    "SpanFromLeft"}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Save Data\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "f3", "]"}], "\[Equal]", "String"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"Head", "[", "fileData", "]"}], "\[Equal]", 
                    "List"}], ",", 
                    RowBox[{
                    RowBox[{"Head", "[", "dataKinetics", "]"}], "\[Equal]", 
                    "List"}], ",", 
                    RowBox[{
                    RowBox[{"StringStartsQ", "[", 
                    RowBox[{
                    RowBox[{"fileData", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", "\"\<%\>\""}],
                     "]"}], "\[Equal]", "True"}]}], "]"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"s", "\[Equal]", "1"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{
                    "f3", ",", "\"\<_kinetic\>\"", ",", "\"\<.csv\>\""}], 
                    "]"}], ",", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{"\"\<Field / G: \>\"", ",", 
                    RowBox[{"ToString", "[", "Field", "]"}]}], "]"}], ",", 
                    "\"\<\>\""}], "}"}], ",", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{"dataKinetics", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "}"}], "]"}]}], "]"}], ",", 
                    "\"\<CSV\>\""}], "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{
                    "f3", ",", "\"\<_spectrum\>\"", ",", "\"\<.csv\>\""}], 
                    "]"}], ",", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{"\"\<Time / mcs: \>\"", ",", 
                    RowBox[{"ToString", "[", "TimeIn", "]"}]}], "]"}], ",", 
                    "\"\<\>\""}], "}"}], ",", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"datafield", ",", 
                    RowBox[{"dataKinetics", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"TimeIn", "-", "TimeResolution"}], ")"}], "/", 
                    "TimeResolution"}], " ", "]"}], "+", "1"}]}], "]"}], 
                    "]"}]}], "}"}], "]"}]}], "]"}], ",", "\"\<CSV\>\""}], 
                    "]"}], ";"}], "\[IndentingNewLine]", "}"}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"s", "\[Equal]", "2"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{"f3", ",", "\"\<_kinetic_substrated_field\>\"", 
                    ",", "\"\<.csv\>\""}], "]"}], ",", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{"\"\<Field / G: \>\"", ",", 
                    RowBox[{"ToString", "[", "Field", "]"}]}], "]"}], ",", 
                    "\"\<\>\""}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{"\"\<Substracted Field / G: \>\"", ",", 
                    RowBox[{"ToString", "[", "SubstracteField", "]"}]}], 
                    "]"}], ",", "\"\<\>\""}], "}"}], ",", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{"dataKineticsCorr", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "}"}], "]"}]}], "]"}], ",", 
                    "\"\<CSV\>\""}], "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{
                    "f3", ",", "\"\<_spectrum_substrated_field\>\"", ",", 
                    "\"\<.csv\>\""}], "]"}], ",", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{"\"\<Time / mcs: \>\"", ",", 
                    RowBox[{"ToString", "[", "TimeIn", "]"}]}], "]"}], ",", 
                    "\"\<\>\""}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{"\"\<Substracted Field / G: \>\"", ",", 
                    RowBox[{"ToString", "[", "SubstracteField", "]"}]}], 
                    "]"}], ",", "\"\<\>\""}], "}"}], ",", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"datafield", ",", 
                    RowBox[{"dataKineticsCorr", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"TimeIn", "-", "TimeResolution"}], ")"}], "/", 
                    "TimeResolution"}], " ", "]"}], "+", "1"}]}], "]"}], 
                    "]"}]}], "}"}], "]"}]}], "]"}], ",", "\"\<CSV\>\""}], 
                    "]"}], ";"}], "\[IndentingNewLine]", "}"}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"s", "\[Equal]", "3"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{
                    "f3", ",", "\"\<_kinetic_substrated_time\>\"", ",", 
                    "\"\<.csv\>\""}], "]"}], ",", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{"\"\<Field / G: \>\"", ",", 
                    RowBox[{"ToString", "[", "Field", "]"}]}], "]"}], ",", 
                    "\"\<\>\""}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{"\"\<Substracted Time / mcs: \>\"", ",", 
                    RowBox[{"ToString", "[", "SubstracteTime", "]"}]}], "]"}],
                     ",", "\"\<\>\""}], "}"}], ",", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{"dataKineticsCorrField", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "}"}], "]"}]}], "]"}], ",", 
                    "\"\<CSV\>\""}], "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{
                    "f3", ",", "\"\<_spectrum_substrated_time\>\"", ",", 
                    "\"\<.csv\>\""}], "]"}], ",", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{"\"\<Time / mcs: \>\"", ",", 
                    RowBox[{"ToString", "[", "TimeIn", "]"}]}], "]"}], ",", 
                    "\"\<\>\""}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{"\"\<Substracted Time / mcs: \>\"", ",", 
                    RowBox[{"ToString", "[", "SubstracteTime", "]"}]}], "]"}],
                     ",", "\"\<\>\""}], "}"}], ",", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"datafield", ",", 
                    RowBox[{"dataKineticsCorrField", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"TimeIn", "-", "TimeResolution"}], ")"}], "/", 
                    "TimeResolution"}], " ", "]"}], "+", "1"}]}], "]"}], 
                    "]"}]}], "}"}], "]"}]}], "]"}], ",", "\"\<CSV\>\""}], 
                    "]"}], ";"}], "\[IndentingNewLine]", "}"}]}], 
                    "\[IndentingNewLine]", "]"}], ";"}], 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Path to file has not been chosen\>\"", ",", "18", 
                    ",", "Black"}], "]"}], "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"Abort", "[", "]"}]}], "}"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Path to file has not been chosen\>\"", ",", "18", 
                    ",", "Black"}], "]"}], "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"Abort", "[", "]"}]}], "}"}], "}"}]}], "]"}], 
                    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "}"}], ",", 
                    RowBox[{"FrameMargins", "\[Rule]", "10"}], ",", 
                    RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}]}], 
                    "]"}]}], "\[IndentingNewLine]", "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Array Export\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "f3", "]"}], "\[Equal]", "String"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"Head", "[", "fileData", "]"}], "\[Equal]", 
                    "List"}], ",", 
                    RowBox[{
                    RowBox[{"Head", "[", "dataKinetics", "]"}], "\[Equal]", 
                    "List"}], ",", 
                    RowBox[{
                    RowBox[{"StringStartsQ", "[", 
                    RowBox[{
                    RowBox[{"fileData", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", "\"\<%\>\""}],
                     "]"}], "\[Equal]", "True"}]}], "]"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"s", "\[Equal]", "1"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{
                    "f3", ",", "\"\<_table\>\"", ",", "\"\<.csv\>\""}], "]"}],
                     ",", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"Partition", "[", 
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{"List", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", "0", "}"}], ",", "datafield"}], "]"}], ",", 
                    RowBox[{"Prepend", "[", 
                    RowBox[{"dataKinetics", ",", "dataTime"}], "]"}]}], 
                    "}"}]}], "]"}], ",", "2"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"Prepend", "[", 
                    RowBox[{"dataKinetics", ",", "dataTime"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "+", "1"}]}], 
                    "]"}], "]"}], ",", "\"\<CSV\>\""}], "]"}], ";"}], 
                    "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
                    "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"s", "\[Equal]", "2"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{
                    "f3", ",", "\"\<_table\>\"", ",", "\"\<.csv\>\""}], "]"}],
                     ",", 
                    RowBox[{"Transpose", "@", 
                    RowBox[{"Partition", "[", 
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{"List", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", "0", "}"}], ",", "datafield"}], "]"}], ",", 
                    RowBox[{"Prepend", "[", 
                    RowBox[{"dataKinetics", ",", "dataTime"}], "]"}]}], 
                    "}"}]}], "]"}], ",", "2"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"Prepend", "[", 
                    RowBox[{"dataKineticsCorr", ",", "dataTime"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "+", "1"}]}], 
                    "]"}]}], ",", "\"\<CSV\>\""}], "]"}], ";"}], 
                    "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
                    "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"s", "\[Equal]", "3"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{
                    "f3", ",", "\"\<_table\>\"", ",", "\"\<.csv\>\""}], "]"}],
                     ",", 
                    RowBox[{"Transpose", "@", 
                    RowBox[{"Partition", "[", 
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{"List", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", "0", "}"}], ",", "datafield"}], "]"}], ",", 
                    RowBox[{"Prepend", "[", 
                    RowBox[{"dataKinetics", ",", "dataTime"}], "]"}]}], 
                    "}"}]}], "]"}], ",", "2"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"Prepend", "[", 
                    RowBox[{"dataKineticsCorrField", ",", "dataTime"}], "]"}],
                     "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "+", "1"}]}], 
                    "]"}]}], ",", "\"\<CSV\>\""}], "]"}], ";"}], 
                    "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
                    "]"}], ";"}], "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Path to file has not been chosen\>\"", ",", "18", 
                    ",", "Black"}], "]"}], "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"Abort", "[", "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Path to file has not been chosen\>\"", ",", "18", 
                    ",", "Black"}], "]"}], "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"Abort", "[", "]"}]}], "}"}]}], "]"}], ";"}], 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"FrameMargins", "\[Rule]", "10"}], ",", 
                    RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}]}], 
                    "]"}]}], "\[IndentingNewLine]", "}"}]}], 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", "}"}], 
                    "\[IndentingNewLine]", "]"}], ",", 
                   RowBox[{"FrameMargins", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"20", ",", "20"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "5"}], "}"}]}], "}"}]}], ",", 
                   RowBox[{"Background", "\[Rule]", 
                    RowBox[{"Lighter", "[", 
                    RowBox[{"Gray", ",", " ", "0.97"}], "]"}]}]}], 
                  "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
                 "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "}"}], 
               "]"}], ",", 
              RowBox[{"FrameMargins", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"5", ",", "5"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"5", ",", "5"}], "}"}]}], "}"}]}], ",", 
              RowBox[{"Background", "\[Rule]", 
               RowBox[{"Lighter", "[", 
                RowBox[{"Gray", ",", " ", "0.97"}], "]"}]}]}], "]"}], ",", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            StyleBox[
             RowBox[{"(*", 
              RowBox[{"Memorize", " ", "Panel"}], "*)"}], "Title"], 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"ndel", "=", "1"}], ";", "\[IndentingNewLine]", 
             RowBox[{"MemKin", "=", 
              RowBox[{"{", "0", "}"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"MemKinNorm", "=", 
              RowBox[{"{", "0", "}"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"MemKinNormSh", "=", 
              RowBox[{"{", "0", "}"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"MemSpec", "=", 
              RowBox[{"{", "0", "}"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"MemSpecNorm", "=", 
              RowBox[{"{", "0", "}"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"MemSpecNormSh", "=", 
              RowBox[{"{", "0", "}"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"fieldLegend", "=", 
              RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"timeLegend", "=", 
              RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", 
             RowBox[{"Panel", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Grid", "[", 
                RowBox[{"{", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{"Grid", "[", 
                   RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<Normalization:\>\"", ",", " ", 
                    RowBox[{"Checkbox", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "no", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Positive Kinetics Are Inverted In Normalization Mode\
\>\"", ",", " ", "SpanFromLeft"}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Off-Resonance:\>\"", ",", " ", 
                    RowBox[{"Checkbox", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "or", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<If Off-Resonance Is ON, It Memorizes Off-Resonance \
Signal\>\"", ",", " ", "SpanFromLeft"}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Type:\>\"", ",", " ", 
                    RowBox[{"RadioButtonBar", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "t", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"1", "\[Rule]", "\"\<Overlapping\>\""}], ",", 
                    RowBox[{"2", "\[Rule]", "\"\<Shifting\>\""}]}], "}"}]}], 
                    "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Plot Explorer Function:\>\"", ",", " ", 
                    RowBox[{"Checkbox", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "z5", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{",", "\[IndentingNewLine]", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Memorize Spectrum\>\"", ",", "Bold"}], "]"}],
                     ",", 
                    RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker2", "\[Equal]", "0"}], ",", " ", 
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Please, open file and click Convert Data button\>\"",
                     ",", "18", ",", "Black"}], "]"}], "]"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"timeLegend", "=", " ", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Text", "@", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "TimeIn", "]"}], ",", 
                    "\"\< \[Mu]s\>\"", ",", "\"\< (F\>\"", ",", 
                    RowBox[{"ToString", "[", "counter", "]"}], ",", " ", 
                    "\"\<)\>\""}], "]"}], ",", "Bold"}], "]"}]}], "}"}], ",", 
                    "timeLegend"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"s", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MemKin", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"datafield", ",", 
                    RowBox[{"dataKinetics", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"TimeIn", "-", "TimeResolution"}], ")"}], "/", 
                    "TimeResolution"}], " ", "]"}], "+", "1"}]}], "]"}], 
                    "]"}]}], "}"}], "]"}], "}"}], ",", "MemKin"}], "]"}]}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"s", "\[Equal]", "2"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MemKin", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"datafield", ",", 
                    RowBox[{"dataKineticsCorr", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"TimeIn", "-", "TimeResolution"}], ")"}], "/", 
                    "TimeResolution"}], " ", "]"}], "+", "1"}]}], "]"}], 
                    "]"}]}], "}"}], "]"}], "}"}], ",", "MemKin"}], "]"}]}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"s", "\[Equal]", "3"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"MemKin", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"datafield", ",", 
                    RowBox[{"dataKineticsCorrField", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"TimeIn", "-", "TimeResolution"}], ")"}], "/", 
                    "TimeResolution"}], " ", "]"}], "+", "1"}]}], "]"}], 
                    "]"}]}], "}"}], "]"}], "}"}], ",", "MemKin"}], "]"}]}], 
                    ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"s", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MemKinNorm", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"datafield", ",", 
                    RowBox[{
                    RowBox[{"dataKineticsCorr", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"TimeIn", "-", "TimeResolution"}], ")"}], "/", 
                    "TimeResolution"}], " ", "]"}], "+", "1"}]}], "]"}], 
                    "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "@", 
                    RowBox[{"dataKineticsCorr", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"TimeIn", "-", "TimeResolution"}], ")"}], "/", 
                    "TimeResolution"}], " ", "]"}], "+", "1"}]}], "]"}], 
                    "]"}]}], "]"}], ")"}]}]}], "}"}], "]"}], "}"}], ",", 
                    "MemKinNorm"}], "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"s", "\[Equal]", "2"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MemKinNorm", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"datafield", ",", 
                    RowBox[{
                    RowBox[{"dataKineticsCorr", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"TimeIn", "-", "TimeResolution"}], ")"}], "/", 
                    "TimeResolution"}], " ", "]"}], "+", "1"}]}], "]"}], 
                    "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "@", 
                    RowBox[{"dataKineticsCorr", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"TimeIn", "-", "TimeResolution"}], ")"}], "/", 
                    "TimeResolution"}], " ", "]"}], "+", "1"}]}], "]"}], 
                    "]"}]}], "]"}], ")"}]}]}], "}"}], "]"}], "}"}], ",", 
                    "MemKinNorm"}], "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"s", "\[Equal]", "3"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"MemKinNorm", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"datafield", ",", 
                    RowBox[{
                    RowBox[{"dataKineticsCorrField", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"TimeIn", "-", "TimeResolution"}], ")"}], "/", 
                    "TimeResolution"}], " ", "]"}], "+", "1"}]}], "]"}], 
                    "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "@", 
                    RowBox[{"dataKineticsCorrField", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"TimeIn", "-", "TimeResolution"}], ")"}], "/", 
                    "TimeResolution"}], " ", "]"}], "+", "1"}]}], "]"}], 
                    "]"}]}], "]"}], ")"}]}]}], "}"}], "]"}], "}"}], ",", 
                    "MemKinNorm"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", 
                    "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"s", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MemKinNormSh", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"datafield", ",", 
                    RowBox[{
                    RowBox[{"1", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", "MemKinNormSh", "]"}], "-", "1"}], 
                    ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"dataKineticsCorr", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"TimeIn", "-", "TimeResolution"}], ")"}], "/", 
                    "TimeResolution"}], " ", "]"}], "+", "1"}]}], "]"}], 
                    "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "@", 
                    RowBox[{"dataKineticsCorr", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"TimeIn", "-", "TimeResolution"}], ")"}], "/", 
                    "TimeResolution"}], " ", "]"}], "+", "1"}]}], "]"}], 
                    "]"}]}], "]"}], ")"}]}]}]}], "}"}], "]"}], "}"}], ",", 
                    "MemKinNormSh"}], "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"s", "\[Equal]", "2"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MemKinNormSh", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"datafield", ",", 
                    RowBox[{
                    RowBox[{"1", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", "MemKinNormSh", "]"}], "-", "1"}], 
                    ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"dataKineticsCorr", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"TimeIn", "-", "TimeResolution"}], ")"}], "/", 
                    "TimeResolution"}], " ", "]"}], "+", "1"}]}], "]"}], 
                    "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "@", 
                    RowBox[{"dataKineticsCorr", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"TimeIn", "-", "TimeResolution"}], ")"}], "/", 
                    "TimeResolution"}], " ", "]"}], "+", "1"}]}], "]"}], 
                    "]"}]}], "]"}], ")"}]}]}]}], "}"}], "]"}], "}"}], ",", 
                    "MemKinNormSh"}], "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"s", "\[Equal]", "3"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"MemKinNormSh", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"datafield", ",", 
                    RowBox[{
                    RowBox[{"1", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", "MemKinNormSh", "]"}], "-", "1"}], 
                    ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"dataKineticsCorrField", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"TimeIn", "-", "TimeResolution"}], ")"}], "/", 
                    "TimeResolution"}], " ", "]"}], "+", "1"}]}], "]"}], 
                    "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "@", 
                    RowBox[{"dataKineticsCorrField", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"TimeIn", "-", "TimeResolution"}], ")"}], "/", 
                    "TimeResolution"}], " ", "]"}], "+", "1"}]}], "]"}], 
                    "]"}]}], "]"}], ")"}]}]}]}], "}"}], "]"}], "}"}], ",", 
                    "MemKinNormSh"}], "]"}]}], ";"}]}], "\[IndentingNewLine]",
                     "]"}], ";"}], "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "}"}]}], "]"}], ";"}], 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"FrameMargins", "\[Rule]", "10"}], ",", 
                    RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}]}], 
                    "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{",", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Memorize Kinetics\>\"", ",", "Bold"}], "]"}],
                     ",", 
                    RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker2", "\[Equal]", "0"}], ",", " ", 
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Please, open file and click Convert Data button\>\"",
                     ",", "18", ",", "Black"}], "]"}], "]"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"FitTime", "=", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{"TimeIn", "/", "TimeResolution"}], "]"}], "+", 
                    "1"}]}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"fieldLegend", "=", " ", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Text", "@", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "Field", "]"}], ",", 
                    "\"\< G\>\"", ",", "\"\< (F\>\"", ",", 
                    RowBox[{"ToString", "[", "counter", "]"}], ",", " ", 
                    "\"\<)\>\""}], "]"}], ",", "Bold"}], "]"}]}], "}"}], ",", 
                    "fieldLegend"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"or", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"s", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MemSpec", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{"dataKinetics", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "}"}], "]"}], "}"}], ",", "MemSpec"}], 
                    "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"s", "\[Equal]", "2"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MemSpec", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{"dataKineticsCorr", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "}"}], "]"}], "}"}], ",", "MemSpec"}], 
                    "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"s", "\[Equal]", "3"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MemSpec", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{"dataKineticsCorrField", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "}"}], "]"}], "}"}], ",", "MemSpec"}], 
                    "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"or", "\[Equal]", "2"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"s", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MemSpec", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileDataOffRes", ",", "1"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "}"}], "]"}], 
                    "}"}], ",", "MemSpec"}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"s", "\[Equal]", "2"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MemSpec", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileDataOffRes", ",", "1"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "}"}], "]"}], 
                    "}"}], ",", "MemSpec"}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"s", "\[Equal]", "3"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MemSpec", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileDataOffRes", ",", "1"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "}"}], "]"}], 
                    "}"}], ",", "MemSpec"}], "]"}]}]}], "\[IndentingNewLine]",
                     "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"or", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"s", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"dataKinetics", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", 
                    "FitTime"}], "]"}], "]"}], ">", "0"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MemSpecNorm", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{
                    RowBox[{"dataKinetics", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"-", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "@", 
                    RowBox[{"dataKinetics", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "]"}]}], ")"}]}]}], "}"}], "]"}], "}"}], 
                    ",", "MemSpecNorm"}], "]"}]}], ",", 
                    RowBox[{"MemSpecNorm", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{
                    RowBox[{"dataKinetics", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "@", 
                    RowBox[{"dataKinetics", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "]"}], ")"}]}]}], "}"}], "]"}], "}"}], 
                    ",", "MemSpecNorm"}], "]"}]}]}], "\[IndentingNewLine]", 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"s", "\[Equal]", "2"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"dataKineticsCorr", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", 
                    "FitTime"}], "]"}], "]"}], ">", "0"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MemSpecNorm", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{
                    RowBox[{"dataKineticsCorr", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"-", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "@", 
                    RowBox[{"dataKineticsCorr", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "]"}]}], ")"}]}]}], "}"}], "]"}], "}"}], 
                    ",", "MemSpecNorm"}], "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"MemSpecNorm", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{
                    RowBox[{"dataKineticsCorr", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "@", 
                    RowBox[{"dataKineticsCorr", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "]"}], ")"}]}]}], "}"}], "]"}], "}"}], 
                    ",", "MemSpecNorm"}], "]"}]}]}], "\[IndentingNewLine]", 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"s", "\[Equal]", "3"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"dataKineticsCorrField", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", 
                    "FitTime"}], "]"}], "]"}], ">", "0"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MemSpecNorm", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{
                    RowBox[{"dataKineticsCorrField", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"-", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "@", 
                    RowBox[{"dataKineticsCorrField", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "]"}]}], ")"}]}]}], "}"}], "]"}], "}"}], 
                    ",", "MemSpecNorm"}], "]"}]}], ",", 
                    RowBox[{"MemSpecNorm", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{
                    RowBox[{"dataKineticsCorrField", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "@", 
                    RowBox[{"dataKineticsCorrField", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "]"}], ")"}]}]}], "}"}], "]"}], "}"}], 
                    ",", "MemSpecNorm"}], "]"}]}]}], "\[IndentingNewLine]", 
                    "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"or", "\[Equal]", "2"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"s", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MemSpecNorm", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileDataOffRes", ",", "1"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileDataOffRes", ",", "1"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], "]"}], 
                    ")"}]}]}], "}"}], "]"}], "}"}], ",", "MemSpecNorm"}], 
                    "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"s", "\[Equal]", "2"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MemSpecNorm", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileDataOffRes", ",", "1"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileDataOffRes", ",", "1"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], "]"}], 
                    ")"}]}]}], "}"}], "]"}], "}"}], ",", "MemSpecNorm"}], 
                    "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"s", "\[Equal]", "3"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"MemSpecNorm", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileDataOffRes", ",", "1"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileDataOffRes", ",", "1"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], "]"}], 
                    ")"}]}]}], "}"}], "]"}], "}"}], ",", "MemSpecNorm"}], 
                    "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"or", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"s", "\[Equal]", "1"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"dataKinetics", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", 
                    "FitTime"}], "]"}], "]"}], ">", "0"}], ",", 
                    RowBox[{"MemSpecNormSh", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{
                    RowBox[{"1", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", "MemSpecNormSh", "]"}], "-", "1"}],
                     ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"dataKinetics", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"-", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "@", 
                    RowBox[{"dataKinetics", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "]"}]}], ")"}]}]}]}], "}"}], "]"}], 
                    "}"}], ",", "MemSpecNormSh"}], "]"}]}], ",", 
                    RowBox[{"MemSpecNormSh", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{
                    RowBox[{"1", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", "MemSpecNormSh", "]"}], "-", "1"}],
                     ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"dataKinetics", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "@", 
                    RowBox[{"dataKinetics", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "]"}], ")"}]}]}]}], "}"}], "]"}], "}"}], 
                    ",", "MemSpecNormSh"}], "]"}]}]}], "\[IndentingNewLine]", 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"s", "\[Equal]", "2"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"dataKineticsCorr", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", 
                    "FitTime"}], "]"}], "]"}], ">", "0"}], ",", 
                    RowBox[{"MemSpecNormSh", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{
                    RowBox[{"1", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", "MemSpecNormSh", "]"}], "-", "1"}],
                     ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"dataKineticsCorr", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"-", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "@", 
                    RowBox[{"dataKineticsCorr", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "]"}]}], ")"}]}]}]}], "}"}], "]"}], 
                    "}"}], ",", "MemSpecNormSh"}], "]"}]}], ",", 
                    RowBox[{"MemSpecNormSh", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{
                    RowBox[{"1", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", "MemSpecNormSh", "]"}], "-", "1"}],
                     ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"dataKineticsCorr", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "@", 
                    RowBox[{"dataKineticsCorr", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "]"}], ")"}]}]}]}], "}"}], "]"}], "}"}], 
                    ",", "MemSpecNormSh"}], "]"}]}]}], "\[IndentingNewLine]", 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"s", "\[Equal]", "3"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"dataKineticsCorrField", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", 
                    "FitTime"}], "]"}], "]"}], ">", "0"}], ",", 
                    RowBox[{"MemSpecNormSh", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{
                    RowBox[{"1", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", "MemSpecNormSh", "]"}], "-", "1"}],
                     ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"dataKineticsCorrField", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"-", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "@", 
                    RowBox[{"dataKineticsCorrField", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "]"}]}], ")"}]}]}]}], "}"}], "]"}], 
                    "}"}], ",", "MemSpecNormSh"}], "]"}]}], ",", 
                    RowBox[{"MemSpecNormSh", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{
                    RowBox[{"1", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", "MemSpecNormSh", "]"}], "-", "1"}],
                     ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"dataKineticsCorrField", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "@", 
                    RowBox[{"dataKineticsCorrField", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Field", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "]"}], ")"}]}]}]}], "}"}], "]"}], "}"}], 
                    ",", "MemSpecNormSh"}], "]"}]}]}], "\[IndentingNewLine]", 
                    "]"}]}], "\[IndentingNewLine]", "]"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"or", "\[Equal]", "2"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"s", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MemSpecNormSh", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{
                    RowBox[{"1", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", "MemSpecNormSh", "]"}], "-", "1"}],
                     ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileDataOffRes", ",", "1"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileDataOffRes", ",", "1"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], "]"}], 
                    ")"}]}]}]}], "}"}], "]"}], "}"}], ",", "MemSpecNormSh"}], 
                    "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"s", "\[Equal]", "2"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MemSpecNormSh", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{
                    RowBox[{"1", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", "MemSpecNormSh", "]"}], "-", "1"}],
                     ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileDataOffRes", ",", "1"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileDataOffRes", ",", "1"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], "]"}], 
                    ")"}]}]}]}], "}"}], "]"}], "}"}], ",", "MemSpecNormSh"}], 
                    "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"s", "\[Equal]", "3"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"MemSpecNormSh", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{
                    RowBox[{"1", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", "MemSpecNormSh", "]"}], "-", "1"}],
                     ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileDataOffRes", ",", "1"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"fileDataOffRes", ",", "1"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], "]"}], 
                    ")"}]}]}]}], "}"}], "]"}], "}"}], ",", "MemSpecNormSh"}], 
                    "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], 
                    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"FrameMargins", "\[Rule]", "10"}], ",", 
                    RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}]}], 
                    "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Number to Delete (Counts From Left):\>\"", ",", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "ndel", "]"}], ",", "Number", ",", 
                    RowBox[{"FieldSize", "\[Rule]", "13"}]}], "]"}]}], "}"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{",", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Delete Arbitary Spectrum\>\"", ",", "Bold"}],
                     "]"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{
                    RowBox[{"Check", " ", "length"}], " ", "\[GreaterEqual]", 
                    RowBox[{"2", " ", "!"}]}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemKin", "]"}], "\[GreaterEqual]",
                     "2"}], ",", 
                    RowBox[{
                    RowBox[{"Round", "[", "ndel", "]"}], "<", " ", 
                    RowBox[{"Length", "[", "MemKin", "]"}]}]}], "]"}], ",", 
                    RowBox[{"MemKin", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemKin", ",", 
                    RowBox[{"{", 
                    RowBox[{"Round", "[", "ndel", "]"}], "}"}]}], "]"}]}]}], 
                    "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemKinNorm", "]"}], 
                    "\[GreaterEqual]", "2"}], ",", 
                    RowBox[{
                    RowBox[{"Round", "[", "ndel", "]"}], "<", 
                    RowBox[{"Length", "[", "MemKinNorm", "]"}]}]}], "]"}], 
                    ",", 
                    RowBox[{"MemKinNorm", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemKinNorm", ",", 
                    RowBox[{"{", 
                    RowBox[{"Round", "[", "ndel", "]"}], "}"}]}], "]"}]}]}], 
                    "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemKinNormSh", "]"}], 
                    "\[GreaterEqual]", "2"}], ",", 
                    RowBox[{
                    RowBox[{"Round", "[", "ndel", "]"}], "<", 
                    RowBox[{"Length", "[", "MemKinNormSh", "]"}]}]}], "]"}], 
                    ",", 
                    RowBox[{"MemKinNormSh", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemKinNormSh", ",", 
                    RowBox[{"{", 
                    RowBox[{"Round", "[", "ndel", "]"}], "}"}]}], "]"}]}]}], 
                    "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "timeLegend", "]"}], 
                    "\[GreaterEqual]", "1"}], ",", 
                    RowBox[{
                    RowBox[{"Round", "[", "ndel", "]"}], "<", 
                    RowBox[{"Length", "[", "timeLegend", "]"}]}]}], "]"}], 
                    ",", 
                    RowBox[{"timeLegend", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"timeLegend", ",", 
                    RowBox[{"{", 
                    RowBox[{"Round", "[", "ndel", "]"}], "}"}]}], "]"}]}]}], 
                    "]"}], ";"}], "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"FrameMargins", "\[Rule]", "10"}], ",", 
                    RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}]}], 
                    "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{",", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Delete Arbitary Kinetics\>\"", ",", "Bold"}],
                     "]"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{
                    RowBox[{"Check", " ", "length"}], " ", "\[GreaterEqual]", 
                    RowBox[{"2", " ", "!"}]}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemSpec", "]"}], 
                    "\[GreaterEqual]", "2"}], ",", 
                    RowBox[{
                    RowBox[{"Round", "[", "ndel", "]"}], "<", 
                    RowBox[{"Length", "[", "MemSpec", "]"}]}]}], "]"}], ",", 
                    RowBox[{"MemSpec", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemSpec", ",", 
                    RowBox[{"{", 
                    RowBox[{"Round", "[", "ndel", "]"}], "}"}]}], "]"}]}]}], 
                    "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemSpecNorm", "]"}], 
                    "\[GreaterEqual]", "2"}], ",", 
                    RowBox[{
                    RowBox[{"Round", "[", "ndel", "]"}], "<", 
                    RowBox[{"Length", "[", "MemSpecNorm", "]"}]}]}], "]"}], 
                    ",", 
                    RowBox[{"MemSpecNorm", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemSpecNorm", ",", 
                    RowBox[{"{", 
                    RowBox[{"Round", "[", "ndel", "]"}], "}"}]}], "]"}]}]}], 
                    "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemSpecNormSh", "]"}], 
                    "\[GreaterEqual]", "2"}], ",", 
                    RowBox[{
                    RowBox[{"Round", "[", "ndel", "]"}], "<", 
                    RowBox[{"Length", "[", "MemSpecNormSh", "]"}]}]}], "]"}], 
                    ",", 
                    RowBox[{"MemSpecNormSh", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemSpecNormSh", ",", 
                    RowBox[{"{", 
                    RowBox[{"Round", "[", "ndel", "]"}], "}"}]}], "]"}]}]}], 
                    "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "fieldLegend", "]"}], 
                    "\[GreaterEqual]", "1"}], ",", 
                    RowBox[{
                    RowBox[{"Round", "[", "ndel", "]"}], "<", 
                    RowBox[{"Length", "[", "fieldLegend", "]"}]}]}], "]"}], 
                    ",", 
                    RowBox[{"fieldLegend", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"fieldLegend", ",", 
                    RowBox[{"{", 
                    RowBox[{"Round", "[", "ndel", "]"}], "}"}]}], "]"}]}]}], 
                    "]"}], ";"}], "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"FrameMargins", "\[Rule]", "10"}], ",", 
                    RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}]}], 
                    "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{",", 
                    RowBox[{"Button", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<Delete All\>\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"ClearAll", "[", "MemKin", "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MemKin", "=", 
                    RowBox[{"{", "0", "}"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"ClearAll", "[", "MemKinNorm", "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MemKinNorm", "=", 
                    RowBox[{"{", "0", "}"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"ClearAll", "[", "MemKinNormSh", "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MemKinNormSh", "=", 
                    RowBox[{"{", "0", "}"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"ClearAll", "[", "MemSpec", "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MemSpec", "=", 
                    RowBox[{"{", "0", "}"}]}], ";", " ", 
                    "\[IndentingNewLine]", 
                    RowBox[{"ClearAll", "[", "MemSpecNorm", "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MemSpecNorm", "=", 
                    RowBox[{"{", "0", "}"}]}], ";", " ", 
                    "\[IndentingNewLine]", 
                    RowBox[{"ClearAll", "[", "MemSpecNormSh", "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MemSpecNormSh", "=", 
                    RowBox[{"{", "0", "}"}]}], ";"}], " ", 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"FrameMargins", "\[Rule]", "10"}], ",", 
                    RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}]}], 
                    "]"}]}], "}"}]}], "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"{", 
                    RowBox[{",", 
                    RowBox[{"Button", "[", 
                    RowBox[{"\"\<Divide by 2\>\"", ",", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"MemSpecNormSh", "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "2"}], "]"}], "]"}], "/", "2"}]}], 
                    "}"}], "]"}], "&"}], ",", "MemSpecNormSh"}], "]"}]}], 
                    ";"}], "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"FrameMargins", "\[Rule]", "10"}], ",", 
                    RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}]}], 
                    "]"}]}], "}"}], "*)"}], "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", "}"}], 
                   "]"}], "\[IndentingNewLine]", "\[IndentingNewLine]", "}"}],
                  "\[IndentingNewLine]", "}"}], "]"}], ",", 
               RowBox[{"FrameMargins", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"5", ",", "5"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"5", ",", "5"}], "}"}]}], "}"}]}], ",", 
               RowBox[{"Background", "\[Rule]", 
                RowBox[{"Lighter", "[", 
                 RowBox[{"Gray", ",", " ", "0.97"}], "]"}]}]}], 
              "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", "}"}], ",", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          StyleBox[
           RowBox[{"(*", 
            RowBox[{
            "The", " ", "Lowest", " ", "Row", " ", "for", " ", "Plotting"}], 
            "*)"}], "Title"], "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"(*", 
            RowBox[{"2", "D"}], "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Dynamic", "[", 
             RowBox[{"Which", "[", 
              RowBox[{
               RowBox[{"x", "\[Equal]", "1"}], ",", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"And", "[", 
                  RowBox[{
                   RowBox[{"\:0421licker2", "\[Equal]", "1"}], ",", 
                   RowBox[{"\:0421licker4", "\[Equal]", "1"}]}], "]"}], ",", 
                 "GraphDensityPlot", ",", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker2", "\[Equal]", "0"}], ",", 
                    RowBox[{"\:0421licker4", "\[Equal]", "0"}]}], "]"}], ",", 
                   "\"\<Press Convert Data and Density Plot Buttons\>\"", ",", 
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker2", "\[Equal]", "1"}], ",", 
                    RowBox[{"\:0421licker4", "\[Equal]", "0"}]}], "]"}], ",", 
                    "\"\<Press Density Plot Button\>\"", ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker2", "\[Equal]", "0"}], ",", 
                    RowBox[{"\:0421licker4", "\[Equal]", "1"}]}], "]"}], ",", 
                    "\"\<Press Convert Data Button\>\""}], "]"}]}], "]"}]}], 
                  "]"}]}], "]"}], ",", 
               RowBox[{"x", "\[Equal]", "2"}], ",", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"And", "[", 
                  RowBox[{
                   RowBox[{"\:0421licker2", "\[Equal]", "1"}], ",", 
                   RowBox[{"\:0421licker4", "\[Equal]", "1"}]}], "]"}], ",", 
                 RowBox[{"PlotExplorer", "@", "GraphDensityPlot"}], ",", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker2", "\[Equal]", "0"}], ",", 
                    RowBox[{"\:0421licker4", "\[Equal]", "0"}]}], "]"}], ",", 
                   "\"\<Press Convert Data and Density Plot Buttons\>\"", ",", 
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker2", "\[Equal]", "1"}], ",", 
                    RowBox[{"\:0421licker4", "\[Equal]", "0"}]}], "]"}], ",", 
                    "\"\<Press Density Plot Button\>\"", ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker2", "\[Equal]", "0"}], ",", 
                    RowBox[{"\:0421licker4", "\[Equal]", "1"}]}], "]"}], ",", 
                    "\"\<Press Convert Data Button\>\""}], "]"}]}], "]"}]}], 
                  "]"}]}], "]"}]}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"(*", "Manipulate", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"Dynamic", "\[IndentingNewLine]", "[", 
             RowBox[{"Which", "[", 
              RowBox[{
               RowBox[{"s", "\[Equal]", "1"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Grid", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker2", "\[Equal]", "1"}], ",", 
                    RowBox[{"\:0421licker3", "\[Equal]", "1"}]}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"z", "\[Equal]", "1"}], ",", 
                    RowBox[{"Or", "[", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"NumericQ", "[", "TimeIn", "]"}], "\[Equal]", 
                    "True"}], ",", 
                    RowBox[{"TimeIn", "\[NotEqual]", " ", "Null"}]}], "]"}]}],
                     "]"}], ",", "manip1", ",", "manip1PE"}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker3", "\[Equal]", "0"}], ",", 
                    "\"\<Press Cross-Section Plot\>\"", ",", 
                    "\"\<Press Convert Data Button\>\""}], "]"}]}], "]"}], 
                    "]"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker2", "\[Equal]", "1"}], ",", 
                    RowBox[{"\:0421licker3", "\[Equal]", "1"}]}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"z", "\[Equal]", "1"}], ",", "manip2", ",", 
                    "manip2PE"}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker3", "\[Equal]", "0"}], ",", 
                    "\"\<Press Cross-Section Plot\>\"", ",", 
                    "\"\<Press Convert Data Button\>\""}], "]"}]}], "]"}], 
                    "]"}], "}"}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"s", "\[Equal]", "2"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Grid", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker2", "\[Equal]", "1"}], ",", 
                    RowBox[{"\:0421licker3", "\[Equal]", "1"}]}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"z", "\[Equal]", "1"}], ",", 
                    RowBox[{"Or", "[", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"NumericQ", "[", "TimeIn", "]"}], "\[Equal]", 
                    "True"}], ",", 
                    RowBox[{"TimeIn", "\[NotEqual]", " ", "Null"}]}], "]"}]}],
                     "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker", "\[Equal]", " ", "0"}], ",", 
                    "\"\<!!! Please, Click Convert Data Button !!!\>\"", ",", 
                    "manip1Corr"}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker", "\[Equal]", " ", "0"}], ",", 
                    "\"\<!!! Please, Click Convert Data Button !!!\>\"", ",", 
                    "manip1PECorr"}], "]"}]}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker3", "\[Equal]", "0"}], ",", 
                    "\"\<Press Cross-Section Button\>\"", ",", 
                    "\"\<Press Convert Data Button\>\""}], "]"}]}], "]"}], 
                    "]"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker2", "\[Equal]", "1"}], ",", 
                    RowBox[{"\:0421licker3", "\[Equal]", "1"}]}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"z", "\[Equal]", "1"}], ",", 
                    RowBox[{"Or", "[", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"NumericQ", "[", "TimeIn", "]"}], "\[Equal]", 
                    "True"}], ",", 
                    RowBox[{"TimeIn", "\[NotEqual]", " ", "Null"}]}], "]"}]}],
                     "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker", "\[Equal]", " ", "0"}], ",", 
                    "\"\<!!! Please, Click Convert Data Button !!!\>\"", ",", 
                    "manip2Corr"}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker", "\[Equal]", " ", "0"}], ",", 
                    "\"\<!!! Please, Click Convert Data Button !!!\>\"", ",", 
                    "manip2PECorr"}], "]"}]}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker3", "\[Equal]", "0"}], ",", 
                    "\"\<Press Cross-Section Button\>\"", ",", 
                    "\"\<Press Convert Data Button\>\""}], "]"}]}], "]"}], 
                    "]"}], "}"}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"s", "\[Equal]", "3"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Grid", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker2", "\[Equal]", "1"}], ",", 
                    RowBox[{"\:0421licker3", "\[Equal]", "1"}]}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"z", "\[Equal]", "1"}], ",", 
                    RowBox[{"Or", "[", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"NumericQ", "[", "TimeIn", "]"}], "\[Equal]", 
                    "True"}], ",", 
                    RowBox[{"TimeIn", "\[NotEqual]", " ", "Null"}]}], "]"}]}],
                     "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker", "\[Equal]", " ", "0"}], ",", 
                    "\"\<!!! Please, Click Convert Data Button !!!\>\"", ",", 
                    "manip1CorrField"}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker", "\[Equal]", " ", "0"}], ",", 
                    "\"\<!!! Please, Click Convert Data Button !!!\>\"", ",", 
                    "manip1PECorrField"}], "]"}]}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker3", "\[Equal]", "0"}], ",", 
                    "\"\<Press Cross-Section Button\>\"", ",", 
                    "\"\<Press Convert Data Button\>\""}], "]"}]}], "]"}], 
                    "]"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker2", "\[Equal]", "1"}], ",", 
                    RowBox[{"\:0421licker3", "\[Equal]", "1"}]}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"z", "\[Equal]", "1"}], ",", 
                    RowBox[{"Or", "[", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"NumericQ", "[", "TimeIn", "]"}], "\[Equal]", 
                    "True"}], ",", 
                    RowBox[{"TimeIn", "\[NotEqual]", " ", "Null"}]}], "]"}]}],
                     "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker", "\[Equal]", " ", "0"}], ",", 
                    "\"\<!!! Please, Click Get Parameters Button !!!\>\"", 
                    ",", "manip2CorrField"}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker", "\[Equal]", " ", "0"}], ",", 
                    "\"\<!!! Please, Click Convert Data Button !!!\>\"", ",", 
                    "manip2PECorrField"}], "]"}]}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker3", "\[Equal]", "0"}], ",", 
                    "\"\<Press Cross-Section Button\>\"", ",", 
                    "\"\<Press Convert Data Button\>\""}], "]"}]}], "]"}], 
                    "]"}], "}"}]}], "}"}], "]"}]}], "\[IndentingNewLine]", 
              "]"}], "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]",
             "\[IndentingNewLine]", 
            RowBox[{"Dynamic", "\[IndentingNewLine]", "[", 
             RowBox[{"Which", "[", 
              RowBox[{
               RowBox[{"s", "\[Equal]", "1"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Grid", "[", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker2", "\[Equal]", "1"}], ",", 
                    RowBox[{"\:0421licker3", "\[Equal]", "1"}], ",", 
                    RowBox[{"d2", "\[Equal]", "2"}]}], "]"}], ",", 
                    "GraphDensityPlotManip", ",", 
                    "\"\<Choose 2D Graph Option\>\""}], "]"}], ",", 
                   "SpanFromLeft"}], "}"}], "}"}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"s", "\[Equal]", "2"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Grid", "[", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker2", "\[Equal]", "1"}], ",", 
                    RowBox[{"\:0421licker3", "\[Equal]", "1"}], ",", 
                    RowBox[{"d2", "\[Equal]", "2"}]}], "]"}], ",", 
                    "GraphDensityPlotManipCorr", ",", 
                    "\"\<Choose 2D Graph Option\>\""}], "]"}], ",", 
                   "SpanFromLeft"}], "}"}], "}"}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"s", "\[Equal]", "3"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Grid", "[", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"\:0421licker2", "\[Equal]", "1"}], ",", 
                    RowBox[{"\:0421licker3", "\[Equal]", "1"}], ",", 
                    RowBox[{"d2", "\[Equal]", "2"}]}], "]"}], ",", 
                    "GraphDensityPlotManipCorrField", ",", 
                    "\"\<Choose 2D Graph Option\>\""}], "]"}], ",", 
                   "SpanFromLeft"}], "}"}], "}"}], "]"}]}], 
              "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}], ",",
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"(*", "Memorize", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"Grid", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", "\[IndentingNewLine]", 
                RowBox[{
                "Dynamic", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"Which", "[", 
                  RowBox[{
                   RowBox[{"t", "\[Equal]", "1"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"no", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"z5", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemKin", "]"}], "\[GreaterEqual]",
                     "2"}], ",", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemKin", ",", 
                    RowBox[{"-", "1"}]}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Mangetic Field / G\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "250"}], "}"}]}], ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{"timeLegend", ",", "Above"}], "]"}]}]}], "]"}], 
                    ",", "\"\<Memorize Something\>\""}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemKin", "]"}], "\[GreaterEqual]",
                     "2"}], ",", 
                    RowBox[{"PlotExplorer", "@", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemKin", ",", 
                    RowBox[{"-", "1"}]}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Mangetic Field / G\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "340"}], "}"}]}], ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{"timeLegend", ",", "Above"}], "]"}]}]}], "]"}]}], 
                    ",", "\"\<Memorize Something\>\""}], "]"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"no", "\[Equal]", "2"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"z5", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemKinNorm", "]"}], 
                    "\[GreaterEqual]", "2"}], ",", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemKinNorm", ",", 
                    RowBox[{"-", "1"}]}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Mangetic Field / G\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "250"}], "}"}]}], ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{"timeLegend", ",", "Above"}], "]"}]}]}], "]"}], 
                    ",", "\"\<Memorize Something\>\""}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemKinNorm", "]"}], 
                    "\[GreaterEqual]", "2"}], ",", 
                    RowBox[{"PlotExplorer", "@", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemKinNorm", ",", 
                    RowBox[{"-", "1"}]}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Mangetic Field / G\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "340"}], "}"}]}], ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{"timeLegend", ",", "Above"}], "]"}]}]}], "]"}]}], 
                    ",", "\"\<Memorize Something\>\""}], "]"}]}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                    "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"t", "\[Equal]", "2"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"no", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"z5", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemKin", "]"}], "\[GreaterEqual]",
                     "2"}], ",", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemKin", ",", 
                    RowBox[{"-", "1"}]}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Mangetic Field / G\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "250"}], "}"}]}], ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{"timeLegend", ",", "Above"}], "]"}]}]}], "]"}], 
                    ",", "\"\<Memorize Something\>\""}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemKin", "]"}], "\[GreaterEqual]",
                     "2"}], ",", 
                    RowBox[{"PlotExplorer", "@", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemKin", ",", 
                    RowBox[{"-", "1"}]}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Mangetic Field / G\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "340"}], "}"}]}], ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{"timeLegend", ",", "Above"}], "]"}]}]}], "]"}]}], 
                    ",", "\"\<Memorize Something\>\""}], "]"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"no", "\[Equal]", "2"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"z5", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemKinNormSh", "]"}], 
                    "\[GreaterEqual]", "2"}], ",", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemKinNormSh", ",", 
                    RowBox[{"-", "1"}]}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Mangetic Field / G\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "250"}], "}"}]}], ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{"timeLegend", ",", "Above"}], "]"}]}]}], "]"}], 
                    ",", "\"\<Memorize Something\>\""}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemKinNormSh", "]"}], 
                    "\[GreaterEqual]", "2"}], ",", 
                    RowBox[{"PlotExplorer", "@", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemKinNormSh", ",", 
                    RowBox[{"-", "1"}]}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Mangetic Field / G\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "340"}], "}"}]}], ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{"timeLegend", ",", "Above"}], "]"}]}]}], "]"}]}], 
                    ",", "\"\<Memorize Something\>\""}], "]"}]}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                    "]"}]}], "\[IndentingNewLine]", "]"}], 
                 "\[IndentingNewLine]", "]"}], "}"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                RowBox[{
                "Dynamic", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 "\[IndentingNewLine]", 
                 RowBox[{"Which", "[", 
                  RowBox[{
                   RowBox[{"t", "\[Equal]", "1"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"no", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"z5", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemSpec", "]"}], 
                    "\[GreaterEqual]", "2"}], ",", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemSpec", ",", 
                    RowBox[{"-", "1"}]}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Time / \[Mu]s\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "250"}], "}"}]}], ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{"fieldLegend", ",", "Above"}], "]"}]}]}], "]"}], 
                    ",", "\"\<Memorize Something\>\""}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemSpec", "]"}], 
                    "\[GreaterEqual]", "2"}], ",", 
                    RowBox[{"PlotExplorer", "@", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemSpec", ",", 
                    RowBox[{"-", "1"}]}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Time / \[Mu]s\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "340"}], "}"}]}], ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{"fieldLegend", ",", "Above"}], "]"}]}]}], "]"}]}],
                     ",", "\"\<Memorize Something\>\""}], "]"}]}], "]"}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{"no", "\[Equal]", "2"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"z5", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemSpecNorm", "]"}], 
                    "\[GreaterEqual]", "2"}], ",", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemSpecNorm", ",", 
                    RowBox[{"-", "1"}]}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Time / \[Mu]s\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "250"}], "}"}]}], ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{"fieldLegend", ",", "Above"}], "]"}]}]}], "]"}], 
                    ",", "\"\<Memorize Something\>\""}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemSpecNorm", "]"}], 
                    "\[GreaterEqual]", "2"}], ",", 
                    RowBox[{"PlotExplorer", "@", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemSpecNorm", ",", 
                    RowBox[{"-", "1"}]}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Time / \[Mu]s\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "340"}], "}"}]}], ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{"fieldLegend", ",", "Above"}], "]"}]}]}], "]"}]}],
                     ",", "\"\<Memorize Something\>\""}], "]"}]}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                    "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"t", "\[Equal]", "2"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"no", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"z5", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemSpec", "]"}], 
                    "\[GreaterEqual]", "2"}], ",", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemSpec", ",", 
                    RowBox[{"-", "1"}]}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Time / \[Mu]s\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "250"}], "}"}]}], ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{"fieldLegend", ",", "Above"}], "]"}]}]}], "]"}], 
                    ",", "\"\<Memorize Something\>\""}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemSpec", "]"}], 
                    "\[GreaterEqual]", "2"}], ",", 
                    RowBox[{"PlotExplorer", "@", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemSpec", ",", 
                    RowBox[{"-", "1"}]}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Time / \[Mu]s\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "340"}], "}"}]}], ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{"fieldLegend", ",", "Above"}], "]"}]}]}], "]"}]}],
                     ",", "\"\<Memorize Something\>\""}], "]"}]}], "]"}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{"no", "\[Equal]", "2"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"z5", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemSpecNormSh", "]"}], 
                    "\[GreaterEqual]", "2"}], ",", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemSpecNormSh", ",", 
                    RowBox[{"-", "1"}]}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Time / \[Mu]s\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "250"}], "}"}]}], ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{"fieldLegend", ",", "Above"}], "]"}]}]}], "]"}], 
                    ",", "\"\<Memorize Something\>\""}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemSpecNormSh", "]"}], 
                    "\[GreaterEqual]", "2"}], ",", 
                    RowBox[{"PlotExplorer", "@", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemSpecNormSh", ",", 
                    RowBox[{"-", "1"}]}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Time / \[Mu]s\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "340"}], "}"}]}], ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{"fieldLegend", ",", "Above"}], "]"}]}]}], "]"}]}],
                     ",", "\"\<Memorize Something\>\""}], "]"}]}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                    "]"}]}], "\[IndentingNewLine]", "]"}], 
                 "\[IndentingNewLine]", "]"}], "}"}]}], "\[IndentingNewLine]",
               "}"}], "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "}"}], "]"}], ",", 
       RowBox[{"FrameMargins", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"5", ",", "5"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"5", ",", "5"}], "}"}]}], "}"}]}], ",", 
       RowBox[{"Background", "\[Rule]", 
        RowBox[{"Lighter", "[", 
         RowBox[{"Gray", ",", " ", "0.97"}], "]"}]}]}], "]"}]}], 
    "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]"}]}]], "Input",
 Deletable->False,
 CellOpen->False,
 InitializationCell->True,
 CellChangeTimes->{{3.7583199793622513`*^9, 3.758320117553156*^9}, {
   3.7583202498337216`*^9, 3.7583202529779015`*^9}, {3.7583241596613507`*^9, 
   3.758324162331504*^9}, {3.758324864828684*^9, 3.758324898195593*^9}, {
   3.75834389234319*^9, 3.7583439206784844`*^9}, {3.758344065415558*^9, 
   3.7583441055582294`*^9}, {3.758344175081403*^9, 3.758344178270878*^9}, 
   3.758410262063575*^9, {3.758421377507607*^9, 3.7584213776262884`*^9}, {
   3.7588407475620193`*^9, 3.7588409479712067`*^9}, {3.7588410508980265`*^9, 
   3.7588410526802645`*^9}, {3.7588411112057734`*^9, 3.758841154886004*^9}, {
   3.7588431022442837`*^9, 3.7588431049590473`*^9}, {3.7588510558726807`*^9, 
   3.7588510742036686`*^9}, {3.7588511201278863`*^9, 3.758851126485891*^9}, {
   3.7588511579856806`*^9, 3.7588511810908847`*^9}, {3.7589491270536256`*^9, 
   3.758949129446251*^9}, {3.7590422481769686`*^9, 3.759042286176279*^9}, {
   3.759102150984763*^9, 3.7591022036817245`*^9}, {3.759187185438345*^9, 
   3.759187186267156*^9}, {3.7592801960727043`*^9, 3.759280270643981*^9}, {
   3.759283081311727*^9, 3.759283086093965*^9}, {3.759283525112187*^9, 
   3.7592835287091713`*^9}, {3.759285018201902*^9, 3.759285018974512*^9}, {
   3.7594432405410824`*^9, 3.759443243659396*^9}, {3.7594598492556887`*^9, 
   3.7594598589627542`*^9}, {3.759459958196304*^9, 3.75946000407561*^9}, {
   3.7595303765939093`*^9, 3.75953039457477*^9}, {3.76006432175241*^9, 
   3.760064332230085*^9}, {3.76083970582311*^9, 3.760839733500308*^9}, {
   3.760840210364614*^9, 3.760840210593849*^9}, 3.760840513500072*^9, {
   3.76091831515695*^9, 3.760918319379809*^9}, {3.76092059684969*^9, 
   3.760920597932757*^9}, {3.760938247910058*^9, 3.76093825847657*^9}, {
   3.7609431524965754`*^9, 3.7609431618408413`*^9}, {3.761260164346538*^9, 
   3.761260228874164*^9}, 3.7612682133392*^9, {3.761268322704924*^9, 
   3.761268323245582*^9}, {3.761268476938036*^9, 3.761268480180711*^9}, {
   3.761428708543551*^9, 3.7614287211916857`*^9}, {3.76203839875229*^9, 
   3.762038406440093*^9}, {3.762038497098184*^9, 3.7620385083640137`*^9}, {
   3.762150023266185*^9, 3.7621500271593647`*^9}, {3.762150353815794*^9, 
   3.762150358791147*^9}, {3.7622258270803843`*^9, 3.762225829420823*^9}, {
   3.7622259913364983`*^9, 3.762226003255671*^9}, {3.762226034443901*^9, 
   3.7622260365918617`*^9}, {3.762226099244501*^9, 3.762226106659184*^9}, {
   3.762226432380192*^9, 3.762226434488181*^9}, {3.762226771984023*^9, 
   3.762226775864646*^9}, {3.7622268794862823`*^9, 3.762226882024747*^9}, {
   3.7622270568499403`*^9, 3.762227057193203*^9}, 3.762228077145792*^9, {
   3.7622282739314404`*^9, 3.7622283116187696`*^9}, {3.7622286871471443`*^9, 
   3.762228695547422*^9}, {3.762493183908413*^9, 3.762493183933618*^9}, {
   3.762668668201221*^9, 3.762668678864506*^9}, {3.762668720012478*^9, 
   3.762668721768551*^9}, {3.7626699605647087`*^9, 3.762669966450143*^9}, {
   3.7626733231234818`*^9, 3.762673360544808*^9}, {3.762726877678506*^9, 
   3.762726877853751*^9}, {3.763448737852831*^9, 3.763448756566835*^9}, {
   3.763448790722884*^9, 3.763448794604726*^9}, {3.763449630886462*^9, 
   3.763449631113305*^9}, {3.767312089537133*^9, 3.767312111309587*^9}, {
   3.769987232455014*^9, 3.7699872516799593`*^9}, {3.769987644457684*^9, 
   3.769987661472899*^9}, {3.769987805476426*^9, 3.769987830285843*^9}, 
   3.769987970844591*^9, {3.769997366373094*^9, 3.7699974114980507`*^9}, {
   3.769998616067281*^9, 3.769998620922106*^9}, {3.7700023203789597`*^9, 
   3.770002326890547*^9}, {3.770002394538095*^9, 3.770002395530733*^9}, 
   3.7700027679923067`*^9, {3.770002798371694*^9, 3.770002800119255*^9}, {
   3.770002877651761*^9, 3.770002925582965*^9}, {3.77000315453408*^9, 
   3.770003184766019*^9}, {3.770003536085965*^9, 3.770003538757196*^9}, {
   3.770003924187777*^9, 3.770003930214451*^9}, {3.770069647745014*^9, 
   3.770069656842497*^9}, {3.77173653265077*^9, 3.771736574851213*^9}, {
   3.771737246796062*^9, 3.771737247365106*^9}, {3.771737279877694*^9, 
   3.771737282860491*^9}, {3.771737529088861*^9, 3.771737550264186*^9}, {
   3.7717376634319277`*^9, 3.771737702377349*^9}, {3.771886270708323*^9, 
   3.7718864287232647`*^9}, {3.771886599323255*^9, 3.7718866193936577`*^9}, {
   3.771886657146904*^9, 3.7718867048187532`*^9}, 3.771886798500598*^9, {
   3.771886951259272*^9, 3.771886959754444*^9}, {3.771887141669044*^9, 
   3.7718871421651993`*^9}, {3.771975329328061*^9, 3.771975409762355*^9}, {
   3.771978210869731*^9, 3.771978211877509*^9}, {3.772179859945352*^9, 
   3.772179894447343*^9}, {3.772179945519964*^9, 3.7721799492711277`*^9}, {
   3.7721799805393457`*^9, 3.7721799879198*^9}, {3.773107199743353*^9, 
   3.7731072237173033`*^9}, 3.7731101655031*^9, {3.7731101978544817`*^9, 
   3.773110205557673*^9}, {3.773110242471981*^9, 3.773110285075965*^9}, 
   3.7731103250792637`*^9, {3.774669498953536*^9, 3.774669509583663*^9}, {
   3.774669625917428*^9, 3.7746696301707163`*^9}, {3.774669677681795*^9, 
   3.77466968382333*^9}, {3.774669720252927*^9, 3.77466977789042*^9}, {
   3.7746699949635487`*^9, 3.774670094487382*^9}, {3.774670159347797*^9, 
   3.7746701761648693`*^9}, {3.7746702249817038`*^9, 3.774670225497427*^9}, {
   3.774670324940365*^9, 3.7746703318465652`*^9}, {3.774670457691408*^9, 
   3.7746704602699747`*^9}, {3.7746705081473703`*^9, 3.774670613121908*^9}, {
   3.7746706779712667`*^9, 3.7746706958627577`*^9}, {3.774670726446306*^9, 
   3.7746707663402767`*^9}, {3.774670804792635*^9, 3.774670840166314*^9}, {
   3.774670914505994*^9, 3.774670928955163*^9}, {3.774671013092362*^9, 
   3.774671020547597*^9}, {3.7746741695963697`*^9, 3.774674196275201*^9}, {
   3.774674269982382*^9, 3.774674277044087*^9}, {3.7746743145422363`*^9, 
   3.774674318122666*^9}, {3.7746743900991898`*^9, 3.7746744505767*^9}, {
   3.774674518948092*^9, 3.774674534766069*^9}, {3.77467462610034*^9, 
   3.774674626956028*^9}, {3.774674696931202*^9, 3.774674940725473*^9}, {
   3.774674990559816*^9, 3.77467505038614*^9}, {3.774675268389057*^9, 
   3.774675269638652*^9}, {3.774675310126822*^9, 3.774675324966753*^9}, {
   3.774675369488654*^9, 3.774675385863097*^9}, {3.7746754527453537`*^9, 
   3.774675453154748*^9}, {3.774675497592506*^9, 3.774675543912025*^9}, {
   3.7746755943323812`*^9, 3.7746756627787647`*^9}, {3.774675813552689*^9, 
   3.774675840431911*^9}, {3.774675881984952*^9, 3.774675915940301*^9}, {
   3.774675993207767*^9, 3.7746760164934273`*^9}, {3.774676088726776*^9, 
   3.774676167753729*^9}, {3.774676217431437*^9, 3.7746762366394053`*^9}, {
   3.774676271138926*^9, 3.774676271977026*^9}, {3.774676482441098*^9, 
   3.774676499479371*^9}, {3.774676567736388*^9, 3.774676626029642*^9}, {
   3.774676693095764*^9, 3.7746767239143677`*^9}, {3.7746768230839157`*^9, 
   3.774676825110347*^9}, {3.774676883974597*^9, 3.774676897830968*^9}, {
   3.774676930229843*^9, 3.7746769308330173`*^9}, {3.7746770027688637`*^9, 
   3.7746770058832607`*^9}, {3.774677094803895*^9, 3.7746771242744102`*^9}, {
   3.7746776660898237`*^9, 3.7746776681489687`*^9}, {3.7746777296083612`*^9, 
   3.774677756629012*^9}, {3.77467782766695*^9, 3.774677840651978*^9}, {
   3.774677875270609*^9, 3.7746779062726994`*^9}, {3.7746780129967203`*^9, 
   3.774678035361142*^9}, {3.774678077216194*^9, 3.7746781211018467`*^9}, {
   3.774678172364605*^9, 3.7746782112307787`*^9}, {3.774678279858591*^9, 
   3.7746783002543*^9}, {3.7746783409365063`*^9, 3.774678512005413*^9}, {
   3.774678579921895*^9, 3.774678667540118*^9}, {3.77467870425844*^9, 
   3.774678796158223*^9}, {3.7746789015997963`*^9, 3.774678970227434*^9}, {
   3.774679006951817*^9, 3.7746790075123453`*^9}, {3.7746792656524982`*^9, 
   3.7746793118306417`*^9}, {3.774679420133904*^9, 3.774679423745126*^9}, {
   3.774679460607765*^9, 3.774679467287754*^9}, {3.7746795458519917`*^9, 
   3.7746796063165197`*^9}, {3.774679638423255*^9, 3.774679695562587*^9}, 
   3.774679847790653*^9, {3.774679900695163*^9, 3.774679901991349*^9}, {
   3.7746799444427013`*^9, 3.774679945441296*^9}, {3.774680094994417*^9, 
   3.774680348711643*^9}, {3.774680387746524*^9, 3.774680507060646*^9}, {
   3.774680600904256*^9, 3.774680601428562*^9}, {3.7746806475136423`*^9, 
   3.774680672055705*^9}, {3.774680721034553*^9, 3.7746807214675293`*^9}, {
   3.774680943057682*^9, 3.774681023374817*^9}, {3.774681068033659*^9, 
   3.774681098008762*^9}, {3.7746813178704987`*^9, 3.7746813231881113`*^9}, {
   3.774681564813962*^9, 3.774681572890978*^9}, {3.774681606933399*^9, 
   3.774681688079672*^9}, {3.7746817272983637`*^9, 3.7746818125751762`*^9}, {
   3.774681869318715*^9, 3.774681889585556*^9}, {3.774682423990234*^9, 
   3.7746825057054653`*^9}, {3.774682871639161*^9, 3.774682875335788*^9}, {
   3.774735658050983*^9, 3.774735660061286*^9}, {3.7747356923800488`*^9, 
   3.774735802483672*^9}, 3.774735846541184*^9, {3.774735886290825*^9, 
   3.77473595239762*^9}, {3.774735996965209*^9, 3.774736031234828*^9}, {
   3.774736110891801*^9, 3.774736130984947*^9}, 3.774736212551581*^9, {
   3.774736330512107*^9, 3.774736335302269*^9}, {3.774736398066229*^9, 
   3.7747364410822363`*^9}, {3.7747365412755547`*^9, 3.774736547630003*^9}, {
   3.774736592311717*^9, 3.774736593644388*^9}, {3.7747366392892923`*^9, 
   3.7747366397121563`*^9}, {3.774736682362751*^9, 3.7747367052487707`*^9}, {
   3.774736784851403*^9, 3.774736796062736*^9}, {3.774736839846788*^9, 
   3.774736887159421*^9}, {3.774736996342473*^9, 3.7747370068753643`*^9}, {
   3.77473705818397*^9, 3.774737065076795*^9}, {3.774737159092545*^9, 
   3.774737162057523*^9}, {3.774737557324922*^9, 3.774737559563733*^9}, {
   3.77473759661311*^9, 3.774737620837596*^9}, {3.7747377075983257`*^9, 
   3.774737723919379*^9}, {3.7747377642677794`*^9, 3.7747377647115803`*^9}, {
   3.774737838589466*^9, 3.7747378611099567`*^9}, {3.774737905904128*^9, 
   3.774737926038726*^9}, {3.774737986277625*^9, 3.774737996966*^9}, {
   3.774738060156554*^9, 3.7747381482245903`*^9}, {3.7747383142349577`*^9, 
   3.7747383562726507`*^9}, {3.7747413647047443`*^9, 3.774741368179653*^9}, {
   3.774741448144043*^9, 3.7747415068199387`*^9}, {3.7747415590790567`*^9, 
   3.774741563974182*^9}, {3.774743115101494*^9, 3.7747431155621*^9}, {
   3.7747481359616003`*^9, 3.7747482191657352`*^9}, {3.774748280912871*^9, 
   3.774748282865204*^9}, {3.774761968497305*^9, 3.7747619833244877`*^9}, {
   3.7748225566774063`*^9, 3.774822561472994*^9}, {3.774823485121611*^9, 
   3.774823487365941*^9}, {3.774823533998863*^9, 3.774823680422901*^9}, {
   3.7748238352060823`*^9, 3.7748238665071697`*^9}, {3.7748239285206127`*^9, 
   3.774823942194188*^9}, {3.77482401860588*^9, 3.774824248145129*^9}, {
   3.774824299395172*^9, 3.774824306072507*^9}, 3.7748244642988987`*^9, {
   3.774824910834579*^9, 3.774824917726246*^9}, 3.774825177720723*^9, {
   3.774826078850441*^9, 3.774826092996784*^9}, {3.7748262417267303`*^9, 
   3.7748263248220663`*^9}, {3.7748263655611057`*^9, 
   3.7748263677510843`*^9}, {3.7748264157000637`*^9, 3.774826434695459*^9}, {
   3.7748265013996487`*^9, 3.774826515924468*^9}, {3.7748267082679977`*^9, 
   3.774826823333785*^9}, {3.7748269130559998`*^9, 3.7748269518478518`*^9}, 
   3.774827099254039*^9, {3.7748271591862*^9, 3.774827330467578*^9}, {
   3.77482751490095*^9, 3.774827524887192*^9}, {3.77482791674785*^9, 
   3.774827925139421*^9}, 3.774828335043939*^9, 3.7748285015315943`*^9, {
   3.774828594994527*^9, 3.774828637750268*^9}, {3.7748287090260878`*^9, 
   3.774828711121828*^9}, {3.774828775927485*^9, 3.774828818413279*^9}, {
   3.7748289814970083`*^9, 3.774829040838955*^9}, 3.774829112936535*^9, 
   3.774829156412806*^9, {3.7748380606731367`*^9, 3.774838084036721*^9}, {
   3.774838150438704*^9, 3.7748381808846607`*^9}, {3.7751701280756903`*^9, 
   3.775170148931467*^9}, {3.77517025469496*^9, 3.775170257580542*^9}, {
   3.77517130885394*^9, 3.775171324636129*^9}, {3.775171384593259*^9, 
   3.775171412154911*^9}, {3.775344133233354*^9, 3.775344142914076*^9}, {
   3.775344189855646*^9, 3.775344232440772*^9}, {3.775344298597817*^9, 
   3.775344364173029*^9}, {3.775344504131885*^9, 3.775344518111999*^9}, {
   3.775344590014139*^9, 3.775344653968161*^9}, {3.7753448363132887`*^9, 
   3.7753449200147257`*^9}, {3.775345157335918*^9, 3.775345167822665*^9}, {
   3.7753452058163023`*^9, 3.7753453175440063`*^9}, {3.775345503946382*^9, 
   3.7753455820661507`*^9}, {3.7753456726837378`*^9, 3.775345682574054*^9}, {
   3.775345733268043*^9, 3.775345738638177*^9}, 3.775345832819578*^9, 
   3.775878427607359*^9, {3.7758784672969503`*^9, 3.775878469171979*^9}, 
   3.7758785203601418`*^9, {3.775878582170067*^9, 3.775878605513563*^9}, {
   3.775878761554336*^9, 3.775878774468631*^9}, {3.7758798586892023`*^9, 
   3.775879892334571*^9}, {3.775879955529739*^9, 3.7758800451283073`*^9}, {
   3.7758800994151363`*^9, 3.775880172762994*^9}, {3.775880312194456*^9, 
   3.775880356018197*^9}, 3.775880530461472*^9, {3.7827144137590513`*^9, 
   3.782714441930211*^9}, {3.7827150235890923`*^9, 3.7827150641582537`*^9}, {
   3.782715228008154*^9, 3.782715229650498*^9}, {3.782715302193509*^9, 
   3.782715306999249*^9}, {3.782715409701168*^9, 3.782715422141452*^9}, {
   3.782715707341151*^9, 3.782715721978365*^9}, {3.792624823510038*^9, 
   3.792624856071415*^9}},ExpressionUUID->"bdc319b7-a55f-4762-ae42-\
36f56ac95e0a"],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`x$$ = 
  1, $CellContext`GraphDensityPlot$$, $CellContext`manip1$$, \
$CellContext`manip1Corr$$, $CellContext`manip1PE$$, \
$CellContext`manip1PECorr$$, $CellContext`manip2$$, \
$CellContext`manip2Corr$$, $CellContext`manip2PE$$, \
$CellContext`manip2PECorr$$, $CellContext`z$$ = 1, $CellContext`f3$$ = 
  "/media/Melnikov/00_Experimental_Data/2019/FEL", \
$CellContext`GraphDensityPlotManip$$, $CellContext`d2$$ = 
  1, $CellContext`manip1CorrField$$, $CellContext`manip1PECorrField$$, \
$CellContext`manip2CorrField$$, $CellContext`manip2PECorrField$$, \
$CellContext`GraphDensityPlotManipCorrField$$, \
$CellContext`GraphDensityPlotManipCorr$$, $CellContext`logplot$$, \
$CellContext`no$$ = 1, $CellContext`z5$$ = 1, $CellContext`MemKin$$ = {
  0}, $CellContext`MemKinNorm$$ = {0}, $CellContext`MemSpec$$ = {
  0}, $CellContext`MemSpecNorm$$ = {
  0}, $CellContext`datasum$$, $CellContext`f$$, $CellContext`averData$$, \
$CellContext`fn$$, $CellContext`t$$ = 1, $CellContext`MemKinNormSh$$ = {
  0}, $CellContext`MemSpecNormSh$$ = {0}, $CellContext`or$$ = 
  1, $CellContext`posnegcheck$$, $CellContext`ndel$$ = 
  1, $CellContext`fieldLegend$$ = {}, $CellContext`timeLegend$$ = {}}, 
  PanelBox[
   TagBox[GridBox[{
      {
       StyleBox["\<\"Full Path to File: \"\>",
        StripOnInput->False,
        FontWeight->Bold], 
       DynamicBox[ToBoxes[$CellContext`file, StandardForm],
        ImageSizeCache->{14., {0., 7.}}], "\[SpanFromLeft]", 
       "\[SpanFromLeft]"},
      {
       StyleBox["\<\"Full Path to File For Saving: \"\>",
        StripOnInput->False,
        FontWeight->Bold], 
       DynamicBox[ToBoxes[$CellContext`f3$$, StandardForm],
        ImageSizeCache->{226., {2., 7.}}], "\[SpanFromLeft]", 
       "\[SpanFromLeft]"},
      {
       PanelBox[
        TagBox[GridBox[{
           {"\<\"Open Old File?\"\>", 
            CheckboxBox[Dynamic[$CellContext`oldnew], {1, 2}]},
           {"", ""},
           {
            ButtonBox[
             StyleBox["\<\"Open File\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             Appearance->Automatic,
             
             ButtonFunction:>($CellContext`dir = 
               SetDirectory[
                "/media/Melnikov/00_Experimental_Data/2019/FEL"]; \
$CellContext`file = 
               SystemDialogInput[
                "FileOpen", {$CellContext`dir, {"CSV Files" -> {"*.csv"}}}, 
                 WindowTitle -> "Open Raw Data..."]; $CellContext`fileData = 
               If[$CellContext`file =!= $Canceled, 
                 Import[$CellContext`file, "CSV"], "Nothing"]; If[
                And[Head[$CellContext`fileData] == List, StringStartsQ[
                   Part[$CellContext`fileData, 1, 1], "%"] == 
                 True], {$CellContext`droplines = Part[FirstPosition[
                    Part[$CellContext`fileData, All, 1], 
                    PatternTest[
                    Blank[], NumberQ]] - 2, 
                    1]; $CellContext`counter = $CellContext`counter + 
                   1; $CellContext`fileDataParam = 
                  Take[$CellContext`fileData, $CellContext`droplines]; \
$CellContext`CheckQuestion = StringContainsQ[
                    ToString[$CellContext`fileDataParam], "back"]; 
                 MessageName[$CellContext`TimeResolutionF, "usage"] = 
                  "TimeResolutionF[ParametersFile] returns the value of Time \
Resolution from parameter file of TR experiment; Also get Time Label for \
graphs"; $CellContext`TimeResolutionF[
                    Pattern[$CellContext`ParametersFile, 
                    Blank[]]] := 
                  Module[{$CellContext`temp4, $CellContext`temp5}, \
$CellContext`temp4 := ParallelMap[Select[#, StringContainsQ[
                    ToString[#], "Time resolution"] == 
                    True& ]& , $CellContext`ParametersFile]; \
$CellContext`temp5 := StringReplace[
                    Flatten[$CellContext`temp4], "% Time resolution = " -> 
                    " "]; $CellContext`TimeResolution = Part[
                    ToExpression[
                    StringDrop[$CellContext`temp5, -3]], 
                    1]; $CellContext`label = StringJoin["Time / ", 
                    Part[
                    StringTake[$CellContext`temp5, -2], 1]]; 
                    Null]; $CellContext`TimeResolutionF[$CellContext`\
fileDataParam]; MessageName[$CellContext`RecordLengthF, "usage"] = 
                  "RecordLengthF[ParametersFile] returns the value of Record \
Length from parameter file of TR experiment"; $CellContext`RecordLengthF[
                    Pattern[$CellContext`ParametersFile, 
                    Blank[]]] := 
                  Module[{$CellContext`temp3}, $CellContext`temp3 := 
                    ParallelMap[Select[#, StringContainsQ[
                    ToString[#], "Record length"] == 
                    True& ]& , $CellContext`ParametersFile]; \
$CellContext`RecordLength = ToExpression[
                    Part[
                    StringCases[
                    Flatten[$CellContext`temp3], 
                    Repeated[DigitCharacter]], 1, 1]]; 
                    Null]; $CellContext`RecordLengthF[$CellContext`\
fileDataParam]; MessageName[$CellContext`NumberofScansF, "usage"] = 
                  "NumberofScansF[ParametersFile] returns the number of Scans \
from parameter file of TR experiment"; $CellContext`NumberofScansF[
                    Pattern[$CellContext`ParametersFile, 
                    Blank[]]] := 
                  Module[{$CellContext`tempN}, $CellContext`tempN := 
                    ParallelMap[Select[#, StringContainsQ[
                    ToString[#], "Num. scans"] == 
                    True& ]& , $CellContext`ParametersFile]; \
$CellContext`NumberofScans = ToExpression[
                    Part[
                    StringCases[
                    Flatten[$CellContext`tempN], 
                    Repeated[DigitCharacter]], 1, 1]]; 
                    Null]; $CellContext`NumberofScansF[$CellContext`\
fileDataParam]; MessageName[$CellContext`FieldResolutionF, "usage"] = 
                  "FieldResolutionF[ParametersFile] returns the value of \
Field Resolution from parameter file of TR experiment"; \
$CellContext`FieldResolutionF[
                    Pattern[$CellContext`ParametersFile, 
                    Blank[]]] := 
                  Module[{$CellContext`temp2, $CellContext`temp7}, \
$CellContext`temp2 := ParallelMap[Select[#, StringContainsQ[
                    ToString[#], "Field step"] == 
                    True& ]& , $CellContext`ParametersFile]; \
$CellContext`temp7 := StringReplace[
                    Flatten[$CellContext`temp2], "% Field step    \t= " -> 
                    " "]; $CellContext`FieldResolution = Part[
                    ToExpression[
                    StringDrop[$CellContext`temp7, -3]], 1]; 
                    Null]; $CellContext`FieldResolutionF[$CellContext`\
fileDataParam]; MessageName[$CellContext`RecordLengthFieldF, "usage"] = 
                  "RecordLengthFieldF[ParametersFile] obtains the value of \
Start Field, End Field, Record Length Field, Field Points values from \
parameter file of TR experiment"; $CellContext`RecordLengthFieldF[
                    Pattern[$CellContext`ParametersFile, 
                    Blank[]]] := 
                  Module[{$CellContext`temp, $CellContext`temp6}, \
$CellContext`temp := ParallelMap[Select[#, StringContainsQ[
                    ToString[#], "Start_field"] == 
                    True& ]& , $CellContext`ParametersFile]; \
$CellContext`temp6 := ParallelMap[Select[#, StringContainsQ[
                    ToString[#], "End field"] == 
                    True& ]& , $CellContext`ParametersFile]; \
$CellContext`StartField = ToExpression[
                    StringJoin[
                    Part[
                    StringCases[
                    Flatten[$CellContext`temp], 
                    Repeated[DigitCharacter]], 1, 1], ".", 
                    Part[
                    StringCases[
                    Flatten[$CellContext`temp], 
                    Repeated[DigitCharacter]], 1, 2]]]; $CellContext`EndField = 
                    ToExpression[
                    StringJoin[
                    Part[
                    StringCases[
                    Flatten[$CellContext`temp6], 
                    Repeated[DigitCharacter]], 1, 1], ".", 
                    Part[
                    StringCases[
                    Flatten[$CellContext`temp6], 
                    Repeated[DigitCharacter]], 1, 
                    2]]]; $CellContext`EndFieldReserve = \
$CellContext`EndField; 
                    If[$CellContext`oldnew == 1, {
                    If[$CellContext`NumberofScans == 1, 
                    If[Part[
                    ToExpression[
                    StringDrop[
                    
                    Part[$CellContext`fileData, -$CellContext`RecordLength - 
                    1], 1]], 1] == ToExpression[
                    Part[
                    StringDrop[
                    Part[
                    Drop[$CellContext`fileData, $CellContext`droplines], 1], 
                    8], 1]], {MessageDialog[
                    Style[
                    "Attention! Only off-resonance is recorded; Do not press \
Convert Data Button", 18, Black]]; 
                    Null}, $CellContext`EndField = $CellContext`EndField], 
                    If[Part[
                    ToExpression[
                    StringDrop[
                    
                    Part[$CellContext`fileData, -$CellContext`RecordLength - 
                    1], 1]], 1] == ToExpression[
                    Part[
                    StringDrop[
                    Part[
                    Drop[$CellContext`fileData, $CellContext`droplines], 1], 
                    8], 1]], {$CellContext`EndField = $CellContext`EndField; \
$CellContext`fileData = 
                    Drop[$CellContext`fileData, -($CellContext`RecordLength + 
                    1)]; MessageDialog[
                    Style[
                    "Attention! Only off-resonance is recorded for the last \
scan; Only finished scans are shown", 18, Black]]; 
                    Null}, $CellContext`EndField = $CellContext`EndField]]; 
                    If[$CellContext`NumberofScans == 1, 
                    If[Part[
                    ToExpression[
                    StringDrop[
                    Part[$CellContext`fileData, -$CellContext`RecordLength - 
                    1], 1]], 
                    1] != $CellContext`EndField, {$CellContext`EndField = Part[
                    ToExpression[
                    StringDrop[
                    
                    Part[$CellContext`fileData, -$CellContext`RecordLength - 
                    1], 1]], 1]; MessageDialog[
                    Style["Attention! Your file is not finished", 18, Black]]; 
                    If[$CellContext`EndField == $CellContext`StartField, 
                    MessageDialog[
                    Style[
                    "Attention! Only one field point is recorded do not use \
2D plot", 18, Black]]]; Null}, $CellContext`EndField = $CellContext`EndField], 
                    If[Part[
                    ToExpression[
                    StringDrop[
                    
                    Part[$CellContext`fileData, -$CellContext`RecordLength - 
                    1], 1]], 
                    1] != $CellContext`EndField, {$CellContext`EndField = Part[
                    ToExpression[
                    StringDrop[
                    
                    Part[$CellContext`fileData, -$CellContext`RecordLength - 
                    1], 1]], 1]; $CellContext`fileData = 
                    Drop[$CellContext`fileData, -($CellContext`RecordLength 
                    Round[2 + ($CellContext`EndField - \
$CellContext`StartField)/$CellContext`FieldResolution] + 
                    2 + ($CellContext`EndField - \
$CellContext`StartField)/$CellContext`FieldResolution)]; \
$CellContext`EndField = $CellContext`EndFieldReserve; MessageDialog[
                    Style[
                    "Attention! Your last scan is not finished; Only finished \
scans are shown", 18, Black]]; 
                    Null}, $CellContext`EndField = $CellContext`EndField]]; 
                    If[$CellContext`NumberofScans == 1, 
                    If[Part[
                    ToExpression[
                    StringDrop[
                    
                    Part[$CellContext`fileData, -$CellContext`RecordLength - 
                    1], 1]], 
                    1] != $CellContext`EndField, {$CellContext`EndField = Part[
                    ToExpression[
                    StringDrop[
                    
                    Part[$CellContext`fileData, -$CellContext`RecordLength - 
                    1], 1]], 1]; MessageDialog[
                    Style["Attention! Your file is not finished", 18, Black]]; 
                    If[$CellContext`EndField == $CellContext`StartField, 
                    MessageDialog[
                    Style[
                    "Attention! Only one field point is recorded do not use \
2D plot", 18, Black]]]; 
                    Null}, $CellContext`EndField = $CellContext`EndField]]; 
                    Null}, If[$CellContext`NumberofScans == 1, 
                    If[Part[
                    ToExpression[
                    StringDrop[
                    
                    Part[$CellContext`fileData, -$CellContext`RecordLength - 
                    1 - $CellContext`RecordLength - 1], 1]], 
                    1] != $CellContext`EndField, {$CellContext`EndField = Part[
                    ToExpression[
                    StringDrop[
                    
                    Part[$CellContext`fileData, -$CellContext`RecordLength - 
                    1 - $CellContext`RecordLength - 1], 1]], 1]; MessageDialog[
                    Style["Attention! Your file is not finished", 18, Black]]; 
                    If[$CellContext`EndField == $CellContext`StartField, 
                    MessageDialog[
                    Style[
                    "Attention! Only one field point is recorded do not use \
2D plot", 18, Black]]]; 
                    Null}, $CellContext`EndField = $CellContext`EndField]]; 
                    Null]; $CellContext`RecordLengthField = \
$CellContext`EndField - $CellContext`StartField; $CellContext`FieldPoints = 
                    Round[1 + \
$CellContext`RecordLengthField/$CellContext`FieldResolution]; \
$CellContext`totalpointsinonescan = $CellContext`RecordLength \
($CellContext`FieldPoints + 1) + ($CellContext`FieldPoints + 
                    1); $CellContext`scans = IntegerPart[
                    Round[
                    Length[$CellContext`fileData]/($CellContext`\
totalpointsinonescan + $CellContext`droplines)]]; $CellContext`todrop = \
$CellContext`totalpointsinonescan ($CellContext`scans - 
                    1) + $CellContext`droplines; 
                    Null]; $CellContext`RecordLengthFieldF[$CellContext`\
fileDataParam]; $CellContext`SubstracteField = $CellContext`StartField; \
$CellContext`SubstracteTime = $CellContext`TimeResolution; \
$CellContext`\:0421licker2 = 0; $CellContext`\:0421licker3 = 
                  0; $CellContext`\:0421licker4 = 0; Null}, {MessageDialog[
                   Style["An incorrect file has been opened", 18, Black]]; 
                 Abort[]}, {MessageDialog[
                   Style["An incorrect file has been opened", 18, Black]]; 
                 Abort[]}]; Null),
             Evaluator->Automatic,
             FrameMargins->10,
             Method->"Queued"], ""},
           {"", ""},
           {"\<\"Comments In File: \"\>", 
            DynamicBox[ToBoxes[
              If[ListQ[$CellContext`fileDataParam] == True, 
               TableForm[
                Select[
                 Part[
                  Map[StringDrop[#, 2]& , 
                   Select[
                    Map[Select[#, StringContainsQ[
                    ToString[#], "%%"] == 
                    True& ]& , $CellContext`fileDataParam], Length[#] == 
                    1& ]], All, 1], StringLength[#] > 0& ]], 
               "File Does Not Open"], StandardForm],
             ImageSizeCache->{88., {2., 7.}}]},
           {"", ""},
           {"\<\"Field for Substraction / G:\"\>", 
            
            InputFieldBox[
             Dynamic[$CellContext`SubstracteField, ContinuousAction -> True], 
             Number]},
           {"\<\"Time for Substaction / \[Mu]s:\"\>", 
            
            InputFieldBox[
             Dynamic[$CellContext`SubstracteTime, ContinuousAction -> True], 
             Number]},
           {"\<\"After Changing Convert Data Should Be Pressed\"\>", 
            "\[SpanFromLeft]"},
           {"", ""},
           {"\<\"Substraction Type:\"\>", 
            InterpretationBox[
             StyleBox[
              RowBox[{GridBox[{
                 {
                  RadioButtonBox[Dynamic[$CellContext`s], {1},
                   DefaultBaseStyle->"RadioButtonBar"], 
                  StyleBox["\<\"Nothing\"\>", "RadioButtonBarLabel",
                   StripOnInput->False]}
                },
                AutoDelete->False,
                BaselinePosition->{1, 2},
                
                GridBoxAlignment->{
                 "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
                
                GridBoxItemSize->{
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.21]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}}], "  ", GridBox[{
                 {
                  RadioButtonBox[Dynamic[$CellContext`s], {2},
                   DefaultBaseStyle->"RadioButtonBar"], 
                  StyleBox["\<\"Kinetics\"\>", "RadioButtonBarLabel",
                   StripOnInput->False]}
                },
                AutoDelete->False,
                BaselinePosition->{1, 2},
                
                GridBoxAlignment->{
                 "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
                
                GridBoxItemSize->{
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.21]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}}], "  ", GridBox[{
                 {
                  RadioButtonBox[Dynamic[$CellContext`s], {3},
                   DefaultBaseStyle->"RadioButtonBar"], 
                  StyleBox["\<\"Spectrum\"\>", "RadioButtonBarLabel",
                   StripOnInput->False]}
                },
                AutoDelete->False,
                BaselinePosition->{1, 2},
                
                GridBoxAlignment->{
                 "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
                
                GridBoxItemSize->{
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.21]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}}]}], "Deploy"],
             RadioButtonBar[
              Dynamic[$CellContext`s], {
              1 -> "Nothing", 2 -> "Kinetics", 3 -> "Spectrum"}]]},
           {"", ""},
           {"\<\"Off-Resonance Field / G:\"\>", 
            DynamicBox[ToBoxes[
              Part[
               StringDrop[
                Part[$CellContext`fileDataOffRes, 1], 8], 1], StandardForm],
             ImageSizeCache->{79., {1., 8.}}]},
           {"\<\"Do Not Want To Substracte Off-Resonance?\"\>", 
            CheckboxBox[Dynamic[$CellContext`offres], {1, 2}]},
           {"\<\"After Changing Convert Data Should Be Pressed\"\>", 
            "\[SpanFromLeft]"},
           {"", ""},
           {"\<\"Time Of The Maximum / \[Mu]s: \"\>", 
            DynamicBox[ToBoxes[$CellContext`TimeIn, StandardForm],
             ImageSizeCache->{32., {0., 7.}}]},
           {"", ""},
           {
            ButtonBox[
             StyleBox["\<\"Convert Data\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             Appearance->Automatic,
             
             ButtonFunction:>{$CellContext`\:0421licker = 
                1; $CellContext`\:0421licker2 = 1; $CellContext`\:0421licker4 = 
                0; If[
                 And[Head[$CellContext`fileData] == List, StringStartsQ[
                    Part[$CellContext`fileData, 1, 1], "%"] == 
                  
                  True, $CellContext`SubstracteField >= \
$CellContext`StartField, $CellContext`SubstracteField <= \
$CellContext`EndField, $CellContext`SubstracteTime >= \
$CellContext`TimeResolution, $CellContext`SubstracteTime <= \
$CellContext`RecordLength], {
                 If[$CellContext`CheckQuestion == 
                    False, $CellContext`datafield = 
                    Table[$CellContext`i, {$CellContext`i, \
$CellContext`StartField, $CellContext`StartField + ($CellContext`FieldPoints - 
                    1) $CellContext`FieldResolution, \
$CellContext`FieldResolution}], $CellContext`datafield = Reverse[
                    
                    Table[$CellContext`i, {$CellContext`i, \
$CellContext`StartField, $CellContext`StartField + ($CellContext`FieldPoints - 
                    1) $CellContext`FieldResolution, \
$CellContext`FieldResolution}]]]; 
                  If[$CellContext`oldnew == 1, {
                    If[Length[$CellContext`fileData]/($CellContext`\
totalpointsinonescan + $CellContext`droplines) == 1, 
                    
                    If[$CellContext`CheckQuestion == 
                    False, $CellContext`fileDataTR = Drop[
                    
                    Drop[$CellContext`fileData, $CellContext`droplines], \
$CellContext`RecordLength + 1], $CellContext`fileDataTR = Drop[
                    
                    Drop[$CellContext`fileData, $CellContext`droplines], \
$CellContext`RecordLength + 1]], 
                    
                    If[$CellContext`CheckQuestion == 
                    False, $CellContext`fileDataTR = Drop[
                    
                    Drop[$CellContext`fileData, $CellContext`todrop], \
$CellContext`RecordLength + 1], $CellContext`fileDataTR = Drop[
                    
                    Drop[$CellContext`fileData, $CellContext`todrop], \
$CellContext`RecordLength + 1]]]; 
                    If[Length[$CellContext`fileData]/($CellContext`\
totalpointsinonescan + $CellContext`droplines) == 1, 
                    
                    If[$CellContext`CheckQuestion == 
                    False, $CellContext`fileDataOffRes = Take[
                    
                    Drop[$CellContext`fileData, $CellContext`droplines], \
$CellContext`RecordLength + 1], $CellContext`fileDataOffRes = Take[
                    
                    Drop[$CellContext`fileData, $CellContext`droplines], \
$CellContext`RecordLength + 1]], 
                    
                    If[$CellContext`CheckQuestion == 
                    False, $CellContext`fileDataOffRes = Take[
                    
                    Drop[$CellContext`fileData, $CellContext`todrop], \
$CellContext`RecordLength + 1], $CellContext`fileDataOffRes = Take[
                    
                    Drop[$CellContext`fileData, $CellContext`todrop], \
$CellContext`RecordLength + 1]]]; Null}, {
                    If[$CellContext`CheckQuestion == 
                    False, $CellContext`fileDataTR = Drop[
                    
                    Drop[$CellContext`fileData, $CellContext`droplines], \
-($CellContext`RecordLength + 1)], $CellContext`fileDataTR = Drop[
                    
                    Drop[$CellContext`fileData, $CellContext`droplines], \
-($CellContext`RecordLength + 1)]]; $CellContext`fileDataOffRes = 
                    Take[$CellContext`fileData, -($CellContext`RecordLength + 
                    1)]; Null}]; Which[$CellContext`offres == 1, 
                    
                    Module[{$CellContext`dataKineticsTemp}, \
$CellContext`dataKineticsTemp = ParallelMap[Drop[#, 1]& , 
                    Partition[
                    
                    Flatten[$CellContext`fileDataTR], \
$CellContext`RecordLength + 1]]; $CellContext`dataKinetics = 
                    ParallelMap[# - Flatten[
                    
                    Drop[$CellContext`fileDataOffRes, 
                    1]]& , $CellContext`dataKineticsTemp]; 
                    Null], $CellContext`offres == 2, 
                    
                    Module[{$CellContext`dataKineticsTemp}, \
$CellContext`dataKineticsTemp = ParallelMap[Drop[#, 1]& , 
                    Partition[
                    
                    Flatten[$CellContext`fileDataTR], \
$CellContext`RecordLength + 
                    1]]; $CellContext`dataKinetics = \
$CellContext`dataKineticsTemp; Null]]; $CellContext`dataTime = 
                   Table[$CellContext`i, {$CellContext`i, \
$CellContext`TimeResolution, $CellContext`RecordLength \
$CellContext`TimeResolution, $CellContext`TimeResolution}]; \
$CellContext`Field = $CellContext`StartField; $CellContext`temp = \
$CellContext`FieldResolution; $CellContext`dataResample = 
                   ArrayResample[$CellContext`dataKinetics, {100, 
                    500}]; $CellContext`TimeIn = Part[$CellContext`dataTime, 
                    If[Length[
                    Position[$CellContext`dataKinetics, 
                    Max[
                    Abs[$CellContext`dataKinetics]]]] == 0, 
                    Part[
                    Position[-$CellContext`dataKinetics, 
                    Max[
                    Abs[$CellContext`dataKinetics]]], 1, 2], 
                    Part[
                    Position[$CellContext`dataKinetics, 
                    Max[
                    Abs[$CellContext`dataKinetics]]], 1, 
                    2]]]; $CellContext`TimeOut = 
                   Part[$CellContext`dataTime, -1]; If[Mean[
                    Take[
                    
                    Part[$CellContext`dataKinetics, 
                    IntegerPart[($CellContext`SubstracteField - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1], 15]] > 
                    0, $CellContext`dataKineticsCorr = 
                    Map[# - Part[$CellContext`dataKinetics, 
                    IntegerPart[($CellContext`SubstracteField - \
$CellContext`StartField)/$CellContext`FieldResolution] + 
                    1]& , $CellContext`dataKinetics], \
$CellContext`dataKineticsCorr = 
                    Map[# - Part[$CellContext`dataKinetics, 
                    IntegerPart[($CellContext`SubstracteField - \
$CellContext`StartField)/$CellContext`FieldResolution] + 
                    1]& , $CellContext`dataKinetics]]; \
$CellContext`dataResampleCorr = 
                   ArrayResample[$CellContext`dataKineticsCorr, {100, 
                    500}]; $CellContext`dataKineticsCorrField = Transpose[
                    
                    Map[# - Part[$CellContext`dataKinetics, All, 
                    IntegerPart[($CellContext`SubstracteTime - \
$CellContext`TimeResolution)/$CellContext`TimeResolution] + 1]& , 
                    
                    Transpose[$CellContext`dataKinetics]]]; \
$CellContext`dataResampleCorrField = 
                   ArrayResample[$CellContext`dataKineticsCorrField, {100, 
                    500}]; Null}, {Which[
                    
                    Or[$CellContext`SubstracteField < \
$CellContext`StartField, $CellContext`SubstracteField > \
$CellContext`EndField], 
                    MessageDialog[
                    Style["Field for substraction is incorrect", 18, Black]], 
                    
                    Or[$CellContext`SubstracteTime < \
$CellContext`TimeResolution, $CellContext`SubstracteTime > \
$CellContext`RecordLength], 
                    MessageDialog[
                    Style["Time for substraction is incorrect", 18, Black]]]; 
                  Abort[]}, {MessageDialog[
                    Style["An incorrect file has been opened", 18, Black]]; 
                  Abort[]}]; Null},
             Evaluator->Automatic,
             FrameMargins->10,
             Method->"Queued"], ""},
           {"", ""}
          },
          AutoDelete->False,
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"],
        Background->RGBColor[0.985, 0.985, 0.985],
        FrameMargins->{{20, 20}, {15, 15}}], 
       PanelBox[
        TagBox[GridBox[{
           {
            PanelBox[
             TagBox[GridBox[{
                {
                 StyleBox["\<\"2D Spectrum:\\n\"\>",
                  StripOnInput->False,
                  FontWeight->Bold], "\[SpanFromLeft]"},
                {"\<\"Time Axis / Points:\"\>", 
                 
                 InputFieldBox[Dynamic[$CellContext`DesiredResolutionX], 
                  Number,
                  FieldSize->13]},
                {"\<\"Field Axis / Points:\"\>", 
                 
                 InputFieldBox[Dynamic[$CellContext`DesiredResolutionY], 
                  Number,
                  FieldSize->13]},
                {"", ""},
                {"\<\"Plot Explorer Function:\"\>", 
                 CheckboxBox[Dynamic[$CellContext`x$$], {1, 2}]},
                {"", ""},
                {"\<\"\"\>", 
                 ButtonBox[
                  StyleBox["\<\"Density Plot\"\>",
                   StripOnInput->False,
                   FontWeight->Bold],
                  Appearance->Automatic,
                  ButtonFunction:>{If[
                    And[
                    Head[$CellContext`fileData] == List, 
                    Head[$CellContext`dataKinetics] == List, StringStartsQ[
                    Part[$CellContext`fileData, 1, 1], "%"] == 
                    True], {$CellContext`\:0421licker4 = 1; 
                    If[$CellContext`CheckQuestion == False, 
                    
                    Which[$CellContext`s == 
                    1, $CellContext`GraphDensityPlot$$ = 
                    ListDensityPlot[$CellContext`dataKinetics, 
                    MaxPlotPoints -> {$CellContext`DesiredResolutionX, \
$CellContext`DesiredResolutionY}, PlotRange -> All, ColorFunction -> 
                    "Rainbow", PlotLegends -> Placed[
                    
                    BarLegend[{"Rainbow", {-1, 1}}, LegendMarkerSize -> 320, 
                    LegendMargins -> {{0, 0}, {32, 0}}], Right], 
                    DataRange -> {{
                    0, $CellContext`RecordLength \
$CellContext`TimeResolution}, {$CellContext`StartField/
                    1000, ($CellContext`StartField + \
$CellContext`RecordLengthField)/1000}}, 
                    FrameLabel -> {$CellContext`label, "Magnetic Field / kG"},
                     AspectRatio -> 1/1, ImageSize -> {400, 400}, LabelStyle -> 
                    Directive[14, Bold]], $CellContext`s == 
                    2, $CellContext`GraphDensityPlot$$ = 
                    ListDensityPlot[$CellContext`dataKineticsCorr, 
                    MaxPlotPoints -> {$CellContext`DesiredResolutionX, \
$CellContext`DesiredResolutionY}, PlotRange -> All, ColorFunction -> 
                    "Rainbow", PlotLegends -> Placed[
                    
                    BarLegend[{"Rainbow", {-1, 1}}, LegendMarkerSize -> 320, 
                    LegendMargins -> {{0, 0}, {32, 0}}], Right], 
                    DataRange -> {{
                    0, $CellContext`RecordLength \
$CellContext`TimeResolution}, {$CellContext`StartField/
                    1000, ($CellContext`StartField + \
$CellContext`RecordLengthField)/1000}}, 
                    FrameLabel -> {$CellContext`label, "Magnetic Field / kG"},
                     AspectRatio -> 1/1, ImageSize -> {400, 400}, LabelStyle -> 
                    Directive[14, Bold]], $CellContext`s == 
                    3, $CellContext`GraphDensityPlot$$ = 
                    ListDensityPlot[$CellContext`dataKineticsCorrField, 
                    MaxPlotPoints -> {$CellContext`DesiredResolutionX, \
$CellContext`DesiredResolutionY}, PlotRange -> All, ColorFunction -> 
                    "Rainbow", PlotLegends -> Placed[
                    
                    BarLegend[{"Rainbow", {-1, 1}}, LegendMarkerSize -> 350, 
                    LegendMargins -> {{0, 0}, {32, 0}}], Right], 
                    DataRange -> {{
                    0, $CellContext`RecordLength \
$CellContext`TimeResolution}, {$CellContext`StartField/
                    1000, ($CellContext`StartField + \
$CellContext`RecordLengthField)/1000}}, 
                    FrameLabel -> {$CellContext`label, "Magnetic Field / kG"},
                     AspectRatio -> 1/1, ImageSize -> {400, 400}, LabelStyle -> 
                    Directive[14, Bold]]], 
                    
                    Which[$CellContext`s == 
                    1, $CellContext`GraphDensityPlot$$ = ListDensityPlot[
                    Reverse[$CellContext`dataKinetics], 
                    MaxPlotPoints -> {$CellContext`DesiredResolutionX, \
$CellContext`DesiredResolutionY}, PlotRange -> All, ColorFunction -> 
                    "Rainbow", PlotLegends -> Placed[
                    
                    BarLegend[{"Rainbow", {-1, 1}}, LegendMarkerSize -> 320, 
                    LegendMargins -> {{0, 0}, {32, 0}}], Right], 
                    DataRange -> {{
                    0, $CellContext`RecordLength \
$CellContext`TimeResolution}, {$CellContext`StartField/
                    1000, ($CellContext`StartField + \
$CellContext`RecordLengthField)/1000}}, 
                    FrameLabel -> {$CellContext`label, "Magnetic Field / kG"},
                     AspectRatio -> 1/1, ImageSize -> {400, 400}, LabelStyle -> 
                    Directive[14, Bold]], $CellContext`s == 
                    2, $CellContext`GraphDensityPlot$$ = ListDensityPlot[
                    Reverse[$CellContext`dataKineticsCorr], 
                    MaxPlotPoints -> {$CellContext`DesiredResolutionX, \
$CellContext`DesiredResolutionY}, PlotRange -> All, ColorFunction -> 
                    "Rainbow", PlotLegends -> Placed[
                    
                    BarLegend[{"Rainbow", {-1, 1}}, LegendMarkerSize -> 320, 
                    LegendMargins -> {{0, 0}, {32, 0}}], Right], 
                    DataRange -> {{
                    
                    0, $CellContext`RecordLength \
$CellContext`TimeResolution}, {$CellContext`StartField/
                    1000, ($CellContext`StartField + \
$CellContext`RecordLengthField)/1000}}, 
                    FrameLabel -> {$CellContext`label, "Magnetic Field / kG"},
                     AspectRatio -> 1/1, ImageSize -> {400, 400}, LabelStyle -> 
                    Directive[14, Bold]], $CellContext`s == 
                    3, $CellContext`GraphDensityPlot$$ = ListDensityPlot[
                    Reverse[$CellContext`dataKineticsCorrField], 
                    MaxPlotPoints -> {$CellContext`DesiredResolutionX, \
$CellContext`DesiredResolutionY}, PlotRange -> All, ColorFunction -> 
                    "Rainbow", PlotLegends -> Placed[
                    
                    BarLegend[{"Rainbow", {-1, 1}}, LegendMarkerSize -> 320, 
                    LegendMargins -> {{0, 0}, {32, 0}}], Right], 
                    DataRange -> {{
                    0, $CellContext`RecordLength \
$CellContext`TimeResolution}, {$CellContext`StartField/
                    1000, ($CellContext`StartField + \
$CellContext`RecordLengthField)/1000}}, 
                    FrameLabel -> {$CellContext`label, "Magnetic Field / kG"},
                     AspectRatio -> 1/1, ImageSize -> {400, 400}, LabelStyle -> 
                    Directive[14, Bold]]]]}, {MessageDialog[
                    Style["An incorrect file has been opened", 18, Black]]; 
                    Abort[]}, {MessageDialog[
                    Style["An incorrect file has been opened", 18, Black]]; 
                    Abort[]}]; Null},
                  Evaluator->Automatic,
                  FrameMargins->10,
                  Method->"Queued"]},
                {"\<\"\"\>", 
                 ButtonBox[
                  StyleBox["\<\"Clear Figure\"\>",
                   StripOnInput->False,
                   FontWeight->Bold],
                  Appearance->Automatic,
                  ButtonFunction:>{$CellContext`\:0421licker4 = 0; Null},
                  Evaluator->Automatic,
                  FrameMargins->10,
                  Method->"Queued"]}
               },
               AutoDelete->False,
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              "Grid"],
             Background->RGBColor[0.985, 0.985, 0.985],
             FrameMargins->{{20, 10}, {5, 5}}]}
          },
          AutoDelete->False,
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"],
        Background->RGBColor[0.985, 0.985, 0.985],
        FrameMargins->{{20, 10}, {5, 5}}], 
       PanelBox[
        TagBox[GridBox[{
           {
            PanelBox[
             TagBox[GridBox[{
                {
                 StyleBox["\<\"Cross-Sections:\"\>",
                  StripOnInput->False,
                  FontWeight->Bold], "\[SpanFromLeft]"},
                {"", ""},
                {"\<\"Plot Explorer Function:\"\>", 
                 CheckboxBox[Dynamic[$CellContext`z$$], {1, 2}]},
                {"", ""},
                {"\<\"2D Graph:\"\>", 
                 CheckboxBox[Dynamic[$CellContext`d2$$], {1, 2}]},
                {"", ""},
                {"\<\"\"\>", 
                 ButtonBox[
                  StyleBox["\<\"Cross-Section Plot\"\>",
                   StripOnInput->False,
                   FontWeight->Bold],
                  Appearance->Automatic,
                  ButtonFunction:>($CellContext`\:0421licker3 = 1; If[
                    And[
                    Head[$CellContext`fileData] == List, 
                    Head[$CellContext`dataKinetics] == List, StringStartsQ[
                    Part[$CellContext`fileData, 1, 1], "%"] == 
                    True, $CellContext`\:0421licker == 1, 
                    Or[
                    NumericQ[$CellContext`TimeIn] == 
                    True, $CellContext`TimeIn != 
                    Null]], {$CellContext`manip1$$ = Manipulate[
                    ListLinePlot[
                    Transpose[{$CellContext`datafield, 
                    
                    Part[$CellContext`dataKinetics, All, 
                    
                    IntegerPart[($CellContext`TimeIn - \
$CellContext`TimeResolution)/$CellContext`TimeResolution] + 1]}], PlotRange -> 
                    All, Frame -> True, 
                    FrameLabel -> {"Mangetic Field / G", "Intensity / a. u."},
                     GridLines -> Automatic, GridLinesStyle -> 
                    Directive[LightGray, Dashed], 
                    ImageSize -> {380, 
                    220}], {$CellContext`TimeIn, $CellContext`TimeResolution, \
$CellContext`TimeResolution $CellContext`RecordLength, \
$CellContext`TimeResolution, Appearance -> "Open", TrackingFunction -> (If[
                    
                    And[# >= $CellContext`TimeResolution, # <= \
$CellContext`TimeResolution $CellContext`RecordLength], $CellContext`TimeIn = \
#, $CellContext`TimeIn = $CellContext`TimeResolution]& )}, ContinuousAction -> 
                    False, LocalizeVariables -> False, Paneled -> 
                    False]; $CellContext`manip1Corr$$ = Manipulate[
                    ListLinePlot[
                    Transpose[{$CellContext`datafield, 
                    
                    Part[$CellContext`dataKineticsCorr, All, 
                    IntegerPart[($CellContext`TimeIn - \
$CellContext`TimeResolution)/$CellContext`TimeResolution] + 1]}], PlotRange -> 
                    All, Frame -> True, 
                    FrameLabel -> {"Mangetic Field / G", "Intensity / a. u."},
                     GridLines -> Automatic, GridLinesStyle -> 
                    Directive[LightGray, Dashed], 
                    ImageSize -> {380, 
                    220}], {$CellContext`TimeIn, $CellContext`TimeResolution, \
$CellContext`TimeResolution $CellContext`RecordLength, \
$CellContext`TimeResolution, Appearance -> "Open", TrackingFunction -> (If[
                    
                    And[# >= $CellContext`TimeResolution, # <= \
$CellContext`TimeResolution $CellContext`RecordLength], $CellContext`TimeIn = \
#, $CellContext`TimeIn = $CellContext`TimeResolution]& )}, ContinuousAction -> 
                    False, LocalizeVariables -> False, Paneled -> 
                    False]; $CellContext`manip1CorrField$$ = Manipulate[
                    ListLinePlot[
                    Transpose[{$CellContext`datafield, 
                    Part[$CellContext`dataKineticsCorrField, All, 
                    IntegerPart[($CellContext`TimeIn - \
$CellContext`TimeResolution)/$CellContext`TimeResolution] + 1]}], PlotRange -> 
                    All, Frame -> True, 
                    FrameLabel -> {"Mangetic Field / G", "Intensity / a. u."},
                     GridLines -> Automatic, GridLinesStyle -> 
                    Directive[LightGray, Dashed], 
                    ImageSize -> {380, 
                    220}], {$CellContext`TimeIn, $CellContext`TimeResolution, \
$CellContext`TimeResolution $CellContext`RecordLength, \
$CellContext`TimeResolution, Appearance -> "Open", TrackingFunction -> (If[
                    
                    And[# >= $CellContext`TimeResolution, # <= \
$CellContext`TimeResolution $CellContext`RecordLength], $CellContext`TimeIn = \
#, $CellContext`TimeIn = $CellContext`TimeResolution]& )}, ContinuousAction -> 
                    False, LocalizeVariables -> False, Paneled -> 
                    False]; $CellContext`manip1PE$$ = Manipulate[
                    $CellContext`PlotExplorer[
                    ListLinePlot[
                    Transpose[{$CellContext`datafield, 
                    
                    Part[$CellContext`dataKinetics, All, 
                    IntegerPart[($CellContext`TimeIn - \
$CellContext`TimeResolution)/$CellContext`TimeResolution] + 1]}], PlotRange -> 
                    All, Frame -> True, 
                    FrameLabel -> {"Mangetic Field / G", "Intensity / a. u."},
                     GridLines -> Automatic, GridLinesStyle -> 
                    Directive[LightGray, Dashed], 
                    ImageSize -> {380, 
                    220}]], {$CellContext`TimeIn, \
$CellContext`TimeResolution, $CellContext`TimeResolution \
$CellContext`RecordLength, $CellContext`TimeResolution, Appearance -> "Open", 
                    TrackingFunction -> (If[
                    
                    And[# >= $CellContext`TimeResolution, # <= \
$CellContext`TimeResolution $CellContext`RecordLength], $CellContext`TimeIn = \
#, $CellContext`TimeIn = $CellContext`TimeResolution]& )}, ContinuousAction -> 
                    False, LocalizeVariables -> False, Paneled -> 
                    False]; $CellContext`manip1PECorr$$ = Manipulate[
                    $CellContext`PlotExplorer[
                    ListLinePlot[
                    Transpose[{$CellContext`datafield, 
                    
                    Part[$CellContext`dataKineticsCorr, All, 
                    IntegerPart[($CellContext`TimeIn - \
$CellContext`TimeResolution)/$CellContext`TimeResolution] + 1]}], PlotRange -> 
                    All, Frame -> True, 
                    FrameLabel -> {"Mangetic Field / G", "Intensity / a. u."},
                     GridLines -> Automatic, GridLinesStyle -> 
                    Directive[LightGray, Dashed], 
                    ImageSize -> {380, 
                    220}]], {$CellContext`TimeIn, \
$CellContext`TimeResolution, $CellContext`TimeResolution \
$CellContext`RecordLength, $CellContext`TimeResolution, Appearance -> "Open", 
                    TrackingFunction -> (If[
                    
                    And[# >= $CellContext`TimeResolution, # <= \
$CellContext`TimeResolution $CellContext`RecordLength], $CellContext`TimeIn = \
#, $CellContext`TimeIn = $CellContext`TimeResolution]& )}, ContinuousAction -> 
                    False, LocalizeVariables -> False, Paneled -> 
                    False]; $CellContext`manip1PECorrField$$ = Manipulate[
                    $CellContext`PlotExplorer[
                    ListLinePlot[
                    Transpose[{$CellContext`datafield, 
                    
                    Part[$CellContext`dataKineticsCorrField, All, 
                    IntegerPart[($CellContext`TimeIn - \
$CellContext`TimeResolution)/$CellContext`TimeResolution] + 1]}], PlotRange -> 
                    All, Frame -> True, 
                    FrameLabel -> {"Mangetic Field / G", "Intensity / a. u."},
                     GridLines -> Automatic, GridLinesStyle -> 
                    Directive[LightGray, Dashed], 
                    ImageSize -> {380, 
                    220}]], {$CellContext`TimeIn, \
$CellContext`TimeResolution, $CellContext`TimeResolution \
$CellContext`RecordLength, $CellContext`TimeResolution, Appearance -> "Open", 
                    TrackingFunction -> (If[
                    
                    And[# >= $CellContext`TimeResolution, # <= \
$CellContext`TimeResolution $CellContext`RecordLength], $CellContext`TimeIn = \
#, $CellContext`TimeIn = $CellContext`TimeResolution]& )}, ContinuousAction -> 
                    False, LocalizeVariables -> False, Paneled -> 
                    False]; $CellContext`logplot$$ = 1; 
                    Which[$CellContext`logplot$$ == 1, $CellContext`manip2$$ = 
                    Manipulate[
                    ListLinePlot[
                    Transpose[{$CellContext`dataTime, 
                    
                    Part[$CellContext`dataKinetics, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, All]}], PlotRange -> 
                    All, Frame -> True, 
                    FrameLabel -> {$CellContext`label, "Intensity / a. u."}, 
                    GridLines -> Automatic, GridLinesStyle -> 
                    Directive[LightGray, Dashed], 
                    ImageSize -> {380, 
                    220}], {$CellContext`Field, $CellContext`StartField, \
$CellContext`StartField + $CellContext`RecordLengthField, \
$CellContext`FieldResolution, Appearance -> "Open", TrackingFunction -> (If[
                    
                    And[# >= $CellContext`StartField, # <= \
$CellContext`StartField + $CellContext`RecordLengthField], $CellContext`Field = \
#, $CellContext`Field = $CellContext`StartField]& )}, ContinuousAction -> 
                    False, LocalizeVariables -> False, Paneled -> 
                    False], $CellContext`logplot$$ == 2, "Negative Signal"]; 
                    Which[$CellContext`logplot$$ == 
                    1, $CellContext`manip2Corr$$ = Manipulate[
                    ListLinePlot[
                    Transpose[{$CellContext`dataTime, 
                    
                    Part[$CellContext`dataKineticsCorr, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, All]}], PlotRange -> 
                    All, Frame -> True, 
                    FrameLabel -> {$CellContext`label, "Intensity / a. u."}, 
                    GridLines -> Automatic, GridLinesStyle -> 
                    Directive[LightGray, Dashed], 
                    ImageSize -> {380, 
                    220}], {$CellContext`Field, $CellContext`StartField, \
$CellContext`StartField + $CellContext`RecordLengthField, \
$CellContext`FieldResolution, Appearance -> "Open", TrackingFunction -> (If[
                    
                    And[# >= $CellContext`StartField, # <= \
$CellContext`StartField + $CellContext`RecordLengthField], $CellContext`Field = \
#, $CellContext`Field = $CellContext`StartField]& )}, ContinuousAction -> 
                    False, LocalizeVariables -> False, Paneled -> 
                    False], $CellContext`logplot$$ == 2, "Negative Signal"]; 
                    Which[$CellContext`logplot$$ == 
                    1, $CellContext`manip2CorrField$$ = Manipulate[
                    ListLinePlot[
                    Transpose[{$CellContext`dataTime, 
                    
                    Part[$CellContext`dataKineticsCorrField, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, All]}], PlotRange -> 
                    All, Frame -> True, 
                    FrameLabel -> {$CellContext`label, "Intensity / a. u."}, 
                    GridLines -> Automatic, GridLinesStyle -> 
                    Directive[LightGray, Dashed], 
                    ImageSize -> {380, 
                    220}], {$CellContext`Field, $CellContext`StartField, \
$CellContext`StartField + $CellContext`RecordLengthField, \
$CellContext`FieldResolution, Appearance -> "Open", TrackingFunction -> (If[
                    
                    And[# >= $CellContext`StartField, # <= \
$CellContext`StartField + $CellContext`RecordLengthField], $CellContext`Field = \
#, $CellContext`Field = $CellContext`StartField]& )}, ContinuousAction -> 
                    False, LocalizeVariables -> False, Paneled -> 
                    False], $CellContext`logplot$$ == 
                    2, $CellContext`manip2CorrField$$ = Manipulate[
                    ListLogPlot[
                    Transpose[{$CellContext`dataTime, 
                    Abs[
                    
                    Part[$CellContext`dataKineticsCorrField, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, All]]}], Frame -> 
                    True, PlotRange -> {All, {0.001, All}}, 
                    FrameLabel -> {$CellContext`label, 
                    "Log[Abs[Intensity]] / a. u."}, GridLines -> Automatic, 
                    GridLinesStyle -> Directive[LightGray, Dashed], 
                    ImageSize -> {380, 220}, Joined -> 
                    True], {$CellContext`Field, $CellContext`StartField, \
$CellContext`StartField + $CellContext`RecordLengthField, \
$CellContext`FieldResolution, Appearance -> "Open", TrackingFunction -> (If[
                    
                    And[# >= $CellContext`StartField, # <= \
$CellContext`StartField + $CellContext`RecordLengthField], $CellContext`Field = \
#, $CellContext`Field = $CellContext`StartField]& )}, ContinuousAction -> 
                    False, LocalizeVariables -> False, Paneled -> 
                    False]]; $CellContext`manip2PE$$ = Manipulate[
                    $CellContext`PlotExplorer[
                    ListLinePlot[
                    Transpose[{$CellContext`dataTime, 
                    
                    Part[$CellContext`dataKinetics, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, All]}], PlotRange -> 
                    All, Frame -> True, 
                    FrameLabel -> {$CellContext`label, "Intensity / a. u."}, 
                    GridLines -> Automatic, GridLinesStyle -> 
                    Directive[LightGray, Dashed], 
                    ImageSize -> {380, 
                    220}]], {$CellContext`Field, $CellContext`StartField, \
$CellContext`StartField + $CellContext`RecordLengthField, \
$CellContext`FieldResolution, Appearance -> "Open", TrackingFunction -> (If[
                    
                    And[# >= $CellContext`StartField, # <= \
$CellContext`StartField + $CellContext`RecordLengthField], $CellContext`Field = \
#, $CellContext`Field = $CellContext`StartField]& )}, ContinuousAction -> 
                    False, LocalizeVariables -> False, Paneled -> 
                    False]; $CellContext`manip2PECorr$$ = Manipulate[
                    $CellContext`PlotExplorer[
                    ListLinePlot[
                    Transpose[{$CellContext`dataTime, 
                    
                    Part[$CellContext`dataKineticsCorr, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, All]}], PlotRange -> 
                    All, Frame -> True, 
                    FrameLabel -> {$CellContext`label, "Intensity / a. u."}, 
                    GridLines -> Automatic, GridLinesStyle -> 
                    Directive[LightGray, Dashed], 
                    ImageSize -> {380, 
                    220}]], {$CellContext`Field, $CellContext`StartField, \
$CellContext`StartField + $CellContext`RecordLengthField, \
$CellContext`FieldResolution, Appearance -> "Open", TrackingFunction -> (If[
                    
                    And[# >= $CellContext`StartField, # <= \
$CellContext`StartField + $CellContext`RecordLengthField], $CellContext`Field = \
#, $CellContext`Field = Dynamic[$CellContext`StartField]]& )}, 
                    ContinuousAction -> False, LocalizeVariables -> False, 
                    Paneled -> False]; $CellContext`manip2PECorrField$$ = 
                    Manipulate[
                    $CellContext`PlotExplorer[
                    ListLinePlot[
                    Transpose[{$CellContext`dataTime, 
                    
                    Part[$CellContext`dataKineticsCorrField, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, All]}], PlotRange -> 
                    All, Frame -> True, 
                    FrameLabel -> {$CellContext`label, "Intensity / a. u."}, 
                    GridLines -> Automatic, GridLinesStyle -> 
                    Directive[LightGray, Dashed], 
                    ImageSize -> {380, 
                    220}]], {$CellContext`Field, $CellContext`StartField, \
$CellContext`StartField + $CellContext`RecordLengthField, \
$CellContext`FieldResolution, Appearance -> "Open", TrackingFunction -> (If[
                    
                    And[# >= $CellContext`StartField, # <= \
$CellContext`StartField + $CellContext`RecordLengthField], $CellContext`Field = \
#, $CellContext`Field = $CellContext`StartField]& )}, ContinuousAction -> 
                    False, LocalizeVariables -> False, Paneled -> 
                    False]; $CellContext`GraphDensityPlotManip$$ = Manipulate[
                    
                    ListDensityPlot[$CellContext`dataResample, 
                    MaxPlotPoints -> {$CellContext`plot2dSliceRes, \
$CellContext`plot2dSliceRes}, PlotRange -> All, ColorFunction -> "Rainbow", 
                    PlotLegends -> Placed[
                    
                    BarLegend[{"Rainbow", {-1, 1}}, LegendMarkerSize -> 180, 
                    LegendMargins -> {{0, 0}, {32, 0}}], Right], 
                    DataRange -> {{$CellContext`TimeResolution, \
$CellContext`RecordLength $CellContext`TimeResolution}, \
{$CellContext`StartField/
                    1000, ($CellContext`StartField + \
$CellContext`RecordLengthField)/1000}}, 
                    FrameLabel -> {$CellContext`label, "Magnetic Field / kG"},
                     AspectRatio -> 1/1, ImageSize -> {350, 350}, LabelStyle -> 
                    Directive[12, Bold], 
                    Mesh -> {{$CellContext`TimeIn}, {$CellContext`Field/
                    1000}}, MeshStyle -> {
                    Directive[Red, Dashed], 
                    Directive[Red, Dashed]}], ContinuousAction -> False, 
                    LocalizeVariables -> False, Paneled -> 
                    False]; $CellContext`GraphDensityPlotManipCorr$$ = 
                    Manipulate[
                    
                    ListDensityPlot[$CellContext`dataResampleCorr, 
                    MaxPlotPoints -> {$CellContext`plot2dSliceRes, \
$CellContext`plot2dSliceRes}, PlotRange -> All, ColorFunction -> "Rainbow", 
                    PlotLegends -> Placed[
                    
                    BarLegend[{"Rainbow", {-1, 1}}, LegendMarkerSize -> 180, 
                    LegendMargins -> {{0, 0}, {32, 0}}], Right], 
                    DataRange -> {{$CellContext`TimeResolution, \
$CellContext`RecordLength $CellContext`TimeResolution}, \
{$CellContext`StartField/
                    1000, ($CellContext`StartField + \
$CellContext`RecordLengthField)/1000}}, 
                    FrameLabel -> {$CellContext`label, "Magnetic Field / kG"},
                     AspectRatio -> 1/1, ImageSize -> {350, 350}, LabelStyle -> 
                    Directive[12, Bold], 
                    Mesh -> {{$CellContext`TimeIn}, {$CellContext`Field/
                    1000}}, MeshStyle -> {
                    Directive[Red, Dashed], 
                    Directive[Red, Dashed]}], ContinuousAction -> False, 
                    LocalizeVariables -> False, Paneled -> 
                    False]; $CellContext`GraphDensityPlotManipCorrField$$ = 
                    Manipulate[
                    
                    ListDensityPlot[$CellContext`dataResampleCorrField, 
                    MaxPlotPoints -> {$CellContext`plot2dSliceRes, \
$CellContext`plot2dSliceRes}, PlotRange -> All, ColorFunction -> "Rainbow", 
                    PlotLegends -> Placed[
                    
                    BarLegend[{"Rainbow", {-1, 1}}, LegendMarkerSize -> 180, 
                    LegendMargins -> {{0, 0}, {32, 0}}], Right], 
                    DataRange -> {{
                    0, $CellContext`RecordLength \
$CellContext`TimeResolution}, {$CellContext`StartField/
                    
                    1000, ($CellContext`StartField + \
$CellContext`RecordLengthField)/1000}}, 
                    FrameLabel -> {$CellContext`label, "Magnetic Field / kG"},
                     AspectRatio -> 1/1, ImageSize -> {350, 350}, LabelStyle -> 
                    Directive[12, Bold], 
                    Mesh -> {{$CellContext`TimeIn}, {$CellContext`Field/
                    1000}}, MeshStyle -> {
                    Directive[Red, Dashed], 
                    Directive[Red, Dashed]}], ContinuousAction -> False, 
                    LocalizeVariables -> False, Paneled -> False]; Null}, {
                    If[$CellContext`\:0421licker == 0, 
                    MessageDialog[
                    Style[
                    "Convert data button has not been pressed", 18, Black]], 
                    MessageDialog[
                    Style["An incorrect file has been opened", 18, Black]]]; 
                    Abort[]}, {MessageDialog[
                    Style["An incorrect file has been opened", 18, Black]]; 
                    Abort[]}]; Null),
                  Evaluator->Automatic,
                  FrameMargins->10,
                  Method->"Queued"]},
                {"\<\"\"\>", 
                 ButtonBox[
                  StyleBox["\<\"Clear Figures\"\>",
                   StripOnInput->False,
                   FontWeight->Bold],
                  Appearance->Automatic,
                  ButtonFunction:>{$CellContext`\:0421licker3 = 0; Null},
                  Evaluator->Automatic,
                  FrameMargins->10,
                  Method->"Queued"]},
                {"", ""},
                {"", ""},
                {"\<\"Choose File Name to Save:\"\>", 
                 
                 TemplateBox[{
                  Dynamic[$CellContext`f3$$],"Save",All,Automatic,DynamicBox[
                    FEPrivate`FrontEndResource["FEStrings", "BrowseLabel"]],
                   "DialogBox",{"FileNameSetter"},Automatic,0,{100, 40}},
                  "FileNameSetterBoxes4"]},
                {"", ""},
                {"\<\"Please, Use Experimental_Data Folder\"\>", 
                 "\[SpanFromLeft]"},
                {"", ""},
                {"\<\"\"\>", 
                 ButtonBox[
                  StyleBox["\<\"Save Data\"\>",
                   StripOnInput->False,
                   FontWeight->Bold],
                  Appearance->Automatic,
                  ButtonFunction:>{If[
                    And[
                    Head[$CellContext`f3$$] == String, 
                    Head[$CellContext`fileData] == List, 
                    Head[$CellContext`dataKinetics] == List, StringStartsQ[
                    Part[$CellContext`fileData, 1, 1], "%"] == True], {
                    If[$CellContext`s == 1, {Export[
                    StringJoin[$CellContext`f3$$, "_kinetic", ".csv"], 
                    Join[{
                    StringJoin["Field / G: ", 
                    ToString[$CellContext`Field]], ""}, 
                    Transpose[{$CellContext`dataTime, 
                    
                    Part[$CellContext`dataKinetics, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, All]}]], "CSV"]; 
                    Export[
                    StringJoin[$CellContext`f3$$, "_spectrum", ".csv"], 
                    Join[{
                    StringJoin["Time / mcs: ", 
                    ToString[$CellContext`TimeIn]], ""}, 
                    Transpose[{$CellContext`datafield, 
                    
                    Part[$CellContext`dataKinetics, All, 
                    IntegerPart[($CellContext`TimeIn - \
$CellContext`TimeResolution)/$CellContext`TimeResolution] + 1]}]], "CSV"]; 
                    Null}]; If[$CellContext`s == 2, {Export[
                    
                    StringJoin[$CellContext`f3$$, "_kinetic_substrated_field",
                     ".csv"], 
                    Join[{
                    StringJoin["Field / G: ", 
                    ToString[$CellContext`Field]], ""}, {
                    StringJoin["Substracted Field / G: ", 
                    ToString[$CellContext`SubstracteField]], ""}, 
                    Transpose[{$CellContext`dataTime, 
                    
                    Part[$CellContext`dataKineticsCorr, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, All]}]], "CSV"]; 
                    Export[
                    
                    StringJoin[$CellContext`f3$$, 
                    "_spectrum_substrated_field", ".csv"], 
                    Join[{
                    StringJoin["Time / mcs: ", 
                    ToString[$CellContext`TimeIn]], ""}, {
                    StringJoin["Substracted Field / G: ", 
                    ToString[$CellContext`SubstracteField]], ""}, 
                    Transpose[{$CellContext`datafield, 
                    
                    Part[$CellContext`dataKineticsCorr, All, 
                    IntegerPart[($CellContext`TimeIn - \
$CellContext`TimeResolution)/$CellContext`TimeResolution] + 1]}]], "CSV"]; 
                    Null}]; If[$CellContext`s == 3, {Export[
                    
                    StringJoin[$CellContext`f3$$, "_kinetic_substrated_time", 
                    ".csv"], 
                    Join[{
                    StringJoin["Field / G: ", 
                    ToString[$CellContext`Field]], ""}, {
                    StringJoin["Substracted Time / mcs: ", 
                    ToString[$CellContext`SubstracteTime]], ""}, 
                    Transpose[{$CellContext`dataTime, 
                    
                    Part[$CellContext`dataKineticsCorrField, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, All]}]], "CSV"]; 
                    Export[
                    
                    StringJoin[$CellContext`f3$$, "_spectrum_substrated_time",
                     ".csv"], 
                    Join[{
                    StringJoin["Time / mcs: ", 
                    ToString[$CellContext`TimeIn]], ""}, {
                    StringJoin["Substracted Time / mcs: ", 
                    ToString[$CellContext`SubstracteTime]], ""}, 
                    Transpose[{$CellContext`datafield, 
                    Part[$CellContext`dataKineticsCorrField, All, 
                    IntegerPart[($CellContext`TimeIn - \
$CellContext`TimeResolution)/$CellContext`TimeResolution] + 1]}]], "CSV"]; 
                    Null}]; Null}, {{MessageDialog[
                    Style["Path to file has not been chosen", 18, Black]]; 
                    Abort[]}}, {{MessageDialog[
                    Style["Path to file has not been chosen", 18, Black]]; 
                    Abort[]}}]; Null},
                  Evaluator->Automatic,
                  FrameMargins->10,
                  Method->"Queued"]},
                {"\<\"\"\>", 
                 ButtonBox[
                  StyleBox["\<\"Array Export\"\>",
                   StripOnInput->False,
                   FontWeight->Bold],
                  Appearance->Automatic,
                  ButtonFunction:>{If[
                    And[
                    Head[$CellContext`f3$$] == String, 
                    Head[$CellContext`fileData] == List, 
                    Head[$CellContext`dataKinetics] == List, StringStartsQ[
                    Part[$CellContext`fileData, 1, 1], "%"] == True], {
                    If[$CellContext`s == 1, {Export[
                    StringJoin[$CellContext`f3$$, "_table", ".csv"], 
                    Transpose[
                    Partition[
                    Flatten[
                    MapThread[List, {
                    Join[{0}, $CellContext`datafield], 
                    
                    Prepend[$CellContext`dataKinetics, \
$CellContext`dataTime]}], 2], Length[
                    Part[
                    Prepend[$CellContext`dataKinetics, $CellContext`dataTime],
                     1]] + 1]], "CSV"]; Null}]; 
                    If[$CellContext`s == 2, {Export[
                    StringJoin[$CellContext`f3$$, "_table", ".csv"], 
                    Transpose[
                    Partition[
                    Flatten[
                    MapThread[List, {
                    Join[{0}, $CellContext`datafield], 
                    
                    Prepend[$CellContext`dataKinetics, \
$CellContext`dataTime]}], 2], Length[
                    Part[
                    
                    Prepend[$CellContext`dataKineticsCorr, \
$CellContext`dataTime], 1]] + 1]], "CSV"]; Null}]; 
                    If[$CellContext`s == 3, {Export[
                    StringJoin[$CellContext`f3$$, "_table", ".csv"], 
                    Transpose[
                    Partition[
                    Flatten[
                    MapThread[List, {
                    Join[{0}, $CellContext`datafield], 
                    
                    Prepend[$CellContext`dataKinetics, \
$CellContext`dataTime]}], 2], Length[
                    Part[
                    
                    Prepend[$CellContext`dataKineticsCorrField, \
$CellContext`dataTime], 1]] + 1]], "CSV"]; Null}]; Null}, {MessageDialog[
                    Style["Path to file has not been chosen", 18, Black]]; 
                    Abort[]}, {MessageDialog[
                    Style["Path to file has not been chosen", 18, Black]]; 
                    Abort[]}]; Null},
                  Evaluator->Automatic,
                  FrameMargins->10,
                  Method->"Queued"]}
               },
               AutoDelete->False,
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              "Grid"],
             Background->RGBColor[0.985, 0.985, 0.985],
             FrameMargins->{{20, 20}, {5, 5}}]}
          },
          AutoDelete->False,
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"],
        Background->RGBColor[0.985, 0.985, 0.985],
        FrameMargins->{{5, 5}, {5, 5}}], 
       PanelBox[
        TagBox[GridBox[{
           {
            TagBox[GridBox[{
               {"\<\"Normalization:\"\>", 
                CheckboxBox[Dynamic[$CellContext`no$$], {1, 2}]},
               {"\<\"Positive Kinetics Are Inverted In Normalization \
Mode\"\>", "\[SpanFromLeft]"},
               {"\<\"Off-Resonance:\"\>", 
                CheckboxBox[Dynamic[$CellContext`or$$], {1, 2}]},
               {"\<\"If Off-Resonance Is ON, It Memorizes Off-Resonance \
Signal\"\>", "\[SpanFromLeft]"},
               {"\<\"Type:\"\>", 
                InterpretationBox[
                 StyleBox[
                  RowBox[{GridBox[{
                    {
                    RadioButtonBox[Dynamic[$CellContext`t$$], {1},
                    DefaultBaseStyle->"RadioButtonBar"], 
                    StyleBox["\<\"Overlapping\"\>", "RadioButtonBarLabel",
                    StripOnInput->False]}
                    },
                    AutoDelete->False,
                    BaselinePosition->{1, 2},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.21]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}}], "  ", GridBox[{
                    {
                    RadioButtonBox[Dynamic[$CellContext`t$$], {2},
                    DefaultBaseStyle->"RadioButtonBar"], 
                    StyleBox["\<\"Shifting\"\>", "RadioButtonBarLabel",
                    StripOnInput->False]}
                    },
                    AutoDelete->False,
                    BaselinePosition->{1, 2},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.21]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}}]}], "Deploy"],
                 RadioButtonBar[
                  Dynamic[$CellContext`t$$], {
                  1 -> "Overlapping", 2 -> "Shifting"}]]},
               {"", ""},
               {"\<\"Plot Explorer Function:\"\>", 
                CheckboxBox[Dynamic[$CellContext`z5$$], {1, 2}]},
               {"", ""},
               {"", 
                ButtonBox[
                 StyleBox["\<\"Memorize Spectrum\"\>",
                  StripOnInput->False,
                  FontWeight->Bold],
                 Appearance->Automatic,
                 ButtonFunction:>{If[$CellContext`\:0421licker2 == 0, 
                    MessageDialog[
                    Style[
                    "Please, open file and click Convert Data button", 18, 
                    Black]], {$CellContext`timeLegend$$ = Join[{
                    Text[
                    Style[
                    StringJoin[
                    ToString[$CellContext`TimeIn], " \[Mu]s", " (F", 
                    ToString[$CellContext`counter], ")"], 
                    Bold]]}, $CellContext`timeLegend$$]; 
                    Which[$CellContext`s == 1, $CellContext`MemKin$$ = Join[{
                    Transpose[{$CellContext`datafield, 
                    
                    Part[$CellContext`dataKinetics, All, 
                    IntegerPart[($CellContext`TimeIn - \
$CellContext`TimeResolution)/$CellContext`TimeResolution] + 
                    1]}]}, $CellContext`MemKin$$], $CellContext`s == 
                    2, $CellContext`MemKin$$ = Join[{
                    Transpose[{$CellContext`datafield, 
                    
                    Part[$CellContext`dataKineticsCorr, All, 
                    IntegerPart[($CellContext`TimeIn - \
$CellContext`TimeResolution)/$CellContext`TimeResolution] + 
                    1]}]}, $CellContext`MemKin$$], $CellContext`s == 
                    3, $CellContext`MemKin$$ = Join[{
                    Transpose[{$CellContext`datafield, 
                    
                    Part[$CellContext`dataKineticsCorrField, All, 
                    IntegerPart[($CellContext`TimeIn - \
$CellContext`TimeResolution)/$CellContext`TimeResolution] + 
                    1]}]}, $CellContext`MemKin$$]; Null]; 
                    Which[$CellContext`s == 1, $CellContext`MemKinNorm$$ = 
                    Join[{
                    
                    Transpose[{$CellContext`datafield, 
                    Part[$CellContext`dataKineticsCorr, All, 
                    IntegerPart[($CellContext`TimeIn - \
$CellContext`TimeResolution)/$CellContext`TimeResolution] + 1]/Max[
                    Abs[
                    
                    Part[$CellContext`dataKineticsCorr, All, 
                    IntegerPart[($CellContext`TimeIn - \
$CellContext`TimeResolution)/$CellContext`TimeResolution] + 
                    1]]]}]}, $CellContext`MemKinNorm$$], $CellContext`s == 
                    2, $CellContext`MemKinNorm$$ = Join[{
                    
                    Transpose[{$CellContext`datafield, 
                    Part[$CellContext`dataKineticsCorr, All, 
                    IntegerPart[($CellContext`TimeIn - \
$CellContext`TimeResolution)/$CellContext`TimeResolution] + 1]/Max[
                    Abs[
                    
                    Part[$CellContext`dataKineticsCorr, All, 
                    IntegerPart[($CellContext`TimeIn - \
$CellContext`TimeResolution)/$CellContext`TimeResolution] + 
                    1]]]}]}, $CellContext`MemKinNorm$$], $CellContext`s == 
                    3, $CellContext`MemKinNorm$$ = Join[{
                    
                    Transpose[{$CellContext`datafield, 
                    Part[$CellContext`dataKineticsCorrField, All, 
                    IntegerPart[($CellContext`TimeIn - \
$CellContext`TimeResolution)/$CellContext`TimeResolution] + 1]/Max[
                    Abs[
                    
                    Part[$CellContext`dataKineticsCorrField, All, 
                    IntegerPart[($CellContext`TimeIn - \
$CellContext`TimeResolution)/$CellContext`TimeResolution] + 
                    1]]]}]}, $CellContext`MemKinNorm$$]; Null]; 
                    Which[$CellContext`s == 1, $CellContext`MemKinNormSh$$ = 
                    Join[{
                    
                    Transpose[{$CellContext`datafield, 
                    1 (Length[$CellContext`MemKinNormSh$$] - 1) + 
                    Part[$CellContext`dataKineticsCorr, All, 
                    IntegerPart[($CellContext`TimeIn - \
$CellContext`TimeResolution)/$CellContext`TimeResolution] + 1]/Max[
                    Abs[
                    
                    Part[$CellContext`dataKineticsCorr, All, 
                    IntegerPart[($CellContext`TimeIn - \
$CellContext`TimeResolution)/$CellContext`TimeResolution] + 
                    1]]]}]}, $CellContext`MemKinNormSh$$], $CellContext`s == 
                    2, $CellContext`MemKinNormSh$$ = Join[{
                    
                    Transpose[{$CellContext`datafield, 
                    1 (Length[$CellContext`MemKinNormSh$$] - 1) + 
                    Part[$CellContext`dataKineticsCorr, All, 
                    IntegerPart[($CellContext`TimeIn - \
$CellContext`TimeResolution)/$CellContext`TimeResolution] + 1]/Max[
                    Abs[
                    
                    Part[$CellContext`dataKineticsCorr, All, 
                    IntegerPart[($CellContext`TimeIn - \
$CellContext`TimeResolution)/$CellContext`TimeResolution] + 
                    1]]]}]}, $CellContext`MemKinNormSh$$], $CellContext`s == 
                    3, $CellContext`MemKinNormSh$$ = Join[{
                    
                    Transpose[{$CellContext`datafield, 
                    1 (Length[$CellContext`MemKinNormSh$$] - 1) + 
                    Part[$CellContext`dataKineticsCorrField, All, 
                    IntegerPart[($CellContext`TimeIn - \
$CellContext`TimeResolution)/$CellContext`TimeResolution] + 1]/Max[
                    Abs[
                    
                    Part[$CellContext`dataKineticsCorrField, All, 
                    IntegerPart[($CellContext`TimeIn - \
$CellContext`TimeResolution)/$CellContext`TimeResolution] + 
                    1]]]}]}, $CellContext`MemKinNormSh$$]; Null]; Null}]; 
                   Null},
                 Evaluator->Automatic,
                 FrameMargins->10,
                 Method->"Queued"]},
               {"", 
                ButtonBox[
                 StyleBox["\<\"Memorize Kinetics\"\>",
                  StripOnInput->False,
                  FontWeight->Bold],
                 Appearance->Automatic,
                 ButtonFunction:>{If[$CellContext`\:0421licker2 == 0, 
                    MessageDialog[
                    Style[
                    "Please, open file and click Convert Data button", 18, 
                    Black]], {$CellContext`FitTime = 
                    IntegerPart[$CellContext`TimeIn/$CellContext`\
TimeResolution] + 1; $CellContext`fieldLegend$$ = Join[{
                    Text[
                    Style[
                    StringJoin[
                    ToString[$CellContext`Field], " G", " (F", 
                    ToString[$CellContext`counter], ")"], 
                    Bold]]}, $CellContext`fieldLegend$$]; 
                    Which[$CellContext`or$$ == 1, 
                    Which[$CellContext`s == 1, $CellContext`MemSpec$$ = Join[{
                    Transpose[{$CellContext`dataTime, 
                    
                    Part[$CellContext`dataKinetics, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, 
                    All]}]}, $CellContext`MemSpec$$], $CellContext`s == 
                    2, $CellContext`MemSpec$$ = Join[{
                    Transpose[{$CellContext`dataTime, 
                    
                    Part[$CellContext`dataKineticsCorr, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, 
                    All]}]}, $CellContext`MemSpec$$], $CellContext`s == 
                    3, $CellContext`MemSpec$$ = Join[{
                    Transpose[{$CellContext`dataTime, 
                    
                    Part[$CellContext`dataKineticsCorrField, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, 
                    All]}]}, $CellContext`MemSpec$$]], $CellContext`or$$ == 2, 
                    Which[$CellContext`s == 1, $CellContext`MemSpec$$ = Join[{
                    Transpose[{$CellContext`dataTime, 
                    Part[
                    Drop[$CellContext`fileDataOffRes, 1], All, 
                    1]}]}, $CellContext`MemSpec$$], $CellContext`s == 
                    2, $CellContext`MemSpec$$ = Join[{
                    Transpose[{$CellContext`dataTime, 
                    Part[
                    Drop[$CellContext`fileDataOffRes, 1], All, 
                    1]}]}, $CellContext`MemSpec$$], $CellContext`s == 
                    3, $CellContext`MemSpec$$ = Join[{
                    Transpose[{$CellContext`dataTime, 
                    Part[
                    Drop[$CellContext`fileDataOffRes, 1], All, 
                    1]}]}, $CellContext`MemSpec$$]]]; 
                    Which[$CellContext`or$$ == 1, 
                    Which[$CellContext`s == 1, 
                    If[
                    Part[$CellContext`dataKinetics, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 
                    1, $CellContext`FitTime] > 0, $CellContext`MemSpecNorm$$ = 
                    Join[{
                    
                    Transpose[{$CellContext`dataTime, 
                    Part[$CellContext`dataKinetics, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, All]/(-Max[
                    Abs[
                    
                    Part[$CellContext`dataKinetics, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, 
                    All]]])}]}, $CellContext`MemSpecNorm$$], \
$CellContext`MemSpecNorm$$ = Join[{
                    
                    Transpose[{$CellContext`dataTime, 
                    Part[$CellContext`dataKinetics, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, All]/Max[
                    Abs[
                    
                    Part[$CellContext`dataKinetics, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, 
                    All]]]}]}, $CellContext`MemSpecNorm$$]], $CellContext`s == 
                    2, 
                    If[
                    Part[$CellContext`dataKineticsCorr, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 
                    1, $CellContext`FitTime] > 0, $CellContext`MemSpecNorm$$ = 
                    Join[{
                    
                    Transpose[{$CellContext`dataTime, 
                    Part[$CellContext`dataKineticsCorr, 
                    
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, All]/(-Max[
                    Abs[
                    
                    Part[$CellContext`dataKineticsCorr, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, 
                    All]]])}]}, $CellContext`MemSpecNorm$$], \
$CellContext`MemSpecNorm$$ = Join[{
                    
                    Transpose[{$CellContext`dataTime, 
                    Part[$CellContext`dataKineticsCorr, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, All]/Max[
                    Abs[
                    
                    Part[$CellContext`dataKineticsCorr, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, 
                    All]]]}]}, $CellContext`MemSpecNorm$$]], $CellContext`s == 
                    3, If[Part[$CellContext`dataKineticsCorrField, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 
                    1, $CellContext`FitTime] > 0, $CellContext`MemSpecNorm$$ = 
                    Join[{
                    
                    Transpose[{$CellContext`dataTime, 
                    Part[$CellContext`dataKineticsCorrField, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, All]/(-Max[
                    Abs[
                    
                    Part[$CellContext`dataKineticsCorrField, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, 
                    All]]])}]}, $CellContext`MemSpecNorm$$], \
$CellContext`MemSpecNorm$$ = Join[{
                    
                    Transpose[{$CellContext`dataTime, 
                    Part[$CellContext`dataKineticsCorrField, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, All]/Max[
                    Abs[
                    
                    Part[$CellContext`dataKineticsCorrField, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, 
                    All]]]}]}, $CellContext`MemSpecNorm$$]]; 
                    Null], $CellContext`or$$ == 2, 
                    
                    Which[$CellContext`s == 1, $CellContext`MemSpecNorm$$ = 
                    Join[{
                    Transpose[{$CellContext`dataTime, Part[
                    Drop[$CellContext`fileDataOffRes, 1], All, 1]/Max[
                    Abs[
                    Part[
                    Drop[$CellContext`fileDataOffRes, 1], All, 
                    1]]]}]}, $CellContext`MemSpecNorm$$], $CellContext`s == 
                    2, $CellContext`MemSpecNorm$$ = Join[{
                    Transpose[{$CellContext`dataTime, Part[
                    Drop[$CellContext`fileDataOffRes, 1], All, 1]/Max[
                    Abs[
                    Part[
                    Drop[$CellContext`fileDataOffRes, 1], All, 
                    1]]]}]}, $CellContext`MemSpecNorm$$], $CellContext`s == 
                    3, $CellContext`MemSpecNorm$$ = Join[{
                    Transpose[{$CellContext`dataTime, Part[
                    Drop[$CellContext`fileDataOffRes, 1], All, 1]/Max[
                    Abs[
                    Part[
                    Drop[$CellContext`fileDataOffRes, 1], All, 
                    1]]]}]}, $CellContext`MemSpecNorm$$]; Null]]; 
                    Which[$CellContext`or$$ == 1, 
                    Which[$CellContext`s == 1, 
                    If[
                    Part[$CellContext`dataKinetics, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 
                    1, $CellContext`FitTime] > 
                    0, $CellContext`MemSpecNormSh$$ = Join[{
                    
                    Transpose[{$CellContext`dataTime, 
                    1 (Length[$CellContext`MemSpecNormSh$$] - 1) + 
                    Part[$CellContext`dataKinetics, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, All]/(-Max[
                    Abs[
                    
                    Part[$CellContext`dataKinetics, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, 
                    All]]])}]}, $CellContext`MemSpecNormSh$$], \
$CellContext`MemSpecNormSh$$ = Join[{
                    
                    Transpose[{$CellContext`dataTime, 
                    1 (Length[$CellContext`MemSpecNormSh$$] - 1) + 
                    Part[$CellContext`dataKinetics, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, All]/Max[
                    Abs[
                    
                    Part[$CellContext`dataKinetics, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, 
                    All]]]}]}, $CellContext`MemSpecNormSh$$]], $CellContext`s == 
                    2, 
                    If[
                    Part[$CellContext`dataKineticsCorr, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 
                    1, $CellContext`FitTime] > 
                    0, $CellContext`MemSpecNormSh$$ = Join[{
                    
                    Transpose[{$CellContext`dataTime, 
                    1 (Length[$CellContext`MemSpecNormSh$$] - 1) + 
                    Part[$CellContext`dataKineticsCorr, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, All]/(-Max[
                    Abs[
                    
                    Part[$CellContext`dataKineticsCorr, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, 
                    All]]])}]}, $CellContext`MemSpecNormSh$$], \
$CellContext`MemSpecNormSh$$ = Join[{
                    
                    Transpose[{$CellContext`dataTime, 
                    1 (Length[$CellContext`MemSpecNormSh$$] - 1) + 
                    Part[$CellContext`dataKineticsCorr, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, All]/Max[
                    Abs[
                    
                    Part[$CellContext`dataKineticsCorr, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, 
                    All]]]}]}, $CellContext`MemSpecNormSh$$]], $CellContext`s == 
                    3, 
                    If[
                    Part[$CellContext`dataKineticsCorrField, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 
                    1, $CellContext`FitTime] > 
                    0, $CellContext`MemSpecNormSh$$ = Join[{
                    
                    Transpose[{$CellContext`dataTime, 
                    1 (Length[$CellContext`MemSpecNormSh$$] - 1) + 
                    Part[$CellContext`dataKineticsCorrField, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, All]/(-Max[
                    Abs[
                    
                    Part[$CellContext`dataKineticsCorrField, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, 
                    All]]])}]}, $CellContext`MemSpecNormSh$$], \
$CellContext`MemSpecNormSh$$ = Join[{
                    
                    Transpose[{$CellContext`dataTime, 
                    1 (Length[$CellContext`MemSpecNormSh$$] - 1) + 
                    Part[$CellContext`dataKineticsCorrField, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, All]/Max[
                    Abs[
                    
                    Part[$CellContext`dataKineticsCorrField, 
                    IntegerPart[($CellContext`Field - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, 
                    All]]]}]}, $CellContext`MemSpecNormSh$$]]], \
$CellContext`or$$ == 2, 
                    
                    Which[$CellContext`s == 1, $CellContext`MemSpecNormSh$$ = 
                    Join[{
                    
                    Transpose[{$CellContext`dataTime, 
                    1 (Length[$CellContext`MemSpecNormSh$$] - 1) + Part[
                    Drop[$CellContext`fileDataOffRes, 1], All, 1]/Max[
                    Abs[
                    Part[
                    Drop[$CellContext`fileDataOffRes, 1], All, 
                    1]]]}]}, $CellContext`MemSpecNormSh$$], $CellContext`s == 
                    2, $CellContext`MemSpecNormSh$$ = Join[{
                    
                    Transpose[{$CellContext`dataTime, 
                    1 (Length[$CellContext`MemSpecNormSh$$] - 1) + Part[
                    Drop[$CellContext`fileDataOffRes, 1], All, 1]/Max[
                    Abs[
                    Part[
                    Drop[$CellContext`fileDataOffRes, 1], All, 
                    1]]]}]}, $CellContext`MemSpecNormSh$$], $CellContext`s == 
                    3, $CellContext`MemSpecNormSh$$ = Join[{
                    
                    Transpose[{$CellContext`dataTime, 
                    1 (Length[$CellContext`MemSpecNormSh$$] - 1) + Part[
                    Drop[$CellContext`fileDataOffRes, 1], All, 1]/Max[
                    Abs[
                    Part[
                    Drop[$CellContext`fileDataOffRes, 1], All, 
                    1]]]}]}, $CellContext`MemSpecNormSh$$]; Null]]; Null}]; 
                   Null},
                 Evaluator->Automatic,
                 FrameMargins->10,
                 Method->"Queued"]},
               {"", ""},
               {"\<\"Number to Delete (Counts From Left):\"\>", 
                InputFieldBox[Dynamic[$CellContext`ndel$$], Number,
                 FieldSize->13]},
               {"", 
                ButtonBox[
                 StyleBox["\<\"Delete Arbitary Spectrum\"\>",
                  StripOnInput->False,
                  FontWeight->Bold],
                 Appearance->Automatic,
                 ButtonFunction:>{If[
                    And[
                    Length[$CellContext`MemKin$$] >= 2, 
                    Round[$CellContext`ndel$$] < 
                    Length[$CellContext`MemKin$$]], $CellContext`MemKin$$ = 
                    Drop[$CellContext`MemKin$$, {
                    Round[$CellContext`ndel$$]}]]; If[
                    And[
                    Length[$CellContext`MemKinNorm$$] >= 2, 
                    Round[$CellContext`ndel$$] < 
                    Length[$CellContext`MemKinNorm$$]], \
$CellContext`MemKinNorm$$ = Drop[$CellContext`MemKinNorm$$, {
                    Round[$CellContext`ndel$$]}]]; If[
                    And[
                    Length[$CellContext`MemKinNormSh$$] >= 2, 
                    Round[$CellContext`ndel$$] < 
                    Length[$CellContext`MemKinNormSh$$]], \
$CellContext`MemKinNormSh$$ = Drop[$CellContext`MemKinNormSh$$, {
                    Round[$CellContext`ndel$$]}]]; If[
                    And[
                    Length[$CellContext`timeLegend$$] >= 1, 
                    Round[$CellContext`ndel$$] < 
                    
                    Length[$CellContext`timeLegend$$]], \
$CellContext`timeLegend$$ = Drop[$CellContext`timeLegend$$, {
                    Round[$CellContext`ndel$$]}]]; Null},
                 Evaluator->Automatic,
                 FrameMargins->10,
                 Method->"Queued"]},
               {"", 
                ButtonBox[
                 StyleBox["\<\"Delete Arbitary Kinetics\"\>",
                  StripOnInput->False,
                  FontWeight->Bold],
                 Appearance->Automatic,
                 ButtonFunction:>{If[
                    And[
                    Length[$CellContext`MemSpec$$] >= 2, 
                    Round[$CellContext`ndel$$] < 
                    Length[$CellContext`MemSpec$$]], $CellContext`MemSpec$$ = 
                    Drop[$CellContext`MemSpec$$, {
                    Round[$CellContext`ndel$$]}]]; If[
                    And[
                    Length[$CellContext`MemSpecNorm$$] >= 2, 
                    Round[$CellContext`ndel$$] < 
                    Length[$CellContext`MemSpecNorm$$]], \
$CellContext`MemSpecNorm$$ = Drop[$CellContext`MemSpecNorm$$, {
                    Round[$CellContext`ndel$$]}]]; If[
                    And[
                    Length[$CellContext`MemSpecNormSh$$] >= 2, 
                    Round[$CellContext`ndel$$] < 
                    Length[$CellContext`MemSpecNormSh$$]], \
$CellContext`MemSpecNormSh$$ = Drop[$CellContext`MemSpecNormSh$$, {
                    Round[$CellContext`ndel$$]}]]; If[
                    And[
                    Length[$CellContext`fieldLegend$$] >= 1, 
                    Round[$CellContext`ndel$$] < 
                    Length[$CellContext`fieldLegend$$]], \
$CellContext`fieldLegend$$ = Drop[$CellContext`fieldLegend$$, {
                    Round[$CellContext`ndel$$]}]]; Null},
                 Evaluator->Automatic,
                 FrameMargins->10,
                 Method->"Queued"]},
               {"", 
                ButtonBox[
                 StyleBox["\<\"Delete All\"\>",
                  StripOnInput->False,
                  FontWeight->Bold],
                 Appearance->Automatic,
                 
                 ButtonFunction:>{
                  ClearAll[$CellContext`MemKin$$]; $CellContext`MemKin$$ = {
                    0}; ClearAll[$CellContext`MemKinNorm$$]; \
$CellContext`MemKinNorm$$ = {0}; 
                   ClearAll[$CellContext`MemKinNormSh$$]; \
$CellContext`MemKinNormSh$$ = {0}; 
                   ClearAll[$CellContext`MemSpec$$]; $CellContext`MemSpec$$ = \
{0}; ClearAll[$CellContext`MemSpecNorm$$]; $CellContext`MemSpecNorm$$ = {0}; 
                   ClearAll[$CellContext`MemSpecNormSh$$]; \
$CellContext`MemSpecNormSh$$ = {0}; Null},
                 Evaluator->Automatic,
                 FrameMargins->10,
                 Method->"Queued"]}
              },
              AutoDelete->False,
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
             "Grid"]}
          },
          AutoDelete->False,
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"],
        Background->RGBColor[0.985, 0.985, 0.985],
        FrameMargins->{{5, 5}, {5, 5}}]},
      {
       DynamicBox[ToBoxes[
         Which[$CellContext`x$$ == 1, 
          If[
           
           And[$CellContext`\:0421licker2 == 1, $CellContext`\:0421licker4 == 
            1], $CellContext`GraphDensityPlot$$, 
           If[
            
            And[$CellContext`\:0421licker2 == 0, $CellContext`\:0421licker4 == 
             0], "Press Convert Data and Density Plot Buttons", 
            If[
             
             And[$CellContext`\:0421licker2 == 1, $CellContext`\:0421licker4 == 
              0], "Press Density Plot Button", 
             If[
              
              And[$CellContext`\:0421licker2 == 0, $CellContext`\:0421licker4 == 
               1], "Press Convert Data Button"]]]], $CellContext`x$$ == 2, 
          If[
           
           And[$CellContext`\:0421licker2 == 1, $CellContext`\:0421licker4 == 
            1], 
           $CellContext`PlotExplorer[$CellContext`GraphDensityPlot$$], 
           If[
            And[$CellContext`\:0421licker2 == 0, $CellContext`\:0421licker4 == 
             0], "Press Convert Data and Density Plot Buttons", 
            If[
             
             And[$CellContext`\:0421licker2 == 1, $CellContext`\:0421licker4 == 
              0], "Press Density Plot Button", 
             If[
              
              And[$CellContext`\:0421licker2 == 0, $CellContext`\:0421licker4 == 
               1], "Press Convert Data Button"]]]]], StandardForm],
        ImageSizeCache->{304.796875, {63., 9.}}], 
       DynamicBox[ToBoxes[
         Which[$CellContext`s == 1, 
          Grid[{{
             Dynamic[
              If[
               
               And[$CellContext`\:0421licker2 == 
                1, $CellContext`\:0421licker3 == 1], 
               If[
                And[$CellContext`z$$ == 1, 
                 Or[
                 NumericQ[$CellContext`TimeIn] == True, $CellContext`TimeIn != 
                  Null]], $CellContext`manip1$$, $CellContext`manip1PE$$], 
               
               If[$CellContext`\:0421licker3 == 0, "Press Cross-Section Plot",
                 "Press Convert Data Button"]]]}, {
             Dynamic[
              If[
               
               And[$CellContext`\:0421licker2 == 
                1, $CellContext`\:0421licker3 == 1], 
               
               If[$CellContext`z$$ == 
                1, $CellContext`manip2$$, $CellContext`manip2PE$$], 
               
               If[$CellContext`\:0421licker3 == 0, "Press Cross-Section Plot",
                 "Press Convert Data Button"]]]}}], $CellContext`s == 2, 
          Grid[{{
             Dynamic[
              If[
               
               And[$CellContext`\:0421licker2 == 
                1, $CellContext`\:0421licker3 == 1], 
               If[
                And[$CellContext`z$$ == 1, 
                 Or[
                 NumericQ[$CellContext`TimeIn] == True, $CellContext`TimeIn != 
                  Null]], 
                
                If[$CellContext`\:0421licker == 0, 
                 "!!! Please, Click Convert Data Button !!!", \
$CellContext`manip1Corr$$], 
                
                If[$CellContext`\:0421licker == 0, 
                 "!!! Please, Click Convert Data Button !!!", \
$CellContext`manip1PECorr$$]], 
               
               If[$CellContext`\:0421licker3 == 0, 
                "Press Cross-Section Button", 
                "Press Convert Data Button"]]]}, {
             Dynamic[
              If[
               
               And[$CellContext`\:0421licker2 == 
                1, $CellContext`\:0421licker3 == 1], 
               If[
                And[$CellContext`z$$ == 1, 
                 Or[
                 NumericQ[$CellContext`TimeIn] == True, $CellContext`TimeIn != 
                  Null]], 
                
                If[$CellContext`\:0421licker == 0, 
                 "!!! Please, Click Convert Data Button !!!", \
$CellContext`manip2Corr$$], 
                
                If[$CellContext`\:0421licker == 0, 
                 "!!! Please, Click Convert Data Button !!!", \
$CellContext`manip2PECorr$$]], 
               
               If[$CellContext`\:0421licker3 == 0, 
                "Press Cross-Section Button", 
                "Press Convert Data Button"]]]}}], $CellContext`s == 3, 
          Grid[{{
             Dynamic[
              If[
               
               And[$CellContext`\:0421licker2 == 
                1, $CellContext`\:0421licker3 == 1], 
               If[
                And[$CellContext`z$$ == 1, 
                 Or[
                 NumericQ[$CellContext`TimeIn] == True, $CellContext`TimeIn != 
                  Null]], 
                
                If[$CellContext`\:0421licker == 0, 
                 "!!! Please, Click Convert Data Button !!!", \
$CellContext`manip1CorrField$$], 
                
                If[$CellContext`\:0421licker == 0, 
                 "!!! Please, Click Convert Data Button !!!", \
$CellContext`manip1PECorrField$$]], 
               
               If[$CellContext`\:0421licker3 == 0, 
                "Press Cross-Section Button", 
                "Press Convert Data Button"]]]}, {
             Dynamic[
              If[
               
               And[$CellContext`\:0421licker2 == 
                1, $CellContext`\:0421licker3 == 1], 
               If[
                And[$CellContext`z$$ == 1, 
                 Or[
                 NumericQ[$CellContext`TimeIn] == True, $CellContext`TimeIn != 
                  Null]], 
                
                If[$CellContext`\:0421licker == 0, 
                 "!!! Please, Click Get Parameters Button !!!", \
$CellContext`manip2CorrField$$], 
                
                If[$CellContext`\:0421licker == 0, 
                 "!!! Please, Click Convert Data Button !!!", \
$CellContext`manip2PECorrField$$]], 
               
               If[$CellContext`\:0421licker3 == 0, 
                "Press Cross-Section Button", 
                "Press Convert Data Button"]]]}}]], StandardForm],
        ImageSizeCache->{255., {63.5, 68.5}}], 
       DynamicBox[ToBoxes[
         Which[$CellContext`s == 1, 
          Grid[{{
             If[
              
              And[$CellContext`\:0421licker2 == 1, $CellContext`\:0421licker3 == 
               1, $CellContext`d2$$ == 
               2], $CellContext`GraphDensityPlotManip$$, 
              "Choose 2D Graph Option"], SpanFromLeft}}], $CellContext`s == 2, 
          Grid[{{
             If[
              
              And[$CellContext`\:0421licker2 == 1, $CellContext`\:0421licker3 == 
               1, $CellContext`d2$$ == 
               2], $CellContext`GraphDensityPlotManipCorr$$, 
              "Choose 2D Graph Option"], SpanFromLeft}}], $CellContext`s == 3, 
          Grid[{{
             If[
              
              And[$CellContext`\:0421licker2 == 1, $CellContext`\:0421licker3 == 
               1, $CellContext`d2$$ == 
               2], $CellContext`GraphDensityPlotManipCorrField$$, 
              "Choose 2D Graph Option"], SpanFromLeft}}]], StandardForm],
        ImageSizeCache->{114., {2., 7.}}], 
       TagBox[GridBox[{
          {
           DynamicBox[ToBoxes[
             Which[$CellContext`t$$ == 1, 
              Which[$CellContext`no$$ == 1, 
               If[$CellContext`z5$$ == 1, 
                If[Length[$CellContext`MemKin$$] >= 2, 
                 ListLinePlot[
                  Drop[$CellContext`MemKin$$, -1], PlotRange -> All, Frame -> 
                  True, FrameLabel -> {
                   "Mangetic Field / G", "Intensity / a. u."}, GridLines -> 
                  Automatic, GridLinesStyle -> Directive[LightGray, Dashed], 
                  ImageSize -> {400, 250}, PlotLegends -> 
                  Placed[$CellContext`timeLegend$$, Above]], 
                 "Memorize Something"], 
                If[Length[$CellContext`MemKin$$] >= 2, 
                 $CellContext`PlotExplorer[
                  ListLinePlot[
                   Drop[$CellContext`MemKin$$, -1], PlotRange -> All, Frame -> 
                   True, FrameLabel -> {
                    "Mangetic Field / G", "Intensity / a. u."}, GridLines -> 
                   Automatic, GridLinesStyle -> Directive[LightGray, Dashed], 
                   ImageSize -> {400, 340}, PlotLegends -> 
                   Placed[$CellContext`timeLegend$$, Above]]], 
                 "Memorize Something"]], $CellContext`no$$ == 2, 
               If[$CellContext`z5$$ == 1, 
                If[Length[$CellContext`MemKinNorm$$] >= 2, 
                 ListLinePlot[
                  Drop[$CellContext`MemKinNorm$$, -1], PlotRange -> All, 
                  Frame -> True, 
                  FrameLabel -> {"Mangetic Field / G", "Intensity / a. u."}, 
                  GridLines -> Automatic, GridLinesStyle -> 
                  Directive[LightGray, Dashed], ImageSize -> {400, 250}, 
                  PlotLegends -> Placed[$CellContext`timeLegend$$, Above]], 
                 "Memorize Something"], 
                If[Length[$CellContext`MemKinNorm$$] >= 2, 
                 $CellContext`PlotExplorer[
                  ListLinePlot[
                   Drop[$CellContext`MemKinNorm$$, -1], PlotRange -> All, 
                   Frame -> True, 
                   FrameLabel -> {"Mangetic Field / G", "Intensity / a. u."}, 
                   GridLines -> Automatic, GridLinesStyle -> 
                   Directive[LightGray, Dashed], ImageSize -> {400, 340}, 
                   PlotLegends -> Placed[$CellContext`timeLegend$$, Above]]], 
                 "Memorize Something"]]], $CellContext`t$$ == 2, 
              Which[$CellContext`no$$ == 1, 
               If[$CellContext`z5$$ == 1, 
                If[Length[$CellContext`MemKin$$] >= 2, 
                 ListLinePlot[
                  Drop[$CellContext`MemKin$$, -1], PlotRange -> All, Frame -> 
                  True, FrameLabel -> {
                   "Mangetic Field / G", "Intensity / a. u."}, GridLines -> 
                  Automatic, GridLinesStyle -> Directive[LightGray, Dashed], 
                  ImageSize -> {400, 250}, PlotLegends -> 
                  Placed[$CellContext`timeLegend$$, Above]], 
                 "Memorize Something"], 
                If[Length[$CellContext`MemKin$$] >= 2, 
                 $CellContext`PlotExplorer[
                  ListLinePlot[
                   Drop[$CellContext`MemKin$$, -1], PlotRange -> All, Frame -> 
                   True, FrameLabel -> {
                    "Mangetic Field / G", "Intensity / a. u."}, GridLines -> 
                   Automatic, GridLinesStyle -> Directive[LightGray, Dashed], 
                   ImageSize -> {400, 340}, PlotLegends -> 
                   Placed[$CellContext`timeLegend$$, Above]]], 
                 "Memorize Something"]], $CellContext`no$$ == 2, 
               If[$CellContext`z5$$ == 1, 
                If[Length[$CellContext`MemKinNormSh$$] >= 2, 
                 ListLinePlot[
                  Drop[$CellContext`MemKinNormSh$$, -1], PlotRange -> All, 
                  Frame -> True, 
                  FrameLabel -> {"Mangetic Field / G", "Intensity / a. u."}, 
                  GridLines -> Automatic, GridLinesStyle -> 
                  Directive[LightGray, Dashed], ImageSize -> {400, 250}, 
                  PlotLegends -> Placed[$CellContext`timeLegend$$, Above]], 
                 "Memorize Something"], 
                If[Length[$CellContext`MemKinNormSh$$] >= 2, 
                 $CellContext`PlotExplorer[
                  ListLinePlot[
                   Drop[$CellContext`MemKinNormSh$$, -1], PlotRange -> All, 
                   Frame -> True, 
                   FrameLabel -> {"Mangetic Field / G", "Intensity / a. u."}, 
                   GridLines -> Automatic, GridLinesStyle -> 
                   Directive[LightGray, Dashed], ImageSize -> {400, 340}, 
                   PlotLegends -> Placed[$CellContext`timeLegend$$, Above]]], 
                 "Memorize Something"]]]], StandardForm],
            ImageSizeCache->{96., {2., 7.}}]},
          {
           DynamicBox[ToBoxes[
             Which[$CellContext`t$$ == 1, 
              Which[$CellContext`no$$ == 1, 
               If[$CellContext`z5$$ == 1, 
                If[Length[$CellContext`MemSpec$$] >= 2, 
                 ListLinePlot[
                  Drop[$CellContext`MemSpec$$, -1], PlotRange -> All, Frame -> 
                  True, FrameLabel -> {"Time / \[Mu]s", "Intensity / a. u."}, 
                  GridLines -> Automatic, GridLinesStyle -> 
                  Directive[LightGray, Dashed], ImageSize -> {400, 250}, 
                  PlotLegends -> Placed[$CellContext`fieldLegend$$, Above]], 
                 "Memorize Something"], 
                If[Length[$CellContext`MemSpec$$] >= 2, 
                 $CellContext`PlotExplorer[
                  ListLinePlot[
                   Drop[$CellContext`MemSpec$$, -1], PlotRange -> All, Frame -> 
                   True, FrameLabel -> {"Time / \[Mu]s", "Intensity / a. u."},
                    GridLines -> Automatic, GridLinesStyle -> 
                   Directive[LightGray, Dashed], ImageSize -> {400, 340}, 
                   PlotLegends -> Placed[$CellContext`fieldLegend$$, Above]]],
                  "Memorize Something"]], $CellContext`no$$ == 2, 
               If[$CellContext`z5$$ == 1, 
                If[Length[$CellContext`MemSpecNorm$$] >= 2, 
                 ListLinePlot[
                  Drop[$CellContext`MemSpecNorm$$, -1], PlotRange -> All, 
                  Frame -> True, 
                  FrameLabel -> {"Time / \[Mu]s", "Intensity / a. u."}, 
                  GridLines -> Automatic, GridLinesStyle -> 
                  Directive[LightGray, Dashed], ImageSize -> {400, 250}, 
                  PlotLegends -> Placed[$CellContext`fieldLegend$$, Above]], 
                 "Memorize Something"], 
                If[Length[$CellContext`MemSpecNorm$$] >= 2, 
                 $CellContext`PlotExplorer[
                  ListLinePlot[
                   Drop[$CellContext`MemSpecNorm$$, -1], PlotRange -> All, 
                   Frame -> True, 
                   FrameLabel -> {"Time / \[Mu]s", "Intensity / a. u."}, 
                   GridLines -> Automatic, GridLinesStyle -> 
                   Directive[LightGray, Dashed], ImageSize -> {400, 340}, 
                   PlotLegends -> Placed[$CellContext`fieldLegend$$, Above]]],
                  "Memorize Something"]]], $CellContext`t$$ == 2, 
              Which[$CellContext`no$$ == 1, 
               If[$CellContext`z5$$ == 1, 
                If[Length[$CellContext`MemSpec$$] >= 2, 
                 ListLinePlot[
                  Drop[$CellContext`MemSpec$$, -1], PlotRange -> All, Frame -> 
                  True, FrameLabel -> {"Time / \[Mu]s", "Intensity / a. u."}, 
                  GridLines -> Automatic, GridLinesStyle -> 
                  Directive[LightGray, Dashed], ImageSize -> {400, 250}, 
                  PlotLegends -> Placed[$CellContext`fieldLegend$$, Above]], 
                 "Memorize Something"], 
                If[Length[$CellContext`MemSpec$$] >= 2, 
                 $CellContext`PlotExplorer[
                  ListLinePlot[
                   Drop[$CellContext`MemSpec$$, -1], PlotRange -> All, Frame -> 
                   True, FrameLabel -> {"Time / \[Mu]s", "Intensity / a. u."},
                    GridLines -> Automatic, GridLinesStyle -> 
                   Directive[LightGray, Dashed], ImageSize -> {400, 340}, 
                   PlotLegends -> Placed[$CellContext`fieldLegend$$, Above]]],
                  "Memorize Something"]], $CellContext`no$$ == 2, 
               If[$CellContext`z5$$ == 1, 
                If[Length[$CellContext`MemSpecNormSh$$] >= 2, 
                 ListLinePlot[
                  Drop[$CellContext`MemSpecNormSh$$, -1], PlotRange -> All, 
                  Frame -> True, 
                  FrameLabel -> {"Time / \[Mu]s", "Intensity / a. u."}, 
                  GridLines -> Automatic, GridLinesStyle -> 
                  Directive[LightGray, Dashed], ImageSize -> {400, 250}, 
                  PlotLegends -> Placed[$CellContext`fieldLegend$$, Above]], 
                 "Memorize Something"], 
                If[Length[$CellContext`MemSpecNormSh$$] >= 2, 
                 $CellContext`PlotExplorer[
                  ListLinePlot[
                   Drop[$CellContext`MemSpecNormSh$$, -1], PlotRange -> All, 
                   Frame -> True, 
                   FrameLabel -> {"Time / \[Mu]s", "Intensity / a. u."}, 
                   GridLines -> Automatic, GridLinesStyle -> 
                   Directive[LightGray, Dashed], ImageSize -> {400, 340}, 
                   PlotLegends -> Placed[$CellContext`fieldLegend$$, Above]]],
                  "Memorize Something"]]]], StandardForm],
            ImageSizeCache->{96., {2., 7.}}]}
         },
         AutoDelete->False,
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"]}
     },
     AutoDelete->False,
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
    "Grid"],
   Background->RGBColor[0.985, 0.985, 0.985],
   FrameMargins->{{5, 5}, {5, 5}}],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{
  3.774674198031787*^9, {3.774674273761586*^9, 3.7746742792231693`*^9}, 
   3.7746743205009108`*^9, {3.774674442406314*^9, 3.774674452832172*^9}, 
   3.774674596013493*^9, 3.774674648765903*^9, {3.774674692877139*^9, 
   3.7746747571416693`*^9}, {3.774674915114792*^9, 3.77467494280138*^9}, 
   3.774674997277012*^9, 3.774675033477336*^9, 3.774675082568514*^9, 
   3.774675183002108*^9, {3.774675316239345*^9, 3.774675327714964*^9}, 
   3.774675455363299*^9, 3.774675545681877*^9, {3.774675611584963*^9, 
   3.774675660160069*^9}, 3.774675841984408*^9, 3.7746759184906073`*^9, {
   3.774676003205031*^9, 3.774676022713303*^9}, {3.774676059681905*^9, 
   3.774676061972267*^9}, {3.774676122439986*^9, 3.774676169447517*^9}, 
   3.7746762382433777`*^9, 3.774676273843739*^9, 3.7746763463502073`*^9, 
   3.7746764423451843`*^9, {3.774676502262048*^9, 3.774676521307294*^9}, 
   3.774676597613536*^9, 3.774676627947174*^9, 3.774676725363665*^9, {
   3.774676756500016*^9, 3.7746767734352207`*^9}, 3.77467682784094*^9, 
   3.774676900506833*^9, 3.774677008219329*^9, 3.774677127714121*^9, 
   3.7746776758565407`*^9, {3.7746777185736923`*^9, 3.774677757501297*^9}, {
   3.774677882398377*^9, 3.7746779071687307`*^9}, 3.7746780385030317`*^9, 
   3.7746781244863977`*^9, {3.7746781818714237`*^9, 3.774678211876302*^9}, {
   3.774678283263536*^9, 3.774678300655258*^9}, 3.7746783478994007`*^9, 
   3.774678380555236*^9, 3.7746785271907454`*^9, 3.7746785844438868`*^9, {
   3.7746786255414963`*^9, 3.7746786686970987`*^9}, {3.7746787192353086`*^9, 
   3.774678796669236*^9}, 3.77467891274408*^9, 3.7746789708881197`*^9, 
   3.77467900909019*^9, {3.774679287233651*^9, 3.7746793261992617`*^9}, 
   3.774679373387886*^9, 3.774679425687642*^9, 3.7746794681137114`*^9, {
   3.7746795522176456`*^9, 3.7746796067462482`*^9}, 3.774679669086434*^9, 
   3.774679812564617*^9, 3.774679902974257*^9, 3.774679961908442*^9, 
   3.774680099795586*^9, 3.77468018388418*^9, {3.774680233386277*^9, 
   3.774680349338311*^9}, 3.7746804144405537`*^9, 3.7746804704906597`*^9, 
   3.774680508343225*^9, 3.774680602069965*^9, 3.7746806746420813`*^9, 
   3.774680728416677*^9, 3.77468081624408*^9, {3.7746808635080137`*^9, 
   3.77468089889996*^9}, 3.774681098851018*^9, 3.7746813349943867`*^9, {
   3.774681637880301*^9, 3.774681648814073*^9}, 3.7746816923858843`*^9, {
   3.7746817929493713`*^9, 3.774681813308057*^9}, 3.774681891467311*^9, {
   3.7746824504768143`*^9, 3.774682509623617*^9}, 3.77468288018465*^9, 
   3.774682929206211*^9, {3.774735805586391*^9, 3.77473582580378*^9}, 
   3.7747358874206676`*^9, {3.774735939246353*^9, 3.774735956455312*^9}, 
   3.774736040787665*^9, {3.774736113013179*^9, 3.774736133526648*^9}, 
   3.774736213961894*^9, 3.774736297356703*^9, 3.774736340953264*^9, 
   3.774736441934175*^9, 3.7747364881987543`*^9, 3.774736548363121*^9, 
   3.774736595190838*^9, 3.774736640487317*^9, 3.77473670594072*^9, 
   3.77473679753364*^9, 3.774736890373682*^9, {3.774736952798613*^9, 
   3.774736969997732*^9}, 3.7747370078730392`*^9, 3.774737087808073*^9, 
   3.774737405149364*^9, {3.7747374398891983`*^9, 3.774737513989476*^9}, 
   3.774737560076117*^9, {3.774737606517581*^9, 3.77473762266514*^9}, {
   3.774737708755911*^9, 3.774737724486971*^9}, {3.774737765395792*^9, 
   3.774737798750532*^9}, 3.774737863430519*^9, {3.7747379283832693`*^9, 
   3.774737956952655*^9}, 3.774738008936137*^9, 3.774738086991754*^9, {
   3.7747381287665854`*^9, 3.774738168301279*^9}, 3.774738367226597*^9, 
   3.774741373170807*^9, 3.77474150836736*^9, 3.774741568214343*^9, 
   3.7747431227673683`*^9, {3.7747482207240887`*^9, 3.774748244237061*^9}, 
   3.7747482923254757`*^9, 3.7747549160673027`*^9, {3.774754984223984*^9, 
   3.774754987872257*^9}, 3.77475506486508*^9, 3.774761167201029*^9, {
   3.774761938344089*^9, 3.7747619428880568`*^9}, {3.774761988480974*^9, 
   3.774762016512683*^9}, 3.774822536219864*^9, 3.774822918183817*^9, {
   3.774823038986207*^9, 3.774823075890943*^9}, 3.774823121719067*^9, 
   3.774824262273687*^9, 3.77482430760632*^9, {3.77482434269066*^9, 
   3.774824349202261*^9}, 3.774824498606312*^9, {3.774824924761736*^9, 
   3.774824961113221*^9}, 3.774825013828395*^9, {3.774825182760725*^9, 
   3.774825262511384*^9}, 3.7748258057571583`*^9, {3.774825912242815*^9, 
   3.774825922523266*^9}, 3.7748263386601257`*^9, 3.774827334391534*^9, 
   3.774827534319022*^9, 3.774827858450053*^9, 3.7748279276081553`*^9, 
   3.7748283424146957`*^9, 3.774828506694993*^9, 3.774828641008864*^9, {
   3.774828712307811*^9, 3.774828737410366*^9}, 3.77482885556047*^9, {
   3.774828938483397*^9, 3.774828943875457*^9}, 3.774829019235592*^9, 
   3.77482906033392*^9, 3.774829114616273*^9, {3.774829187714027*^9, 
   3.774829196435021*^9}, 3.774829227130251*^9, 3.7748375240634947`*^9, 
   3.7748378937062073`*^9, 3.774838091905731*^9, {3.7748381535351067`*^9, 
   3.774838182265081*^9}, 3.774907920613565*^9, 3.774913195138359*^9, 
   3.774913354279396*^9, 3.774913499232264*^9, 3.774913646916369*^9, 
   3.774915247615727*^9, {3.774923985767362*^9, 3.774923991975415*^9}, 
   3.7751699413806257`*^9, 3.775170156084176*^9, 3.775170291784315*^9, 
   3.775171386941573*^9, 3.77534391924209*^9, 3.775344237814725*^9, 
   3.775344329727347*^9, {3.775344366097433*^9, 3.775344404064468*^9}, 
   3.7753445193463717`*^9, {3.775344655863604*^9, 3.7753446880956297`*^9}, 
   3.775345322681644*^9, 3.7753455864550257`*^9, 3.775345684075652*^9, 
   3.775345745308702*^9, 3.77534583894947*^9, 3.775350710871895*^9, 
   3.775878416559911*^9, {3.775878607992543*^9, 3.775878651810773*^9}, {
   3.775878683099641*^9, 3.7758786895791388`*^9}, 3.7758787827123623`*^9, 
   3.775879831075904*^9, {3.775880054630872*^9, 3.775880057672573*^9}, {
   3.775880174479432*^9, 3.7758801979175262`*^9}, {3.775880357416058*^9, 
   3.775880407932941*^9}, 3.7758805361180363`*^9, 3.7824237659263973`*^9, 
   3.782698140157219*^9, 3.7826991705542727`*^9, 3.782714058045277*^9, 
   3.782714235884152*^9, 3.782714452889901*^9, 3.7827150737215977`*^9, 
   3.782715245215044*^9, 3.782715453151169*^9, 3.78271574277677*^9, {
   3.784529482428434*^9, 3.7845295006668377`*^9}},
 CellLabel->"Out[66]=",ExpressionUUID->"8a7178d3-44a3-4cc2-be79-55bdc9309cf7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"phase0", "=", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"EF", "=", "Field"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SF", "=", "Field"}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"TimeOut", "=", 
     RowBox[{"dataTime", "[", 
      RowBox[{"[", 
       RowBox[{"-", "1"}], "]"}], "]"}]}], ";"}], "*)"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DynamicModule", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "datasum", ",", "averData", ",", "modelAve", ",", "graverData2", ",", 
      "modelreduceExpAve", ",", "modelreduceZLAve", ",", "y2", ",", "fitAve", 
      ",", "graverData", ",", "gr1Ave", ",", "gr1reducedExpAve", ",", 
      "gr1reducedZLAve", ",", "gr2Ave", ",", "fitresAve", ",", "grdataAve", 
      ",", "textdata2Ave", ",", "textdataAve", ",", "modelAveSin", ",", 
      "modelAveSinreduce", ",", "modelAveSinreduceZL", ",", 
      "modelAveSinreduceExp", ",", "fitAveSin", ",", "gr5Ave", ",", "gr6Ave", 
      ",", "gr5AvereducedZL", ",", "gr5AvereducedExp", ",", "fitres3Ave", ",",
       "textdata13Ave", ",", "textdata23Ave", ",", "f2", ",", "zzz", ",", 
      "gr5Avereduced", ",", "f", ",", "grdata4Ave", ",", "modelAve2Exp", ",", 
      "modelAve2ExpReduce", ",", "modelAve2ExpreduceZL", ",", 
      "modelAve2ExpreduceExp", ",", "fitAve2Exp", ",", "gr7Ave", ",", 
      "gr8Ave", ",", "gr7Avereduced", ",", "gr7AvereducedZL", ",", 
      "gr7Avereduced2Exp", ",", "fitres4Ave", ",", "grdata5Ave", ",", 
      "textdataAve2Exp", ",", "textdataAve2Exp2", ",", "textdata3Ave", ",", 
      "textdata4Ave", ",", "bl", ",", "ClickerAve", ",", "ClickerAvePlot", 
      ",", "area", ",", "allgr", ",", "\[IndentingNewLine]", 
      "GraphDensityPlotManipCorrFieldFit", ",", 
      "GraphDensityPlotManipCorrFit", ",", "GraphDensityPlotManipFit", ",", 
      "Clicker2DFit", ",", "\[IndentingNewLine]", "averDataNorm", ",", 
      "averDataNormSh", ",", "\[IndentingNewLine]", "ndelave", ",", "MemAve", 
      ",", "MemAveNorm", ",", "MemAveNormSh", ",", "aveLegend", ",", "tave", 
      ",", "noave", ",", "\[IndentingNewLine]", "aveLegendButton"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Off", "[", 
      RowBox[{"StringJoin", "::", "string"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Off", "[", 
      RowBox[{"General", "::", "munfl"}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"ndelave", "=", "1"}], ";", "\[IndentingNewLine]", 
     RowBox[{"MemAve", "=", 
      RowBox[{"{", "0", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"MemAveNorm", "=", 
      RowBox[{"{", "0", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"MemAveNormSh", "=", 
      RowBox[{"{", "0", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"aveLegend", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"aveLegendButton", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Panel", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Grid", "[", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Grid", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Style", "[", 
                 RowBox[{
                 "\"\<Full Path to File For Saving: \>\"", ",", "Bold"}], 
                 "]"}], ",", 
                RowBox[{"Dynamic", "[", "f2", "]"}], ",", " ", 
                "SpanFromLeft"}], "}"}], ",", 
              RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Style", "[", 
                 RowBox[{
                 "\"\<Choose Parameters For Fitting of Arbitrary Part of \
Averaged Kinetics:\n\>\"", ",", "Bold"}], "]"}], ",", "SpanFromLeft"}], "}"}],
               ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"StringJoin", "[", 
                   RowBox[{
                   "\"\<Choose Zero Time \>\"", ",", "\"\<\[Mu]s\>\"", ",", 
                    " ", "\"\< :\>\""}], "]"}], ",", 
                  RowBox[{"Manipulator", "[", 
                   RowBox[{
                    RowBox[{"Dynamic", "[", "TimeIn", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Min", "[", "dataTime", "]"}], ",", 
                    RowBox[{"Max", "[", "dataTime", "]"}], ",", 
                    "TimeResolution"}], "}"}], ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}]}], 
                   "]"}]}], "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{"\"\<Base Level:\>\"", ",", 
                RowBox[{"InputField", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", "ZL0", "]"}], ",", "Number"}], 
                 "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{"\"\<Amplitude of Exp1:\>\"", ",", 
                RowBox[{"InputField", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", "A10", "]"}], ",", "Number"}], 
                 "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{"\"\<Power of Exp1:\>\"", ",", 
                RowBox[{"InputField", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", "T0", "]"}], ",", "Number"}], 
                 "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{"\"\<Amplitude of Exp2:\>\"", ",", 
                RowBox[{"InputField", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", "A20", "]"}], ",", "Number"}], 
                 "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{"\"\<Power of Exp2:\>\"", ",", 
                RowBox[{"InputField", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", "T20", "]"}], ",", "Number"}], 
                 "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"\"\<Phase of Sin:\>\"", ",", 
                  RowBox[{"InputField", "[", 
                   RowBox[{
                    RowBox[{"Dynamic", "[", "phase0", "]"}], ",", "Number"}], 
                   "]"}]}], "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"ClickerAve", "=", "0"}], ";", 
                RowBox[{"ClickerAvePlot", "=", "0"}], ";", 
                RowBox[{"Clicker2DFit", "=", "0"}], ";"}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{"\"\<Plot Explorer Function:\>\"", ",", " ", 
                RowBox[{"Checkbox", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", "y2", "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{"\"\<Model Wihout BaseLine:\>\"", ",", " ", 
                RowBox[{"Checkbox", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", "bl", "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
               "\"\<After Changing Fit Data Button Should Be Pressed\>\"", 
                ",", "SpanFromLeft"}], "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{"\"\<Type of Model:\>\"", ",", " ", 
                RowBox[{"RadioButtonBar", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", "zzz", "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"1", "\[Rule]", "\"\<One Exp\>\""}], ",", 
                    RowBox[{"2", "\[Rule]", "\"\<Two Exp\>\""}], ",", 
                    RowBox[{"3", "\[Rule]", "\"\<Linear\>\""}]}], "}"}]}], 
                 "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{"\"\<Start Field For Averaging / G:\>\"", ",", 
                RowBox[{"InputField", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", "SF", "]"}], ",", "Number"}], 
                 "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{"\"\<End Field For Averaging / G:\>\"", ",", 
                RowBox[{"InputField", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", "EF", "]"}], ",", "Number"}], 
                 "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
               "\"\<After Changing Averaged Plot Should Be Replotted\>\"", 
                ",", " ", "SpanFromLeft"}], "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
               "\"\<Start Time For Arbitrary Part / \[Mu]s: \>\"", ",", " ", 
                RowBox[{"InputField", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", "TimeIn", "]"}], ",", "Number"}], 
                 "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{"\"\<End Time For Arbitrary Part / \[Mu]s:\>\"", ",", 
                RowBox[{"InputField", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", "TimeOut", "]"}], ",", "Number"}], 
                 "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              StyleBox[
               RowBox[{"(*", "FITTING", "*)"}], "Title"], 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{"\"\< \>\"", ",", 
                RowBox[{"Button", "[", 
                 RowBox[{
                  RowBox[{"Style", "[", 
                   RowBox[{"\"\<Fit Data\>\"", ",", "Bold"}], "]"}], ",", 
                  "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"Or", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "SF", "]"}], "\[Equal]", "Integer"}],
                     ",", 
                    RowBox[{
                    RowBox[{"Head", "[", "SF", "]"}], "\[Equal]", "Real"}]}], 
                    "]"}], ",", 
                    RowBox[{"Or", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "EF", "]"}], "\[Equal]", "Integer"}],
                     ",", 
                    RowBox[{
                    RowBox[{"Head", "[", "EF", "]"}], "\[Equal]", "Real"}]}], 
                    "]"}], ",", 
                    RowBox[{"EF", "\[GreaterEqual]", "SF"}], ",", 
                    RowBox[{"SF", "\[GreaterEqual]", "StartField"}], ",", 
                    RowBox[{"EF", "\[LessEqual]", "EndField"}], ",", 
                    RowBox[{"EF", "\[GreaterEqual]", "StartField"}], ",", 
                    RowBox[{"SF", "\[LessEqual]", "EndField"}], ",", 
                    RowBox[{
                    RowBox[{"Head", "[", "fileData", "]"}], "\[Equal]", 
                    "List"}], ",", 
                    RowBox[{
                    RowBox[{"Head", "[", "dataKinetics", "]"}], "\[Equal]", 
                    "List"}], ",", 
                    RowBox[{
                    RowBox[{"StringStartsQ", "[", 
                    RowBox[{
                    RowBox[{"fileData", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", "\"\<%\>\""}],
                     "]"}], "\[Equal]", "True"}], ",", 
                    RowBox[{"Or", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"NumberQ", "[", "TimeOut", "]"}], "\[Equal]", 
                    "True"}], ",", 
                    RowBox[{"TimeOut", "\[NotEqual]", "Null"}]}], "]"}], ",", 
                    RowBox[{"Or", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"NumberQ", "[", "TimeIn", "]"}], "\[Equal]", 
                    "True"}], ",", 
                    RowBox[{"TimeIn", "\[NotEqual]", "Null"}]}], "]"}], ",", 
                    RowBox[{"TimeOut", "\[LessEqual]", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", 
                    RowBox[{"-", "1"}], "]"}], "]"}]}], ",", 
                    RowBox[{
                    "TimeOut", "\[GreaterEqual]", " ", "TimeResolution"}], 
                    ",", 
                    RowBox[{"TimeIn", "\[LessEqual]", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", 
                    RowBox[{"-", "1"}], "]"}], "]"}]}], ",", 
                    RowBox[{
                    "TimeIn", "\[GreaterEqual]", " ", "TimeResolution"}], ",", 
                    RowBox[{"TimeIn", "<", " ", "TimeOut"}]}], "]"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"FitTime", "=", 
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{"TimeIn", "/", "TimeResolution"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"TimeEnd", "=", 
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{"TimeOut", "/", "TimeResolution"}], "]"}], "-", 
                    "FitTime"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"area", " ", "=", " ", 
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"100", " ", 
                    RowBox[{"Sign", "[", 
                    RowBox[{"x", "-", "TimeOut"}], "]"}]}], ",", 
                    RowBox[{"100", " ", 
                    RowBox[{"Sign", "[", 
                    RowBox[{"x", "-", "TimeIn"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"TimeOut", "+", "0.1"}]}], "}"}], ",", 
                    RowBox[{"ExclusionsStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"Red", ",", "Thick", ",", "Dashed"}], "]"}]}], 
                    ",", 
                    RowBox[{"PlotRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1"}], "}"}]}], ",", 
                    RowBox[{"Filling", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", "\[Rule]", 
                    RowBox[{"{", "2", "}"}]}], "}"}]}], ",", 
                    RowBox[{"FillingStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Lighter", "[", 
                    RowBox[{"Red", ",", "0.1"}], "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.1", "]"}]}], "]"}]}]}], 
                    "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"ClickerAve", "=", "1"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "Summing", " ", "data", " ", "in", " ", "different", " ", 
                    "field"}], "*)"}], "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"s", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"f", "[", "H_", "]"}], ":=", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{"dataKinetics", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"H", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "}"}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"s", "\[Equal]", "2"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"f", "[", "H_", "]"}], ":=", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{"dataKineticsCorr", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"H", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "}"}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"s", "\[Equal]", "3"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"f", "[", "H_", "]"}], ":=", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{"dataKineticsCorrField", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"H", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "}"}], "]"}]}]}], "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"data", "=", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{"dataKineticsCorrField", "[", 
                    RowBox[{"[", 
                    RowBox[{"FitField", ",", "All"}], "]"}], "]"}]}], "}"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", "FitTime", "]"}], "-", 
                    "1"}]}], "]"}], ",", "15"}], "]"}]}], "*)"}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"datasum", "=", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"f", "[", "H", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"H", ",", 
                    RowBox[{"Round", "[", 
                    RowBox[{"SF", ",", "FieldResolution"}], "]"}], ",", 
                    RowBox[{"Round", "[", 
                    RowBox[{"EF", ",", "FieldResolution"}], "]"}], ",", 
                    "FieldResolution"}], "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"averData", "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Total", "[", "#", "]"}], "/", 
                    RowBox[{"Length", "[", "datasum", "]"}]}], "&"}], ",", 
                    RowBox[{"Transpose", "[", "datasum", "]"}]}], "]"}]}], 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"graverData", "=", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{"averData", ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<Intensity / a. u.\>\""}], 
                    "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "250"}], "}"}]}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"Simple", " ", "Exponential", " ", "Fitting"}], 
                    "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"Which", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"bl", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"modelAve", "=", 
                    RowBox[{"ZL", " ", "+", 
                    RowBox[{"A1", "*", 
                    RowBox[{"Exp", "[", 
                    RowBox[{
                    RowBox[{"-", "t"}], "/", "T"}], "]"}]}]}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"bl", "\[Equal]", "2"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"modelAve", "=", 
                    RowBox[{"(*", "ZL", "*)"}], " ", 
                    RowBox[{
                    RowBox[{"+", "A1"}], "*", 
                    RowBox[{"Exp", "[", 
                    RowBox[{
                    RowBox[{"-", "t"}], "/", "T"}], "]"}]}]}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"modelreduceZLAve", "=", "ZL"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"modelreduceExpAve", "=", 
                    RowBox[{"A1", "*", 
                    RowBox[{"Exp", "[", 
                    RowBox[{
                    RowBox[{"-", "t"}], "/", "T"}], "]"}]}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Exponential", " ", "Fitting"}], " ", "+", " ", 
                    "Sinus"}], ";", " ", 
                    RowBox[{"Linear", " ", "Now"}]}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"modelAveSin", "=", 
                    RowBox[{"ZL", " ", "+", 
                    RowBox[{"A1", "*", 
                    RowBox[{"Exp", "[", 
                    RowBox[{
                    RowBox[{"-", "t"}], "/", "T"}], "]"}]}], "+", 
                    RowBox[{"A2", "*", 
                    RowBox[{"Sin", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "t"}], "/", "T2"}], " ", "+", " ", "phase"}],
                     "]"}]}]}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"modelAveSinreduce", "=", 
                    RowBox[{"A2", "*", 
                    RowBox[{"Sin", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "t"}], "/", "T2"}], " ", "+", " ", "phase"}],
                     "]"}]}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"modelAveSinreduceZL", "=", "ZL"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"modelAveSinreduceExp", "=", 
                    RowBox[{"A1", "*", 
                    RowBox[{"Exp", "[", 
                    RowBox[{
                    RowBox[{"-", "t"}], "/", "T"}], "]"}]}]}], ";"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"modelAveSin", "=", 
                    RowBox[{"ZL", " ", "-", 
                    RowBox[{"t", "/", "T"}]}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"modelAveSinreduceZL", "=", "ZL"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"modelAveSinreduceExp", "=", 
                    RowBox[{
                    RowBox[{"-", "t"}], "/", "T"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{"Two", " ", "Exponential", " ", "Fitting"}], " ", 
                    "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"Which", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"bl", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"modelAve2Exp", "=", 
                    RowBox[{"ZL", " ", "+", 
                    RowBox[{"A1", "*", 
                    RowBox[{"Exp", "[", 
                    RowBox[{
                    RowBox[{"-", "t"}], "/", "T"}], "]"}]}], "+", 
                    RowBox[{"A2", "*", 
                    RowBox[{"Exp", "[", 
                    RowBox[{
                    RowBox[{"-", "t"}], "/", "T2"}], " ", "]"}]}]}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"bl", "\[Equal]", "2"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"modelAve2Exp", "=", 
                    RowBox[{"(*", "ZL", " ", "*)"}], 
                    RowBox[{
                    RowBox[{
                    RowBox[{"+", "A1"}], "*", 
                    RowBox[{"Exp", "[", 
                    RowBox[{
                    RowBox[{"-", "t"}], "/", "T"}], "]"}]}], "+", 
                    RowBox[{"A2", "*", 
                    RowBox[{"Exp", "[", 
                    RowBox[{
                    RowBox[{"-", "t"}], "/", "T2"}], " ", "]"}]}]}]}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"modelAve2ExpReduce", "=", 
                    RowBox[{"A2", "*", 
                    RowBox[{"Exp", "[", 
                    RowBox[{
                    RowBox[{"-", "t"}], "/", "T2"}], " ", "]"}]}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"modelAve2ExpreduceZL", "=", "ZL"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"modelAve2ExpreduceExp", "=", 
                    RowBox[{"A1", "*", 
                    RowBox[{"Exp", "[", 
                    RowBox[{
                    RowBox[{"-", "t"}], "/", "T"}], "]"}]}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "Drop", " ", "data", " ", "before", " ", "pulse"}], 
                    "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerQ", "[", "TimeEnd", "]"}], "\[Equal]", 
                    "True"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"fitAve", "=", 
                    RowBox[{"NonlinearModelFit", "[", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"averData", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", "FitTime", "]"}], "-", 
                    "1"}]}], "]"}], ",", "TimeEnd"}], "]"}], ",", "modelAve", 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"ZL", ",", "ZL0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"A1", ",", "A10"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"T", ",", "T0"}], "}"}]}], "}"}], ",", "t", ",", 
                    RowBox[{"MaxIterations", "\[Rule]", "10000"}], ",", " ", 
                    RowBox[{"AccuracyGoal", "\[Rule]", "8"}]}], "]"}]}], ",", 
                    RowBox[{"fitAve", "=", 
                    RowBox[{"NonlinearModelFit", "[", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"averData", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", "FitTime", "]"}], "-", 
                    "1"}]}], "]"}], ",", "All"}], "]"}], ",", "modelAve", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"ZL", ",", "ZL0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"A1", ",", "A10"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"T", ",", "T0"}], "}"}]}], "}"}], ",", "t", ",", 
                    RowBox[{"MaxIterations", "\[Rule]", "10000"}], ",", " ", 
                    RowBox[{"AccuracyGoal", "\[Rule]", "8"}]}], "]"}]}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"Linear", " ", "Now"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"fitAveSin", "=", 
                    RowBox[{"NonlinearModelFit", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"averData", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", "FitTime", "]"}], "-", 
                    "1"}]}], "]"}], ",", "modelAveSin", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"ZL", ",", "ZL0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"A1", ",", "A10"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"T", ",", "T0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"A2", ",", "A20"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"T2", ",", "T20"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"phase", ",", "phase0"}], "}"}]}], "}"}], ",", 
                    "t", ",", 
                    RowBox[{"MaxIterations", "\[Rule]", "10000"}], ",", " ", 
                    RowBox[{"AccuracyGoal", "\[Rule]", "8"}]}], "]"}]}], 
                    ";"}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerQ", "[", "TimeEnd", "]"}], "\[Equal]", 
                    "True"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"fitAveSin", "=", 
                    RowBox[{"NonlinearModelFit", "[", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"averData", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", "FitTime", "]"}], "-", 
                    "1"}]}], "]"}], ",", "TimeEnd"}], "]"}], ",", 
                    "modelAveSin", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"ZL", ",", "ZL0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"T", ",", "T0"}], "}"}]}], "}"}], ",", "t", ",", 
                    RowBox[{"MaxIterations", "\[Rule]", "10000"}], ",", " ", 
                    RowBox[{"AccuracyGoal", "\[Rule]", "8"}]}], "]"}]}], ",", 
                    RowBox[{"fitAveSin", "=", 
                    RowBox[{"NonlinearModelFit", "[", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"averData", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", "FitTime", "]"}], "-", 
                    "1"}]}], "]"}], ",", "All"}], "]"}], ",", "modelAveSin", 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"ZL", ",", "ZL0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"T", ",", "T0"}], "}"}]}], "}"}], ",", "t", ",", 
                    RowBox[{"MaxIterations", "\[Rule]", "10000"}], ",", " ", 
                    RowBox[{"AccuracyGoal", "\[Rule]", "8"}]}], "]"}]}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"fitAve2Exp", "=", 
                    RowBox[{"NonlinearModelFit", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"averData", ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", "FitTime", "]"}], "-", 
                    "1"}]}], "]"}], ",", "modelAve2Exp", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"ZL", ",", "ZL0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"A1", ",", "A10"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"T", ",", "T0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"A2", ",", "A20"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"T2", ",", "T20"}], "}"}]}], "}"}], ",", "t", ",", 
                    RowBox[{"MaxIterations", "\[Rule]", "10000"}], ",", " ", 
                    RowBox[{"AccuracyGoal", "\[Rule]", "8"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{"Exp", ";", " ", 
                    RowBox[{
                    RowBox[{"!!", 
                    RowBox[{"!!", 
                    RowBox[{"!!", 
                    RowBox[{"!!", 
                    RowBox[{"!!", 
                    RowBox[{"!!", 
                    RowBox[{"Check", " ", 
                    RowBox[{"TmeEnd", "!"}], "   ", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", "TimeEnd", "]"}], "]"}]}]}]}]}]}]}]}], "   ",
                     "\[Rule]", "  ", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", 
                    RowBox[{"TimeEnd", " ", "+", " ", "FitTime"}], "]"}], 
                    "]"}]}]}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerQ", "[", "TimeEnd", "]"}], "\[Equal]", 
                    "True"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"gr1Ave", "=", 
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Normal", "[", "fitAve", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"t", ",", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", "FitTime", "]"}], "]"}], ",", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", 
                    RowBox[{"TimeEnd", "+", "FitTime"}], "]"}], "]"}]}], 
                    "}"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Blue", ",", "Thick"}], "}"}]}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], ",", 
                    RowBox[{"gr1Ave", "=", 
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Normal", "[", "fitAve", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"t", ",", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", "FitTime", "]"}], "]"}], ",", 
                    RowBox[{"Max", "[", "dataTime", "]"}]}], "}"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Blue", ",", "Thick"}], "}"}]}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"gr1reducedExpAve", "=", 
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"modelreduceExpAve", "/.", 
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"fitAve", "[", "\"\<BestFitParameters\>\"", "]"}],
                     ",", "3"}], "]"}], ",", "1"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"t", ",", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", "FitTime", "]"}], "]"}], ",", 
                    RowBox[{"Max", "[", "dataTime", "]"}]}], "}"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Red", ",", "Dashed", ",", "Thick"}], "}"}]}], 
                    ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"gr1reducedZLAve", "=", 
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"modelreduceZLAve", "/.", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"fitAve", "[", "\"\<BestFitParameters\>\"", "]"}],
                     ",", "1"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"t", ",", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", "FitTime", "]"}], "]"}], ",", 
                    RowBox[{"Max", "[", "dataTime", "]"}]}], "}"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Gray", ",", "Dotted", ",", "Thin"}], "}"}]}], 
                    ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"gr2Ave", "=", 
                    RowBox[{"ListPlot", "[", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"averData", ",", 
                    RowBox[{"IntegerPart", "[", "FitTime", "]"}]}], "]"}], 
                    ",", "TimeEnd"}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Gray", ",", "Small"}], "}"}]}], ",", 
                    RowBox[{"MaxPlotPoints", "\[Rule]", "3000"}], ",", 
                    RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<\>\""}], "}"}]}]}], "]"}]}], 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"Sin", " ", "+", " ", "Exp"}], ";", " ", 
                    RowBox[{"Linear", " ", "Now"}]}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"gr5Ave", "=", 
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Normal", "[", "fitAveSin", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"t", ",", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", "FitTime", "]"}], "]"}], ",", 
                    RowBox[{"Max", "[", "dataTime", "]"}]}], "}"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Blue", ",", "Thick"}], "}"}]}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"gr6Ave", "=", 
                    RowBox[{"ListPlot", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"averData", ",", 
                    RowBox[{"IntegerPart", "[", "FitTime", "]"}]}], "]"}], 
                    ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Gray", ",", "Small"}], "}"}]}], ",", 
                    RowBox[{"MaxPlotPoints", "\[Rule]", "3000"}]}], "]"}]}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"gr5Avereduced", "=", 
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"modelAveSinreduce", "/.", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{
                    "fitAveSin", "[", "\"\<BestFitParameters\>\"", "]"}], ",", 
                    RowBox[{"-", "3"}]}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"t", ",", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", "FitTime", "]"}], "]"}], ",", 
                    RowBox[{"Max", "[", "dataTime", "]"}]}], "}"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Purple", ",", "Dashed", ",", "Thick"}], "}"}]}], 
                    ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"gr5AvereducedZL", "=", 
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"modelAveSinreduceZL", "/.", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{
                    "fitAveSin", "[", "\"\<BestFitParameters\>\"", "]"}], ",",
                     "1"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"t", ",", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", "FitTime", "]"}], "]"}], ",", 
                    RowBox[{"Max", "[", "dataTime", "]"}]}], "}"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Gray", ",", "Dotted", ",", "Thin"}], "}"}]}], 
                    ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"gr5AvereducedExp", "=", 
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"modelAveSinreduceExp", "/.", 
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{
                    "fitAveSin", "[", "\"\<BestFitParameters\>\"", "]"}], ",",
                     "3"}], "]"}], ",", "1"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"t", ",", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", "FitTime", "]"}], "]"}], ",", 
                    RowBox[{"Max", "[", "dataTime", "]"}]}], "}"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Red", ",", "Dashed", ",", "Thick"}], "}"}]}], 
                    ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], ";"}],
                     "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerQ", "[", "TimeEnd", "]"}], "\[Equal]", 
                    "True"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"gr5Ave", "=", 
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Normal", "[", "fitAveSin", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"t", ",", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", "FitTime", "]"}], "]"}], ",", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", 
                    RowBox[{"TimeEnd", "+", "FitTime"}], "]"}], "]"}]}], 
                    "}"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Blue", ",", "Thick"}], "}"}]}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], ",", 
                    RowBox[{"gr5Ave", "=", 
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Normal", "[", "fitAveSin", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"t", ",", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", "FitTime", "]"}], "]"}], ",", 
                    RowBox[{"Max", "[", "dataTime", "]"}]}], "}"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Blue", ",", "Thick"}], "}"}]}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"gr6Ave", "=", 
                    RowBox[{"ListPlot", "[", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"averData", ",", 
                    RowBox[{"IntegerPart", "[", "FitTime", "]"}]}], "]"}], 
                    ",", "TimeEnd"}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Gray", ",", "Small"}], "}"}]}], ",", 
                    RowBox[{"MaxPlotPoints", "\[Rule]", "3000"}], ",", 
                    RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<\>\""}], "}"}]}]}], "]"}]}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"gr5AvereducedZL", "=", 
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"modelAveSinreduceZL", "/.", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{
                    "fitAveSin", "[", "\"\<BestFitParameters\>\"", "]"}], ",",
                     "1"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"t", ",", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", "FitTime", "]"}], "]"}], ",", 
                    RowBox[{"Max", "[", "dataTime", "]"}]}], "}"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Gray", ",", "Dotted", ",", "Thin"}], "}"}]}], 
                    ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerQ", "[", "TimeEnd", "]"}], "\[Equal]", 
                    "True"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"gr5AvereducedExp", "=", 
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"modelAveSinreduceExp", "/.", 
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{
                    "fitAveSin", "[", "\"\<BestFitParameters\>\"", "]"}], ",",
                     "2"}], "]"}], ",", "1"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"t", ",", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", "FitTime", "]"}], "]"}], ",", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", 
                    RowBox[{"TimeEnd", "+", "FitTime"}], "]"}], "]"}]}], 
                    "}"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Red", ",", "Dashed", ",", "Thick"}], "}"}]}], 
                    ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], ";"}],
                     ",", 
                    RowBox[{"gr5AvereducedExp", "=", 
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"modelAveSinreduceExp", "/.", 
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{
                    "fitAveSin", "[", "\"\<BestFitParameters\>\"", "]"}], ",",
                     "2"}], "]"}], ",", "1"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"t", ",", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", "FitTime", "]"}], "]"}], ",", 
                    RowBox[{"Max", "[", "dataTime", "]"}]}], "}"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Red", ",", "Dashed", ",", "Thick"}], "}"}]}], 
                    ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"Two", " ", "Exp"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"gr7Ave", "=", 
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"Normal", "[", "fitAve2Exp", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"t", ",", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", "FitTime", "]"}], "]"}], ",", 
                    RowBox[{"Max", "[", "dataTime", "]"}]}], "}"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Blue", ",", "Thick"}], "}"}]}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"gr8Ave", "=", 
                    RowBox[{"ListPlot", "[", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"averData", ",", 
                    RowBox[{"IntegerPart", "[", "FitTime", "]"}]}], "]"}], 
                    ",", "TimeEnd"}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Gray", ",", "Small"}], "}"}]}], ",", 
                    RowBox[{"MaxPlotPoints", "\[Rule]", "3000"}], ",", 
                    RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<\>\""}], "}"}]}]}], "]"}]}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"gr7Avereduced", "=", 
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"modelAve2ExpReduce", "/.", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{
                    "fitAve2Exp", "[", "\"\<BestFitParameters\>\"", "]"}], 
                    ",", 
                    RowBox[{"-", "3"}]}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"t", ",", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", "FitTime", "]"}], "]"}], ",", 
                    RowBox[{"Max", "[", "dataTime", "]"}]}], "}"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Purple", ",", "Dashed", ",", "Thick"}], "}"}]}], 
                    ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"gr7AvereducedZL", "=", 
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"modelAve2ExpreduceZL", "/.", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{
                    "fitAve2Exp", "[", "\"\<BestFitParameters\>\"", "]"}], 
                    ",", "1"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"t", ",", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", "FitTime", "]"}], "]"}], ",", 
                    RowBox[{"Max", "[", "dataTime", "]"}]}], "}"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Gray", ",", "Dotted", ",", "Thin"}], "}"}]}], 
                    ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"gr7Avereduced2Exp", "=", 
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"modelAve2ExpreduceExp", "/.", 
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{
                    "fitAve2Exp", "[", "\"\<BestFitParameters\>\"", "]"}], 
                    ",", "3"}], "]"}], ",", "1"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"t", ",", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", "FitTime", "]"}], "]"}], ",", 
                    RowBox[{"Max", "[", "dataTime", "]"}]}], "}"}], ",", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Red", ",", "Dashed", ",", "Thick"}], "}"}]}], 
                    ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"One", " ", "Exp"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerQ", "[", "TimeEnd", "]"}], "\[Equal]", 
                    "True"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"fitresAve", "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Show", "[", 
                    RowBox[{
                    "gr2Ave", ",", "gr1Ave", ",", "gr1reducedZLAve", ",", 
                    "gr1reducedExpAve"}], "]"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"ListPlot", "[", 
                    RowBox[{
                    RowBox[{"fitAve", "[", "\"\<FitResiduals\>\"", "]"}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{"DataRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"TimeIn", ",", "TimeOut"}], "}"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", " ", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "250"}], "}"}]}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
                    RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<\>\""}], "}"}]}]}], "]"}], 
                    "}"}]}], "}"}]}], ",", 
                    RowBox[{"fitresAve", "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Show", "[", 
                    RowBox[{
                    "gr2Ave", ",", "gr1Ave", ",", "gr1reducedZLAve", ",", 
                    "gr1reducedExpAve", ",", 
                    RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<Intensity / a. u.\>\""}], 
                    "}"}]}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"ListPlot", "[", 
                    RowBox[{
                    RowBox[{"fitAve", "[", "\"\<FitResiduals\>\"", "]"}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{"DataRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Min", "[", 
                    RowBox[{"averData", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], ",", 
                    RowBox[{"Max", "[", 
                    RowBox[{"averData", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}]}], "}"}]}],
                     ",", 
                    RowBox[{"ImageSize", "\[Rule]", " ", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "250"}], "}"}]}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
                    RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<\>\""}], "}"}]}]}], "]"}], 
                    "}"}]}], "}"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"Sin", " ", "+", " ", "Exp"}], ";", " ", 
                    RowBox[{"Linear", " ", "Now"}]}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{"fitres3Ave", "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Show", "[", 
                    RowBox[{
                    "gr6Ave", ",", "gr5Ave", ",", "gr5Avereduced", ",", 
                    "gr5AvereducedZL", ",", "gr5AvereducedExp", ",", 
                    RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<Intensity / a. u.\>\""}], 
                    "}"}]}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"ListPlot", "[", 
                    RowBox[{
                    RowBox[{"fitAveSin", "[", "\"\<FitResiduals\>\"", "]"}], 
                    ",", 
                    RowBox[{"Filling", "\[Rule]", "Axis"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"DataRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Min", "[", 
                    RowBox[{"averData", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], ",", 
                    "TimeOut"}], "}"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", " ", 
                    RowBox[{"{", 
                    RowBox[{"600", ",", "400"}], "}"}]}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
                    RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<\>\""}], "}"}]}]}], "]"}], 
                    "}"}]}], "}"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerQ", "[", "TimeEnd", "]"}], "\[Equal]", 
                    "True"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"fitres3Ave", "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Show", "[", 
                    RowBox[{
                    "gr6Ave", ",", "gr5Ave", ",", "gr5AvereducedZL", ",", 
                    "gr5AvereducedExp"}], "]"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"ListPlot", "[", 
                    RowBox[{
                    RowBox[{"fitAveSin", "[", "\"\<FitResiduals\>\"", "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"DataRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"TimeIn", ",", "TimeOut"}], "}"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", " ", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "250"}], "}"}]}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
                    RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<\>\""}], "}"}]}]}], "]"}], 
                    "}"}]}], "}"}]}], ";"}], ",", 
                    RowBox[{"fitres3Ave", "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Show", "[", 
                    RowBox[{
                    "gr6Ave", ",", "gr5Ave", ",", "gr5AvereducedZL", ",", 
                    "gr5AvereducedExp"}], "]"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"ListPlot", "[", 
                    RowBox[{
                    RowBox[{"fitAveSin", "[", "\"\<FitResiduals\>\"", "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"DataRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Min", "[", 
                    RowBox[{"averData", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], ",", 
                    RowBox[{"Max", "[", 
                    RowBox[{"averData", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}]}], "}"}]}],
                     ",", 
                    RowBox[{"ImageSize", "\[Rule]", " ", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "250"}], "}"}]}], ",", 
                    RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<\>\""}], "}"}]}]}], "]"}], 
                    "}"}]}], "}"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"Two", " ", "Exp"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerQ", "[", "TimeEnd", "]"}], "\[Equal]", 
                    "True"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"fitres4Ave", "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Show", "[", 
                    RowBox[{
                    "gr8Ave", ",", "gr7Ave", ",", "gr7Avereduced", ",", 
                    "gr7AvereducedZL", ",", "gr7Avereduced2Exp"}], "]"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"ListPlot", "[", 
                    RowBox[{
                    RowBox[{"fitAve2Exp", "[", "\"\<FitResiduals\>\"", "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"DataRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"TimeIn", ",", "TimeOut"}], "}"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", " ", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "250"}], "}"}]}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
                    RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<\>\""}], "}"}]}]}], "]"}], 
                    "}"}]}], "}"}]}], ";"}], ",", 
                    RowBox[{"fitres4Ave", "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Show", "[", 
                    RowBox[{
                    "gr8Ave", ",", "gr7Ave", ",", "gr7Avereduced", ",", 
                    "gr7AvereducedZL", ",", "gr7Avereduced2Exp"}], "]"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"ListPlot", "[", 
                    RowBox[{
                    RowBox[{"fitAve2Exp", "[", "\"\<FitResiduals\>\"", "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"DataRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Min", "[", 
                    RowBox[{"averData", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], ",", 
                    RowBox[{"Max", "[", 
                    RowBox[{"averData", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}]}], "}"}]}],
                     ",", 
                    RowBox[{"ImageSize", "\[Rule]", " ", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "250"}], "}"}]}], ",", 
                    RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<\>\""}], "}"}]}]}], "]"}], 
                    "}"}]}], "}"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"One", " ", "Exp"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"grdataAve", "=", 
                    RowBox[{"plotGrid", "[", 
                    RowBox[{"fitresAve", ",", "450", ",", "380", ",", 
                    RowBox[{"ImagePadding", "\[Rule]", "60"}]}], "]"}]}], ";",
                     "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"Sin", " ", "+", " ", "Exp"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"grdata4Ave", "=", 
                    RowBox[{"plotGrid", "[", 
                    RowBox[{"fitres3Ave", ",", "450", ",", "380", ",", 
                    RowBox[{"ImagePadding", "\[Rule]", "60"}]}], "]"}]}], ";",
                     "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"Two", " ", "Exp"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"grdata5Ave", "=", 
                    RowBox[{"plotGrid", "[", 
                    RowBox[{"fitres4Ave", ",", "450", ",", "380", ",", 
                    RowBox[{"ImagePadding", "\[Rule]", "60"}]}], "]"}]}], ";",
                     "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"One", " ", "Exp"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"textdataAve", "=", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#", ",", 
                    RowBox[{"fitAve", "[", "#", "]"}]}], "}"}], "&"}], "[", 
                    RowBox[{"{", "\"\<RSquared\>\"", "}"}], "]"}], "]"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Left"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"textdata2Ave", "=", 
                    RowBox[{
                    "fitAve", "[", "\"\<ParameterConfidenceIntervalTable\>\"",
                     "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"textdata3Ave", "=", 
                    RowBox[{"StringJoin", "[", 
                    RowBox[{"\"\<Exact Start Field / G        \>\"", ",", 
                    RowBox[{"ToString", "[", 
                    RowBox[{
                    RowBox[{"Round", "[", 
                    RowBox[{
                    RowBox[{"SF", "-", "StartField"}], ",", 
                    "FieldResolution"}], "]"}], "+", "StartField"}], "]"}]}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"textdata4Ave", "=", 
                    RowBox[{"StringJoin", "[", 
                    RowBox[{"\"\<Exact End Field / G          \>\"", ",", 
                    RowBox[{"ToString", "[", 
                    RowBox[{
                    RowBox[{"Round", "[", 
                    RowBox[{
                    RowBox[{"EF", "-", "StartField"}], ",", 
                    "FieldResolution"}], "]"}], "+", "StartField"}], "]"}]}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"Sin", " ", "+", " ", "Exp"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"textdata13Ave", "=", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#", ",", 
                    RowBox[{"fitAveSin", "[", "#", "]"}]}], "}"}], "&"}], "[", 
                    RowBox[{"{", "\"\<RSquared\>\"", "}"}], "]"}], "]"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Left"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"textdata23Ave", "=", 
                    RowBox[{
                    "fitAveSin", "[", 
                    "\"\<ParameterConfidenceIntervalTable\>\"", "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"Two", " ", "Exp"}], "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"textdataAve2Exp", "=", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#", ",", 
                    RowBox[{"fitAve2Exp", "[", "#", "]"}]}], "}"}], "&"}], 
                    "[", 
                    RowBox[{"{", "\"\<RSquared\>\"", "}"}], "]"}], "]"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Left"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"textdataAve2Exp2", "=", 
                    RowBox[{
                    "fitAve2Exp", "[", 
                    "\"\<ParameterConfidenceIntervalTable\>\"", "]"}]}], 
                    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"Or", "[", 
                    RowBox[{
                    RowBox[{"SF", "<", "StartField"}], ",", 
                    RowBox[{"SF", ">", "EndField"}]}], "]"}], ",", " ", 
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Starting field is incorrect\>\"", ",", "18", ",", 
                    "Black"}], "]"}], "]"}], ",", 
                    RowBox[{"Or", "[", 
                    RowBox[{
                    RowBox[{"EF", ">", "EndField"}], ",", 
                    RowBox[{"EF", "<", "StartField"}]}], "]"}], ",", " ", 
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Ending field is incorrect\>\"", ",", "18", ",", 
                    "Black"}], "]"}], "]"}], ",", 
                    RowBox[{"Or", "[", 
                    RowBox[{
                    RowBox[{"TimeOut", ">", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", 
                    RowBox[{"-", "1"}], "]"}], "]"}]}], ",", 
                    RowBox[{"TimeIn", "\[GreaterEqual]", " ", "TimeOut"}], 
                    ",", 
                    RowBox[{"TimeOut", "<", "TimeResolution"}]}], "]"}], ",", 
                    " ", 
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Time out is incorrect\>\"", ",", "18", ",", 
                    "Black"}], "]"}], "]"}], ",", 
                    RowBox[{"Or", "[", 
                    RowBox[{
                    RowBox[{"TimeIn", ">", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", 
                    RowBox[{"-", "1"}], "]"}], "]"}]}], ",", 
                    RowBox[{"TimeIn", "\[GreaterEqual]", " ", "TimeOut"}], 
                    ",", 
                    RowBox[{"TimeIn", "<", "TimeResolution"}]}], "]"}], ",", 
                    " ", 
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Time in is incorrect\>\"", ",", "18", ",", "Black"}],
                     "]"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"Abort", "[", "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<An incorrect file / incorrect field / incorrect time \
has been used\>\"", ",", "18", ",", "Black"}], "]"}], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}]}], "}"}]}], "]"}], ";"}], 
                  "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"FrameMargins", "\[Rule]", "10"}], ",", 
                  RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}]}], "]"}]}], 
               "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
              StyleBox[
               RowBox[{"(*", "SAVING", "*)"}], "Title"], 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{"f2", "=", 
                RowBox[{"FileNameJoin", "[", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\</media/Melnikov/00_Experimental_Data/\>\"", ",", 
                   "\"\<2019/FEL/\>\""}], "}"}], "]"}]}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{"\"\<Choose File Name to Save:\>\"", ",", 
                RowBox[{"FileNameSetter", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", "f2", "]"}], ",", "\"\<Save\>\"", 
                  ",", 
                  RowBox[{"ImageSize", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"100", ",", "40"}], "}"}]}]}], "]"}]}], "}"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{"\"\<\>\"", ",", 
                RowBox[{"Button", "[", 
                 RowBox[{
                  RowBox[{"Style", "[", 
                   RowBox[{
                   "\"\<Save Data, Fit, And Residuals\>\"", ",", "Bold"}], 
                   "]"}], ",", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "f2", "]"}], "\[Equal]", "String"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"Head", "[", "fileData", "]"}], "\[Equal]", 
                    "List"}], ",", 
                    RowBox[{
                    RowBox[{"Head", "[", "dataKinetics", "]"}], "\[Equal]", 
                    "List"}], ",", 
                    RowBox[{
                    RowBox[{"StringStartsQ", "[", 
                    RowBox[{
                    RowBox[{"fileData", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", "\"\<%\>\""}],
                     "]"}], "\[Equal]", "True"}]}], "]"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{
                    "f2", ",", "\"\<_Averaged_Data\>\"", ",", 
                    "\"\<.csv\>\""}], "]"}], ",", "averData", ",", 
                    "\"\<CSV\>\""}], "]"}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"zzz", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{
                    "f2", ",", "\"\<_fit_AD\>\"", ",", "\"\<.csv\>\""}], 
                    "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"t", ",", 
                    RowBox[{"Normal", "[", "fitAve", "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"t", ",", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", 
                    RowBox[{"FitTime", "+", "1"}], "]"}], "]"}], ",", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", 
                    RowBox[{"TimeEnd", "+", "FitTime"}], "]"}], "]"}], ",", 
                    "TimeResolution"}], "}"}]}], "]"}], ",", "\"\<CSV\>\""}], 
                    "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{
                    "f2", ",", "\"\<_fit_res_AD\>\"", ",", "\"\<.csv\>\""}], 
                    "]"}], ",", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{"IntegerPart", "[", "FitTime", "]"}]}], "]"}], 
                    ",", "TimeEnd"}], "]"}], ",", 
                    RowBox[{"fitAve", "[", "\"\<FitResiduals\>\"", "]"}]}], 
                    "}"}], "]"}], ",", "\"\<CSV\>\""}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{
                    "f2", ",", "\"\<_fit_parameters_AD\>\"", ",", 
                    "\"\<.csv\>\""}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{"\"\<RSquared: \>\"", ",", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"fitAve", "[", "\"\<RSquared\>\"", "]"}], "]"}], 
                    ",", "\"\<\n\>\""}], "]"}], ",", 
                    RowBox[{"ToString", "[", "textdata2Ave", "]"}], ",", 
                    "\"\<\n\>\"", ",", 
                    RowBox[{"ToString", "[", "modelAve", "]"}]}], "}"}], ",", 
                    "\"\<CSV\>\""}], "]"}], ";"}], "\[IndentingNewLine]", 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"zzz", "\[Equal]", "3"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{
                    "f2", ",", "\"\<_fit_AD_Sin\>\"", ",", "\"\<.csv\>\""}], 
                    "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"t", ",", 
                    RowBox[{"Normal", "[", "fitAveSin", "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"t", ",", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", 
                    RowBox[{"FitTime", "+", "1"}], "]"}], "]"}], ",", 
                    RowBox[{"Max", "[", "dataTime", "]"}], ",", 
                    "TimeResolution"}], "}"}]}], "]"}], ",", "\"\<CSV\>\""}], 
                    "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{
                    "f2", ",", "\"\<_fit_res_AD_Sin\>\"", ",", 
                    "\"\<.csv\>\""}], "]"}], ",", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{"IntegerPart", "[", "FitTime", "]"}]}], "]"}], 
                    ",", "TimeEnd"}], "]"}], ",", 
                    RowBox[{"fitAveSin", "[", "\"\<FitResiduals\>\"", "]"}]}],
                     "}"}], "]"}], ",", "\"\<CSV\>\""}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{
                    "f2", ",", "\"\<_fit_parameters_AD_Sin\>\"", ",", 
                    "\"\<.csv\>\""}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{"\"\<RSquared: \>\"", ",", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"fitAveSin", "[", "\"\<RSquared\>\"", "]"}], 
                    "]"}], ",", "\"\<\n\>\""}], "]"}], ",", 
                    RowBox[{"ToString", "[", "textdata23Ave", "]"}], ",", 
                    "\"\<\n\>\"", ",", 
                    RowBox[{"ToString", "[", "modelAveSin", "]"}]}], "}"}], 
                    ",", "\"\<CSV\>\""}], "]"}], ";"}], "\[IndentingNewLine]",
                     "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"zzz", "\[Equal]", "2"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{
                    "f2", ",", "\"\<_fit_AD_2Exp\>\"", ",", "\"\<.csv\>\""}], 
                    "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"t", ",", 
                    RowBox[{"Normal", "[", "fitAve2Exp", "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"t", ",", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", 
                    RowBox[{"FitTime", "+", "1"}], "]"}], "]"}], ",", 
                    RowBox[{"Max", "[", "dataTime", "]"}], ",", 
                    "TimeResolution"}], "}"}]}], "]"}], ",", "\"\<CSV\>\""}], 
                    "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{
                    "f2", ",", "\"\<_fit_res_AD_2Exp\>\"", ",", 
                    "\"\<.csv\>\""}], "]"}], ",", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{"IntegerPart", "[", "FitTime", "]"}]}], "]"}], 
                    ",", "TimeEnd"}], "]"}], ",", 
                    RowBox[{
                    "fitAve2Exp", "[", "\"\<FitResiduals\>\"", "]"}]}], "}"}],
                     "]"}], ",", "\"\<CSV\>\""}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{
                    "f2", ",", "\"\<_fit_parameters_AD_2Exp\>\"", ",", 
                    "\"\<.csv\>\""}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{"\"\<RSquared: \>\"", ",", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"fitAve2Exp", "[", "\"\<RSquared\>\"", "]"}], 
                    "]"}], ",", "\"\<\n\>\""}], "]"}], ",", 
                    RowBox[{"ToString", "[", "textdataAve2Exp2", "]"}], ",", 
                    "\"\<\n\>\"", ",", 
                    RowBox[{"ToString", "[", "modelAve2Exp", "]"}]}], "}"}], 
                    ",", "\"\<CSV\>\""}], "]"}], ";"}], "\[IndentingNewLine]",
                     "}"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
                    "\[IndentingNewLine]", "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Path to file has not been chosen\>\"", ",", "18", 
                    ",", "Black"}], "]"}], "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"Abort", "[", "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Path to file has not been chosen\>\"", ",", "18", 
                    ",", "Black"}], "]"}], "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"Abort", "[", "]"}]}], "}"}]}], "]"}], ";"}], 
                   "\[IndentingNewLine]", "}"}], ",", 
                  RowBox[{"FrameMargins", "\[Rule]", "10"}], ",", 
                  RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}]}], "]"}]}], 
               "\[IndentingNewLine]", "}"}], ",", 
              RowBox[{"{", "}"}]}], "\[IndentingNewLine]", 
             "\[IndentingNewLine]", "\[IndentingNewLine]", "}"}], 
            "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           StyleBox[
            RowBox[{"(*", 
             RowBox[{"FIT", " ", "PLOT"}], "*)"}], "Title"], 
           "\[IndentingNewLine]", 
           RowBox[{"Dynamic", "[", "\[IndentingNewLine]", 
            RowBox[{"Which", "[", 
             RowBox[{
              RowBox[{"ClickerAve", "\[Equal]", "1"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"Which", "[", 
               RowBox[{
                RowBox[{"zzz", "\[Equal]", "1"}], ",", "\[IndentingNewLine]", 
                RowBox[{"Grid", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"y2", "\[Equal]", "1"}], ",", "grdataAve", ",", 
                    RowBox[{"PlotExplorer", "@", "grdataAve"}]}], "]"}], 
                    "]"}], "}"}], ",", 
                   RowBox[{"{", " ", 
                    RowBox[{"Grid", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Dynamic", "@", "textdataAve"}], "}"}], ",", " ", 
                    RowBox[{"{", "}"}], ",", " ", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"Dynamic", "@", "textdata2Ave"}], "}"}]}], "}"}], 
                    "]"}], "}"}], ",", 
                   RowBox[{"{", "}"}], ",", 
                   RowBox[{"{", "modelAve", "}"}], ",", 
                   RowBox[{"{", "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Lower Panel - Fit Residuals\>\"", ",", "Bold"}], 
                    "]"}], "}"}], ",", 
                   RowBox[{"{", "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Upper Panel - Fit, Where:\>\"", ",", "Bold"}], "]"}],
                     "}"}], ",", 
                   RowBox[{
                   "{", "\"\<Gray Dots - Experimental Points\>\"", "}"}], ",", 
                   RowBox[{
                   "{", "\"\<Blue Solid Line - The Whole Model\>\"", "}"}], 
                   ",", 
                   RowBox[{
                   "{", "\"\<Red Dashed Line - A1*Exp(-t/T)\>\"", "}"}], ",", 
                   RowBox[{"{", "\"\<Small Gray Dots - ZL\>\"", "}"}], ",", 
                   RowBox[{"{", "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"Dynamic", "@", "textdata3Ave"}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"Dynamic", "@", "textdata4Ave"}], "}"}]}], "}"}], 
                 "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"zzz", "\[Equal]", "3"}], ",", " ", 
                RowBox[{"Grid", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"y2", "\[Equal]", "1"}], ",", "grdata4Ave", ",", 
                    RowBox[{"PlotExplorer", "@", "grdata4Ave"}]}], "]"}], 
                    "]"}], "}"}], ",", 
                   RowBox[{"{", " ", 
                    RowBox[{"Grid", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Dynamic", "@", "textdata13Ave"}], "}"}], ",", 
                    " ", 
                    RowBox[{"{", "}"}], ",", " ", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"Dynamic", "@", "textdata23Ave"}], "}"}]}], "}"}],
                     "]"}], "}"}], ",", 
                   RowBox[{"{", "}"}], ",", 
                   RowBox[{"{", "modelAveSin", "}"}], ",", 
                   RowBox[{"{", "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Lower Panel - Fit Residuals\>\"", ",", "Bold"}], 
                    "]"}], "}"}], ",", 
                   RowBox[{"{", "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Upper Panel - Fit, Where:\>\"", ",", "Bold"}], "]"}],
                     "}"}], ",", 
                   RowBox[{
                   "{", "\"\<Gray Dots - Experimental Points\>\"", "}"}], ",", 
                   RowBox[{
                   "{", "\"\<Blue Solid Line - The Whole Model\>\"", "}"}], 
                   ",", 
                   RowBox[{"{", "\"\<Red Dashed Line - (-t/T)\>\"", "}"}], 
                   ",", 
                   RowBox[{"{", "\"\<Small Gray Dots - ZL\>\"", "}"}], ",", 
                   RowBox[{"{", "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"Dynamic", "@", "textdata3Ave"}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"Dynamic", "@", "textdata4Ave"}], "}"}]}], "}"}], 
                 "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"zzz", "\[Equal]", "2"}], ",", " ", 
                RowBox[{"Grid", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"y2", "\[Equal]", "1"}], ",", "grdata5Ave", ",", 
                    RowBox[{"PlotExplorer", "@", "grdata5Ave"}]}], "]"}], 
                    "]"}], "}"}], ",", 
                   RowBox[{"{", " ", 
                    RowBox[{"Grid", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Dynamic", "@", "textdataAve2Exp"}], "}"}], ",", 
                    " ", 
                    RowBox[{"{", "}"}], ",", " ", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"Dynamic", "@", "textdataAve2Exp2"}], "}"}]}], 
                    "}"}], "]"}], "}"}], ",", 
                   RowBox[{"{", "}"}], ",", 
                   RowBox[{"{", "modelAve2Exp", "}"}], ",", 
                   RowBox[{"{", "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Lower Panel - Fit Residuals\>\"", ",", "Bold"}], 
                    "]"}], "}"}], ",", 
                   RowBox[{"{", "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Upper Panel - Fit, Where:\>\"", ",", "Bold"}], "]"}],
                     "}"}], ",", 
                   RowBox[{
                   "{", "\"\<Gray Dots - Experimental Points\>\"", "}"}], ",", 
                   RowBox[{
                   "{", "\"\<Blue Solid Line - The Whole Model\>\"", "}"}], 
                   ",", 
                   RowBox[{
                   "{", "\"\<Red Dashed Line - A1*Exp(-t/T1)\>\"", "}"}], ",", 
                   RowBox[{
                   "{", "\"\<Purple Dashed Line - A2*Exp(-t/T2)\>\"", "}"}], 
                   ",", 
                   RowBox[{"{", "\"\<Small Gray Dots - ZL\>\"", "}"}], ",", 
                   RowBox[{"{", "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"Dynamic", "@", "textdata3Ave"}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"Dynamic", "@", "textdata4Ave"}], "}"}]}], "}"}], 
                 "]"}]}], "\[IndentingNewLine]", "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"ClickerAve", "\[Equal]", "0"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"Which", "[", 
               RowBox[{
                RowBox[{"zzz", "\[Equal]", "1"}], ",", "\[IndentingNewLine]", 
                RowBox[{"Grid", "[", 
                 RowBox[{"{", 
                  RowBox[{"{", 
                   RowBox[{"Dynamic", "[", "\"\<Fit Something\>\"", "]"}], 
                   "}"}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"zzz", "\[Equal]", "3"}], ",", " ", 
                RowBox[{"Grid", "[", 
                 RowBox[{"{", 
                  RowBox[{"{", 
                   RowBox[{"Dynamic", "[", "\"\<Fit Something\>\"", "]"}], 
                   "}"}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"zzz", "\[Equal]", "2"}], ",", " ", 
                RowBox[{"Grid", "[", 
                 RowBox[{"{", 
                  RowBox[{"{", 
                   RowBox[{"Dynamic", "[", "\"\<Fit Something\>\"", "]"}], 
                   "}"}], "}"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
             "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}], ",", 
           "\"\<   \>\"", ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           StyleBox[
            RowBox[{"(*", 
             RowBox[{"Averaged", " ", "Data"}], "*)"}], "Title"], 
           "\[IndentingNewLine]", 
           RowBox[{"Grid", "[", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Button", "[", 
                 RowBox[{
                  RowBox[{"Style", "[", 
                   RowBox[{"\"\<Averaged Data Plot\>\"", ",", "Bold"}], "]"}],
                   ",", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"Or", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "SF", "]"}], "\[Equal]", "Integer"}],
                     ",", 
                    RowBox[{
                    RowBox[{"Head", "[", "SF", "]"}], "\[Equal]", "Real"}]}], 
                    "]"}], ",", 
                    RowBox[{"Or", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "EF", "]"}], "\[Equal]", "Integer"}],
                     ",", 
                    RowBox[{
                    RowBox[{"Head", "[", "EF", "]"}], "\[Equal]", "Real"}]}], 
                    "]"}], ",", 
                    RowBox[{"SF", "\[GreaterEqual]", "StartField"}], ",", 
                    RowBox[{"SF", "\[LessEqual]", " ", "EF"}], ",", 
                    RowBox[{"EF", "\[LessEqual]", "EndField"}], ",", 
                    RowBox[{"EF", "\[GreaterEqual]", "StartField"}], ",", 
                    RowBox[{"SF", "\[LessEqual]", "EndField"}], ",", 
                    RowBox[{
                    RowBox[{"Head", "[", "fileData", "]"}], "\[Equal]", 
                    "List"}], ",", 
                    RowBox[{
                    RowBox[{"Head", "[", "dataKinetics", "]"}], "\[Equal]", 
                    "List"}], ",", 
                    RowBox[{
                    RowBox[{"StringStartsQ", "[", 
                    RowBox[{
                    RowBox[{"fileData", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", "\"\<%\>\""}],
                     "]"}], "\[Equal]", "True"}], ",", 
                    RowBox[{"Or", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"NumberQ", "[", "TimeOut", "]"}], "\[Equal]", 
                    "True"}], ",", 
                    RowBox[{"TimeOut", "\[NotEqual]", "Null"}]}], "]"}], ",", 
                    RowBox[{"Or", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"NumberQ", "[", "TimeIn", "]"}], "\[Equal]", 
                    "True"}], ",", 
                    RowBox[{"TimeIn", "\[NotEqual]", "Null"}]}], "]"}], ",", 
                    RowBox[{"TimeOut", "\[LessEqual]", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", 
                    RowBox[{"-", "1"}], "]"}], "]"}]}], ",", 
                    RowBox[{
                    "TimeOut", "\[GreaterEqual]", " ", "TimeResolution"}], 
                    ",", 
                    RowBox[{"TimeIn", "\[LessEqual]", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", 
                    RowBox[{"-", "1"}], "]"}], "]"}]}], ",", 
                    RowBox[{
                    "TimeIn", "\[GreaterEqual]", " ", "TimeResolution"}], ",", 
                    RowBox[{"TimeIn", "<", " ", "TimeOut"}]}], "]"}], ",", 
                    RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"ClickerAvePlot", "=", "1"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"FitTime", "=", 
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{"TimeIn", "/", "TimeResolution"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"TimeEnd", "=", 
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{"TimeOut", "/", "TimeResolution"}], "]"}], "-", 
                    "FitTime"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "Summing", " ", "data", " ", "in", " ", "different", " ", 
                    "field"}], "*)"}], "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"DynamicModule", "[", 
                    RowBox[{
                    RowBox[{"{", "datasum2", "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"s", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"f", "[", "H_", "]"}], ":=", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{"dataKinetics", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"H", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "}"}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"s", "\[Equal]", "2"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"f", "[", "H_", "]"}], ":=", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{"dataKineticsCorr", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"H", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "}"}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"s", "\[Equal]", "3"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"f", "[", "H_", "]"}], ":=", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{"dataKineticsCorrField", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"H", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "}"}], "]"}]}]}], "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"data", "=", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{"dataKineticsCorrField", "[", 
                    RowBox[{"[", 
                    RowBox[{"FitField", ",", "All"}], "]"}], "]"}]}], "}"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerPart", "[", "FitTime", "]"}], "-", 
                    "1"}]}], "]"}], ",", "15"}], "]"}]}], "*)"}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"datasum2", "=", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"f", "[", "H", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"H", ",", 
                    RowBox[{"Round", "[", 
                    RowBox[{"SF", ",", "FieldResolution"}], "]"}], ",", 
                    RowBox[{"Round", "[", 
                    RowBox[{"EF", ",", "FieldResolution"}], "]"}], ",", 
                    "FieldResolution"}], "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"averData", "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Total", "[", "#", "]"}], "/", 
                    RowBox[{"Length", "[", "datasum2", "]"}]}], "&"}], ",", 
                    RowBox[{"Transpose", "[", "datasum2", "]"}]}], "]"}]}], 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"aveLegendButton", "=", " ", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Text", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "SF", "]"}], ",", "\"\< - \>\"", 
                    ",", 
                    RowBox[{"ToString", "[", "EF", "]"}], ",", "\"\< G\>\""}],
                     "]"}], ",", "Bold"}], "]"}], "]"}], "}"}], ",", 
                    "aveLegendButton"}], "]"}]}], ";", 
                    RowBox[{"graverData2", "=", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{"averData", ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<Intensity / a. u.\>\""}], 
                    "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "250"}], "}"}]}], ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{"aveLegendButton", ",", "Above"}], "]"}]}]}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"area", " ", "=", " ", 
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"100", " ", 
                    RowBox[{"Sign", "[", 
                    RowBox[{"x", "-", "TimeOut"}], "]"}]}], ",", 
                    RowBox[{"100", " ", 
                    RowBox[{"Sign", "[", 
                    RowBox[{"x", "-", "TimeIn"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"TimeOut", "+", "0.1"}]}], "}"}], ",", 
                    RowBox[{"ExclusionsStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"Red", ",", "Thick", ",", "Dashed"}], "]"}]}], 
                    ",", 
                    RowBox[{"PlotRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1"}], "}"}]}], ",", 
                    RowBox[{"Filling", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", "\[Rule]", 
                    RowBox[{"{", "2", "}"}]}], "}"}]}], ",", 
                    RowBox[{"FillingStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Lighter", "[", 
                    RowBox[{"Red", ",", "0.1"}], "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.1", "]"}]}], "]"}]}]}], 
                    "]"}]}], ";"}]}], "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], 
                    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"Or", "[", 
                    RowBox[{
                    RowBox[{"SF", "<", "StartField"}], ",", 
                    RowBox[{"SF", ">", "EndField"}]}], "]"}], ",", " ", 
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Starting field is incorrect\>\"", ",", "18", ",", 
                    "Black"}], "]"}], "]"}], ",", 
                    RowBox[{"Or", "[", 
                    RowBox[{
                    RowBox[{"EF", ">", "EndField"}], ",", 
                    RowBox[{"EF", "<", "StartField"}]}], "]"}], ",", " ", 
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Ending field is incorrect\>\"", ",", "18", ",", 
                    "Black"}], "]"}], "]"}], ",", 
                    RowBox[{"Or", "[", 
                    RowBox[{
                    RowBox[{"TimeOut", ">", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", 
                    RowBox[{"-", "1"}], "]"}], "]"}]}], ",", 
                    RowBox[{"TimeIn", "\[GreaterEqual]", " ", "TimeOut"}], 
                    ",", 
                    RowBox[{"TimeOut", "<", "TimeResolution"}]}], "]"}], ",", 
                    " ", 
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Time out is incorrect\>\"", ",", "18", ",", 
                    "Black"}], "]"}], "]"}], ",", 
                    RowBox[{"Or", "[", 
                    RowBox[{
                    RowBox[{"TimeIn", ">", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", 
                    RowBox[{"-", "1"}], "]"}], "]"}]}], ",", 
                    RowBox[{"TimeIn", "\[GreaterEqual]", " ", "TimeOut"}], 
                    ",", 
                    RowBox[{"TimeIn", "<", "TimeResolution"}]}], "]"}], ",", 
                    " ", 
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Time in is incorrect\>\"", ",", "18", ",", "Black"}],
                     "]"}], "]"}]}], "]"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<An incorrect file / incorrect field has been \
used\>\"", ",", "18", ",", "Black"}], "]"}], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}]}], "}"}]}], 
                    "\[IndentingNewLine]", "]"}], ";"}], 
                   "\[IndentingNewLine]", "\[IndentingNewLine]", "}"}], ",", 
                  RowBox[{"FrameMargins", "\[Rule]", "10"}], ",", 
                  RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}]}], "]"}], 
                ",", "SpanFromLeft"}], "}"}], ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Dynamic", "[", 
                 RowBox[{"Which", "[", 
                  RowBox[{
                   RowBox[{"ClickerAvePlot", "\[Equal]", "1"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"y2", "\[Equal]", "1"}], ",", 
                    RowBox[{"Or", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"NumberQ", "[", "TimeOut", "]"}], "\[Equal]", 
                    "True"}], ",", 
                    RowBox[{"TimeOut", "\[NotEqual]", "Null"}]}], "]"}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"area", " ", "=", " ", 
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"100", " ", 
                    RowBox[{"Sign", "[", 
                    RowBox[{"x", "-", "TimeOut"}], "]"}]}], ",", 
                    RowBox[{"100", " ", 
                    RowBox[{"Sign", "[", 
                    RowBox[{"x", "-", "TimeIn"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"TimeOut", "+", "0.1"}]}], "}"}], ",", 
                    RowBox[{"ExclusionsStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"Red", ",", "Thick", ",", "Dashed"}], "]"}]}], 
                    ",", 
                    RowBox[{"PlotRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1"}], "}"}]}], ",", 
                    RowBox[{"Filling", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", "\[Rule]", 
                    RowBox[{"{", "2", "}"}]}], "}"}]}], ",", 
                    RowBox[{"FillingStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Lighter", "[", 
                    RowBox[{"Red", ",", "0.1"}], "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.1", "]"}]}], "]"}]}]}], 
                    "]"}]}], ";", 
                    RowBox[{"Dynamic", "@", 
                    RowBox[{"Show", "[", 
                    RowBox[{"graverData2", ",", "area"}], "]"}]}]}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"Or", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"NumberQ", "[", "TimeOut", "]"}], "\[Equal]", 
                    "True"}], ",", 
                    RowBox[{"TimeOut", "\[NotEqual]", "Null"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"area", " ", "=", " ", 
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"100", " ", 
                    RowBox[{"Sign", "[", 
                    RowBox[{"x", "-", "TimeOut"}], "]"}]}], ",", 
                    RowBox[{"100", " ", 
                    RowBox[{"Sign", "[", 
                    RowBox[{"x", "-", "TimeIn"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"TimeOut", "+", "0.1"}]}], "}"}], ",", 
                    RowBox[{"ExclusionsStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"Red", ",", "Thick", ",", "Dashed"}], "]"}]}], 
                    ",", 
                    RowBox[{"PlotRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1"}], "}"}]}], ",", 
                    RowBox[{"Filling", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", "\[Rule]", 
                    RowBox[{"{", "2", "}"}]}], "}"}]}], ",", 
                    RowBox[{"FillingStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Lighter", "[", 
                    RowBox[{"Red", ",", "0.1"}], "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.1", "]"}]}], "]"}]}]}], 
                    "]"}]}], ";", 
                    RowBox[{"PlotExplorer", "@", 
                    RowBox[{"Show", "[", 
                    RowBox[{"graverData2", ",", "area", ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "320"}], "}"}]}]}], "]"}]}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<An incorrect time is used \>\"", ",", "18", ",", 
                    "Black"}], "]"}], "]"}], " ", ";", 
                    RowBox[{"TimeOut", "=", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", 
                    RowBox[{"-", "1"}], "]"}], "]"}]}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}], "}"}]}], "]"}], 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<An incorrect time is used \>\"", ",", "18", ",", 
                    "Black"}], "]"}], "]"}], ";", 
                    RowBox[{"TimeOut", "=", 
                    RowBox[{"dataTime", "[", 
                    RowBox[{"[", 
                    RowBox[{"-", "1"}], "]"}], "]"}]}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}], "}"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"ClickerAvePlot", "\[Equal]", "0"}], ",", 
                   "\"\<Press Averaged Plot\>\""}], "\[IndentingNewLine]", 
                  "]"}], "]"}], ",", "SpanFromLeft"}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Button", "[", 
                 RowBox[{
                  RowBox[{"Style", "[", 
                   RowBox[{"\"\<Clear Fit And Kinetics\>\"", ",", "Bold"}], 
                   "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"ClickerAve", "=", "0"}], ";", 
                    RowBox[{"ClickerAvePlot", "=", "0"}], ";"}], "}"}], ",", 
                  RowBox[{"FrameMargins", "\[Rule]", "10"}], ",", 
                  RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}]}], "]"}], 
                ",", "SpanFromLeft"}], "}"}], "\[IndentingNewLine]", 
              "\[IndentingNewLine]", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"\"\<Normalization:\>\"", ",", " ", 
                RowBox[{"Checkbox", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", "noave", "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
               "\"\<Positive Kinetics Are Inverted In Normalization Mode\>\"",
                 ",", "SpanFromLeft"}], "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{"\"\<Type:\>\"", ",", " ", 
                RowBox[{"RadioButtonBar", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", "tave", "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"1", "\[Rule]", "\"\<Overlapping\>\""}], ",", 
                    RowBox[{"2", "\[Rule]", "\"\<Shifting\>\""}]}], "}"}]}], 
                 "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Button", "[", 
                 RowBox[{
                  RowBox[{"Style", "[", 
                   RowBox[{"\"\<Memorize Averaged\>\"", ",", "Bold"}], "]"}], 
                  ",", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"If", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{"Or", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "SF", "]"}], "\[Equal]", "Integer"}],
                     ",", 
                    RowBox[{
                    RowBox[{"Head", "[", "SF", "]"}], "\[Equal]", "Real"}]}], 
                    "]"}], ",", 
                    RowBox[{"Or", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "EF", "]"}], "\[Equal]", "Integer"}],
                     ",", 
                    RowBox[{
                    RowBox[{"Head", "[", "EF", "]"}], "\[Equal]", "Real"}]}], 
                    "]"}], ",", 
                    RowBox[{"SF", "\[GreaterEqual]", "StartField"}], ",", 
                    RowBox[{"EF", "\[LessEqual]", "EndField"}], ",", 
                    RowBox[{"EF", "\[GreaterEqual]", "StartField"}], ",", 
                    RowBox[{"SF", "\[LessEqual]", "EndField"}], ",", 
                    RowBox[{
                    RowBox[{"Head", "[", "fileData", "]"}], "\[Equal]", 
                    "List"}], ",", 
                    RowBox[{
                    RowBox[{"Head", "[", "dataKinetics", "]"}], "\[Equal]", 
                    "List"}], ",", 
                    RowBox[{
                    RowBox[{"StringStartsQ", "[", 
                    RowBox[{
                    RowBox[{"fileData", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", "\"\<%\>\""}],
                     "]"}], "\[Equal]", "True"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"aveLegend", "=", " ", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Text", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", "SF", "]"}], ",", "\"\< - \>\"", 
                    ",", 
                    RowBox[{"ToString", "[", "EF", "]"}], ",", "\"\< G\>\"", 
                    ",", "\"\< (F\>\"", ",", 
                    RowBox[{"ToString", "[", "counter", "]"}], ",", " ", 
                    "\"\<)\>\""}], "]"}], ",", "Bold"}], "]"}], "]"}], "}"}], 
                    ",", "aveLegend"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"s", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"f", "[", "H_", "]"}], ":=", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{"dataKinetics", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"H", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "}"}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"s", "\[Equal]", "2"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"f", "[", "H_", "]"}], ":=", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{"dataKineticsCorr", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"H", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "}"}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"s", "\[Equal]", "3"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"f", "[", "H_", "]"}], ":=", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"dataTime", ",", 
                    RowBox[{"dataKineticsCorrField", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPart", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"H", "-", "StartField"}], ")"}], "/", 
                    "FieldResolution"}], "]"}], " ", "+", "1"}], ",", "All"}],
                     "]"}], "]"}]}], "}"}], "]"}]}]}], "\[IndentingNewLine]", 
                    "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"datasum", "=", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"f", "[", "H", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"H", ",", 
                    RowBox[{"Round", "[", 
                    RowBox[{"SF", ",", "FieldResolution"}], "]"}], ",", 
                    RowBox[{"Round", "[", 
                    RowBox[{"EF", ",", "FieldResolution"}], "]"}], ",", 
                    "FieldResolution"}], "}"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"averData", "=", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Total", "[", "#", "]"}], "/", 
                    RowBox[{"Length", "[", "datasum", "]"}]}], "&"}], ",", 
                    RowBox[{"Transpose", "[", "datasum", "]"}]}], "]"}]}], 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"averDataNorm", "=", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"averData", "[", 
                    RowBox[{"[", 
                    RowBox[{"FitTime", ",", "2"}], "]"}], "]"}], ">", "0"}], 
                    ",", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Total", "[", "#", "]"}], "/", 
                    RowBox[{"Length", "[", "datasum", "]"}]}], "&"}], ",", 
                    RowBox[{"Transpose", "[", "datasum", "]"}]}], "]"}], 
                    ")"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Total", "[", "#", "]"}], "/", 
                    RowBox[{"Length", "[", "datasum", "]"}]}], "&"}], ",", 
                    RowBox[{"Transpose", "[", "datasum", "]"}]}], "]"}], 
                    ")"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "2"}], "]"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"-", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Total", "[", "#", "]"}], "/", 
                    RowBox[{"Length", "[", "datasum", "]"}]}], "&"}], ",", 
                    RowBox[{"Transpose", "[", "datasum", "]"}]}], "]"}], 
                    ")"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}], "]"}]}], 
                    ")"}]}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Total", "[", "#", "]"}], "/", 
                    RowBox[{"Length", "[", "datasum", "]"}]}], "&"}], ",", 
                    RowBox[{"Transpose", "[", "datasum", "]"}]}], "]"}], 
                    ")"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Total", "[", "#", "]"}], "/", 
                    RowBox[{"Length", "[", "datasum", "]"}]}], "&"}], ",", 
                    RowBox[{"Transpose", "[", "datasum", "]"}]}], "]"}], 
                    ")"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "2"}], "]"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Total", "[", "#", "]"}], "/", 
                    RowBox[{"Length", "[", "datasum", "]"}]}], "&"}], ",", 
                    RowBox[{"Transpose", "[", "datasum", "]"}]}], "]"}], 
                    ")"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}], "]"}], 
                    ")"}]}]}], "}"}], "]"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"averDataNormSh", "=", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"averData", "[", 
                    RowBox[{"[", 
                    RowBox[{"FitTime", ",", "2"}], "]"}], "]"}], ">", "0"}], 
                    ",", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Total", "[", "#", "]"}], "/", 
                    RowBox[{"Length", "[", "datasum", "]"}]}], "&"}], ",", 
                    RowBox[{"Transpose", "[", "datasum", "]"}]}], "]"}], 
                    ")"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"1", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", "MemAveNormSh", "]"}], "-", "1"}], 
                    ")"}]}], "+", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Total", "[", "#", "]"}], "/", 
                    RowBox[{"Length", "[", "datasum", "]"}]}], "&"}], ",", 
                    RowBox[{"Transpose", "[", "datasum", "]"}]}], "]"}], 
                    ")"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "2"}], "]"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"-", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Total", "[", "#", "]"}], "/", 
                    RowBox[{"Length", "[", "datasum", "]"}]}], "&"}], ",", 
                    RowBox[{"Transpose", "[", "datasum", "]"}]}], "]"}], 
                    ")"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}], "]"}]}], 
                    ")"}]}]}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Total", "[", "#", "]"}], "/", 
                    RowBox[{"Length", "[", "datasum", "]"}]}], "&"}], ",", 
                    RowBox[{"Transpose", "[", "datasum", "]"}]}], "]"}], 
                    ")"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"1", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", "MemAveNormSh", "]"}], "-", "1"}], 
                    ")"}]}], "+", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Total", "[", "#", "]"}], "/", 
                    RowBox[{"Length", "[", "datasum", "]"}]}], "&"}], ",", 
                    RowBox[{"Transpose", "[", "datasum", "]"}]}], "]"}], 
                    ")"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "2"}], "]"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Abs", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Total", "[", "#", "]"}], "/", 
                    RowBox[{"Length", "[", "datasum", "]"}]}], "&"}], ",", 
                    RowBox[{"Transpose", "[", "datasum", "]"}]}], "]"}], 
                    ")"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}], "]"}], 
                    ")"}]}]}]}], "}"}], "]"}]}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MemAve", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", "averData", "}"}], ",", "MemAve"}], "]"}]}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"MemAveNorm", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", "averDataNorm", "}"}], ",", "MemAveNorm"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"MemAveNormSh", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", "averDataNormSh", "}"}], ",", 
                    "MemAveNormSh"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"Or", "[", 
                    RowBox[{
                    RowBox[{"SF", "<", "StartField"}], ",", 
                    RowBox[{"SF", ">", "EndField"}]}], "]"}], ",", " ", 
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Starting field is incorrect\>\"", ",", "18", ",", 
                    "Black"}], "]"}], "]"}], ",", 
                    RowBox[{"Or", "[", 
                    RowBox[{
                    RowBox[{"EF", ">", "EndField"}], ",", 
                    RowBox[{"EF", "<", "StartField"}]}], "]"}], ",", " ", 
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Ending field is incorrect\>\"", ",", "18", ",", 
                    "Black"}], "]"}], "]"}]}], "]"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"MessageDialog", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<An incorrect file / incorrect field has been \
used\>\"", ",", "18", ",", "Black"}], "]"}], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}]}], "}"}]}], 
                    "\[IndentingNewLine]", "]"}], ";"}], "}"}], 
                  "\[IndentingNewLine]", ",", 
                  RowBox[{"FrameMargins", "\[Rule]", "10"}], ",", 
                  RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}]}], "]"}], 
                ",", "SpanFromLeft"}], "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{"\"\<Number to Delete (Counts From Left):\>\"", ",", 
                RowBox[{"InputField", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", "ndelave", "]"}], ",", "Number", 
                  ",", 
                  RowBox[{"FieldSize", "\[Rule]", "13"}]}], "]"}]}], "}"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Button", "[", 
                 RowBox[{
                  RowBox[{"Style", "[", 
                   RowBox[{"\"\<Delete Arbitrary\>\"", ",", "Bold"}], "]"}], 
                  ",", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemAve", "]"}], "\[GreaterEqual]",
                     "2"}], ",", 
                    RowBox[{
                    RowBox[{"Round", "[", "ndelave", "]"}], "<", 
                    RowBox[{"Length", "[", "MemAve", "]"}]}]}], "]"}], ",", 
                    RowBox[{"MemAve", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemAve", ",", 
                    RowBox[{"{", 
                    RowBox[{"Round", "[", "ndelave", "]"}], "}"}]}], 
                    "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemAveNorm", "]"}], 
                    "\[GreaterEqual]", "2"}], ",", 
                    RowBox[{
                    RowBox[{"Round", "[", "ndelave", "]"}], "<", 
                    RowBox[{"Length", "[", "MemAveNorm", "]"}]}]}], "]"}], 
                    ",", 
                    RowBox[{"MemAveNorm", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemAveNorm", ",", 
                    RowBox[{"{", 
                    RowBox[{"Round", "[", "ndelave", "]"}], "}"}]}], 
                    "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemAveNormSh", "]"}], 
                    "\[GreaterEqual]", "2"}], ",", 
                    RowBox[{
                    RowBox[{"Round", "[", "ndelave", "]"}], "<", 
                    RowBox[{"Length", "[", "MemAveNormSh", "]"}]}]}], "]"}], 
                    ",", 
                    RowBox[{"MemAveNormSh", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemAveNormSh", ",", 
                    RowBox[{"{", 
                    RowBox[{"Round", "[", "ndelave", "]"}], "}"}]}], 
                    "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "aveLegend", "]"}], 
                    "\[GreaterEqual]", "1"}], ",", 
                    RowBox[{
                    RowBox[{"Round", "[", "ndelave", "]"}], "<", 
                    RowBox[{"Length", "[", "aveLegend", "]"}]}]}], "]"}], ",", 
                    RowBox[{"aveLegend", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"aveLegend", ",", 
                    RowBox[{"{", 
                    RowBox[{"Round", "[", "ndelave", "]"}], "}"}]}], 
                    "]"}]}]}], "]"}], ";"}], "\[IndentingNewLine]", "}"}], 
                  ",", 
                  RowBox[{"FrameMargins", "\[Rule]", "10"}], ",", 
                  RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}]}], "]"}], 
                ",", "SpanFromLeft"}], "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Button", "[", 
                 RowBox[{
                  RowBox[{"Style", "[", 
                   RowBox[{"\"\<Delete All\>\"", ",", "Bold"}], "]"}], ",", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"ClearAll", "[", "MemAve", "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MemAve", "=", 
                    RowBox[{"{", "0", "}"}]}], ";", " ", 
                    "\[IndentingNewLine]", 
                    RowBox[{"ClearAll", "[", "MemAveNorm", "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MemAveNorm", "=", 
                    RowBox[{"{", "0", "}"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"ClearAll", "[", "MemAveNormSh", "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MemAveNormSh", "=", 
                    RowBox[{"{", "0", "}"}]}], ";"}], "\[IndentingNewLine]", 
                   " ", "}"}], ",", 
                  RowBox[{"FrameMargins", "\[Rule]", "10"}], ",", 
                  RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}]}], "]"}], 
                ",", "SpanFromLeft"}], "}"}], ",", 
              RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              StyleBox[
               RowBox[{"(*", 
                RowBox[{"Plot", " ", "Averaged"}], "*)"}], "Title"], 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                "Dynamic", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"Which", "[", 
                  RowBox[{
                   RowBox[{"tave", "\[Equal]", "1"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"noave", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"y2", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemAve", "]"}], "\[GreaterEqual]",
                     "2"}], ",", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemAve", ",", 
                    RowBox[{"-", "1"}]}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Time / \[Mu]s\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "250"}], "}"}]}], ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{"aveLegend", ",", "Above"}], "]"}]}]}], "]"}], 
                    ",", "\"\<Memorize Something\>\""}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemAve", "]"}], "\[GreaterEqual]",
                     "2"}], ",", 
                    RowBox[{"PlotExplorer", "@", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemAve", ",", 
                    RowBox[{"-", "1"}]}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Time / \[Mu]s\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "320"}], "}"}]}], ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{"aveLegend", ",", "Above"}], "]"}]}]}], "]"}]}], 
                    ",", "\"\<Memorize Something\>\""}], "]"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"noave", "\[Equal]", "2"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"y2", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemAveNorm", "]"}], 
                    "\[GreaterEqual]", "2"}], ",", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemAveNorm", ",", 
                    RowBox[{"-", "1"}]}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Time / \[Mu]s\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "250"}], "}"}]}], ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{"aveLegend", ",", "Above"}], "]"}]}]}], "]"}], 
                    ",", "\"\<Memorize Something\>\""}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemAveNorm", "]"}], 
                    "\[GreaterEqual]", "2"}], ",", 
                    RowBox[{"PlotExplorer", "@", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemAveNorm", ",", 
                    RowBox[{"-", "1"}]}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Time / \[Mu]s\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "320"}], "}"}]}], ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{"aveLegend", ",", "Above"}], "]"}]}]}], "]"}]}], 
                    ",", "\"\<Memorize Something\>\""}], "]"}]}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                    "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"tave", "\[Equal]", "2"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"noave", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"y2", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemAve", "]"}], "\[GreaterEqual]",
                     "2"}], ",", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemAve", ",", 
                    RowBox[{"-", "1"}]}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Time / \[Mu]s\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "250"}], "}"}]}], ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{"aveLegend", ",", "Above"}], "]"}]}]}], "]"}], 
                    ",", "\"\<Memorize Something\>\""}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemAve", "]"}], "\[GreaterEqual]",
                     "2"}], ",", 
                    RowBox[{"PlotExplorer", "@", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemAve", ",", 
                    RowBox[{"-", "1"}]}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Time / \[Mu]s\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "320"}], "}"}]}], ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{"aveLegend", ",", "Above"}], "]"}]}]}], "]"}]}], 
                    ",", "\"\<Memorize Something\>\""}], "]"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"noave", "\[Equal]", "2"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"y2", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemAveNormSh", "]"}], 
                    "\[GreaterEqual]", "2"}], ",", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemAveNormSh", ",", 
                    RowBox[{"-", "1"}]}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Time / \[Mu]s\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "250"}], "}"}]}], ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{"aveLegend", ",", "Above"}], "]"}]}]}], "]"}], 
                    ",", "\"\<Memorize Something\>\""}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "MemAveNormSh", "]"}], 
                    "\[GreaterEqual]", "2"}], ",", 
                    RowBox[{"PlotExplorer", "@", 
                    RowBox[{"ListLinePlot", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"MemAveNormSh", ",", 
                    RowBox[{"-", "1"}]}], "]"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
                    RowBox[{"Frame", "->", "True"}], ",", "  ", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Time / \[Mu]s\>\"", ",", 
                    "\"\<Intensity / a. u.\>\""}], "}"}]}], ",", 
                    RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"LightGray", ",", " ", "Dashed"}], "]"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"400", ",", "320"}], "}"}]}], ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{"aveLegend", ",", "Above"}], "]"}]}]}], "]"}]}], 
                    ",", "\"\<Memorize Something\>\""}], "]"}]}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                    "]"}]}], "\[IndentingNewLine]", "]"}], 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ",", 
                "SpanFromLeft"}], "}"}]}], "}"}], "]"}], ",", 
           "\"\<         \>\"", ",", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           StyleBox[
            RowBox[{"(*", 
             RowBox[{"2", "D", " ", "PLOT"}], "*)"}], "Title"], 
           "\[IndentingNewLine]", 
           RowBox[{"Grid", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"Button", "[", 
                RowBox[{
                 RowBox[{"Style", "[", 
                  RowBox[{"\"\<2D Plot\>\"", ",", "Bold"}], "]"}], ",", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Clicker2DFit", "=", "1"}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"GraphDensityPlotManipFit", "=", 
                    RowBox[{"Dynamic", "@", "\[IndentingNewLine]", 
                    RowBox[{"ListDensityPlot", "[", 
                    RowBox[{"dataResample", ",", 
                    RowBox[{"MaxPlotPoints", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"plot2dSliceRes", ",", "plot2dSliceRes"}], 
                    "}"}]}], ",", " ", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
                    RowBox[{"ColorFunction", "\[Rule]", "\"\<Rainbow\>\""}], 
                    ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{
                    RowBox[{"BarLegend", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<Rainbow\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}], ",", 
                    RowBox[{"LegendMarkerSize", "\[Rule]", "250"}], ",", 
                    RowBox[{"LegendMargins", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"32", ",", "0"}], "}"}]}], "}"}]}]}], "]"}], ",", 
                    "Right"}], "]"}]}], ",", 
                    RowBox[{"DataRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"TimeResolution", ",", 
                    RowBox[{"RecordLength", "*", "TimeResolution"}]}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StartField", "/", "1000"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"StartField", "+", "RecordLengthField"}], ")"}], 
                    "/", "1000"}]}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<Magnetic Field / kG\>\""}], 
                    "}"}]}], ",", 
                    RowBox[{"AspectRatio", "\[Rule]", 
                    RowBox[{"1", "/", "1"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"350", ",", "350"}], "}"}]}], ",", 
                    RowBox[{"LabelStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"12", ",", " ", "Bold"}], "]"}]}], ",", 
                    RowBox[{"Mesh", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"TimeIn", ",", "TimeOut"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"SF", "/", "1000"}], ",", 
                    RowBox[{"EF", "/", "1000"}]}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"MeshStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Directive", "[", 
                    RowBox[{"Red", ",", "Dashed"}], "]"}], ",", " ", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"Red", ",", "Dashed"}], "]"}]}], "}"}]}]}], 
                    "]"}]}]}], ";", "\[IndentingNewLine]", 
                   "\[IndentingNewLine]", "\[IndentingNewLine]", 
                   RowBox[{"(*", 
                    RowBox[{"For", " ", "Automatic", " ", "Change"}], "*)"}], 
                   "\[IndentingNewLine]", 
                   RowBox[{"GraphDensityPlotManipCorrFit", "=", 
                    RowBox[{"Dynamic", "@", "\[IndentingNewLine]", 
                    RowBox[{"ListDensityPlot", "[", 
                    RowBox[{"dataResampleCorr", ",", 
                    RowBox[{"MaxPlotPoints", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"plot2dSliceRes", ",", "plot2dSliceRes"}], 
                    "}"}]}], ",", " ", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
                    RowBox[{"ColorFunction", "\[Rule]", "\"\<Rainbow\>\""}], 
                    ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{
                    RowBox[{"BarLegend", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<Rainbow\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}], ",", 
                    RowBox[{"LegendMarkerSize", "\[Rule]", "250"}], ",", 
                    RowBox[{"LegendMargins", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"32", ",", "0"}], "}"}]}], "}"}]}]}], "]"}], ",", 
                    "Right"}], "]"}]}], ",", 
                    RowBox[{"DataRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"TimeResolution", ",", 
                    RowBox[{"RecordLength", "*", "TimeResolution"}]}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StartField", "/", "1000"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"StartField", "+", "RecordLengthField"}], ")"}], 
                    "/", "1000"}]}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<Magnetic Field / kG\>\""}], 
                    "}"}]}], ",", 
                    RowBox[{"AspectRatio", "\[Rule]", 
                    RowBox[{"1", "/", "1"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"350", ",", "350"}], "}"}]}], ",", 
                    RowBox[{"LabelStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"12", ",", " ", "Bold"}], "]"}]}], ",", 
                    RowBox[{"Mesh", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"TimeIn", ",", "TimeOut"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"SF", "/", "1000"}], ",", 
                    RowBox[{"EF", "/", "1000"}]}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"MeshStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Directive", "[", 
                    RowBox[{"Red", ",", "Dashed"}], "]"}], ",", " ", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"Red", ",", "Dashed"}], "]"}]}], "}"}]}]}], 
                    "]"}]}]}], ";", "\[IndentingNewLine]", 
                   "\[IndentingNewLine]", 
                   RowBox[{"GraphDensityPlotManipCorrFieldFit", "=", 
                    RowBox[{"Dynamic", "@", "\[IndentingNewLine]", 
                    RowBox[{"ListDensityPlot", "[", 
                    RowBox[{"dataResampleCorrField", ",", 
                    RowBox[{"MaxPlotPoints", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"plot2dSliceRes", ",", "plot2dSliceRes"}], 
                    "}"}]}], ",", " ", 
                    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
                    RowBox[{"ColorFunction", "\[Rule]", "\"\<Rainbow\>\""}], 
                    ",", 
                    RowBox[{"PlotLegends", "\[Rule]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{
                    RowBox[{"BarLegend", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\<Rainbow\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}], ",", 
                    RowBox[{"LegendMarkerSize", "\[Rule]", "250"}], ",", 
                    RowBox[{"LegendMargins", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"32", ",", "0"}], "}"}]}], "}"}]}]}], "]"}], ",", 
                    "Right"}], "]"}]}], ",", 
                    RowBox[{"DataRange", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"RecordLength", "*", "TimeResolution"}]}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"StartField", "/", "1000"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"StartField", "+", "RecordLengthField"}], ")"}], 
                    "/", "1000"}]}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"FrameLabel", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"label", ",", "\"\<Magnetic Field / kG\>\""}], 
                    "}"}]}], ",", 
                    RowBox[{"AspectRatio", "\[Rule]", 
                    RowBox[{"1", "/", "1"}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"350", ",", "350"}], "}"}]}], ",", 
                    RowBox[{"LabelStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"12", ",", " ", "Bold"}], "]"}]}], ",", 
                    RowBox[{"Mesh", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"TimeIn", ",", "TimeOut"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"SF", "/", "1000"}], ",", 
                    RowBox[{"EF", "/", "1000"}]}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"MeshStyle", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Directive", "[", 
                    RowBox[{"Red", ",", "Dashed"}], "]"}], ",", " ", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"Red", ",", "Dashed"}], "]"}]}], "}"}]}]}], 
                    "]"}]}]}], ";"}], "\[IndentingNewLine]", "}"}], ",", 
                 RowBox[{"FrameMargins", "\[Rule]", "10"}], ",", 
                 RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}]}], "]"}], 
               "}"}], ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{"Dynamic", "\[IndentingNewLine]", "[", 
                RowBox[{"Which", "[", 
                 RowBox[{
                  RowBox[{"s", "\[Equal]", "1"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Grid", "[", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{"\:0421licker2", "\[Equal]", "1"}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"Clicker2DFit", "\[Equal]", "1"}], ",", 
                    "GraphDensityPlotManipFit", ",", 
                    "\"\<Press 2D Plot\>\""}], "]"}], ",", 
                    "\"\<Press Convert Data\>\""}], "]"}], ",", 
                    "SpanFromLeft"}], "}"}], "}"}], "]"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"s", "\[Equal]", "2"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Grid", "[", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{"\:0421licker2", "\[Equal]", "1"}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"Clicker2DFit", "\[Equal]", "1"}], ",", 
                    "GraphDensityPlotManipCorrFit", ",", 
                    "\"\<Press 2D Plot\>\""}], "]"}], ",", 
                    "\"\<Press Convert Data\>\""}], "]"}], ",", 
                    "SpanFromLeft"}], "}"}], "}"}], "]"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"s", "\[Equal]", "3"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Grid", "[", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"And", "[", 
                    RowBox[{"\:0421licker2", "\[Equal]", "1"}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"Clicker2DFit", "\[Equal]", "1"}], ",", 
                    "GraphDensityPlotManipCorrFieldFit", ",", 
                    "\"\<Press 2D Plot\>\""}], "]"}], ",", 
                    "\"\<Press Convert Data\>\""}], "]"}], ",", 
                    "SpanFromLeft"}], "}"}], "}"}], "]"}]}], 
                 "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}], 
               "\[IndentingNewLine]", "}"}], ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{"Button", "[", 
                RowBox[{
                 RowBox[{"Style", "[", 
                  RowBox[{"\"\<Clear 2D\>\"", ",", "Bold"}], "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Clicker2DFit", "=", "0"}], ";"}], "}"}], ",", 
                 RowBox[{"FrameMargins", "\[Rule]", "10"}], ",", 
                 RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}]}], "]"}], 
               "}"}], ",", 
              RowBox[{"{", "}"}]}], "}"}], "]"}]}], "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "}"}], 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ",", 
       RowBox[{"FrameMargins", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"20", ",", "20"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"5", ",", "5"}], "}"}]}], "}"}]}], ",", 
       RowBox[{"Background", "\[Rule]", 
        RowBox[{"Lighter", "[", 
         RowBox[{"Gray", ",", " ", "0.97"}], "]"}]}]}], "\[IndentingNewLine]",
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 Editable->False,
 Deletable->False,
 CellOpen->False,
 InitializationCell->True,
 CellChangeTimes->{{3.76741681676307*^9, 3.7674168189913807`*^9}, {
   3.7674168719401293`*^9, 3.767416892802813*^9}, {3.767416961552272*^9, 
   3.767416962551993*^9}, {3.767417005664701*^9, 3.7674171548019733`*^9}, {
   3.7674172367860813`*^9, 3.767417239458897*^9}, {3.767417291560371*^9, 
   3.7674172916809263`*^9}, {3.767417344545138*^9, 3.767417355699469*^9}, {
   3.767417718313468*^9, 3.7674177468914413`*^9}, {3.767417989316679*^9, 
   3.767417995186022*^9}, {3.767418090131029*^9, 3.7674180902856293`*^9}, {
   3.767418124442534*^9, 3.7674181264017344`*^9}, {3.7674183423303967`*^9, 
   3.7674183625910797`*^9}, 3.7674183954047527`*^9, {3.767418429163402*^9, 
   3.767418535366322*^9}, {3.767418575409593*^9, 3.767418655343131*^9}, {
   3.7674192099552813`*^9, 3.767419232729384*^9}, {3.767651649920195*^9, 
   3.767651666585758*^9}, {3.767661132353012*^9, 3.76766113429543*^9}, {
   3.76766119115301*^9, 3.7676612007091217`*^9}, {3.7676612501825533`*^9, 
   3.767661251382267*^9}, {3.767661432018647*^9, 3.7676614347509203`*^9}, {
   3.767661525291808*^9, 3.767661555112021*^9}, {3.767666375568109*^9, 
   3.767666377162713*^9}, {3.7676664281997347`*^9, 3.76766647926015*^9}, {
   3.767670584990127*^9, 3.767670593072644*^9}, {3.7676706246121683`*^9, 
   3.767670751789242*^9}, {3.767670795680958*^9, 3.767670818600864*^9}, {
   3.767670958394952*^9, 3.7676710148342752`*^9}, {3.767671159188148*^9, 
   3.7676711701989403`*^9}, {3.767908436211985*^9, 3.7679084982462263`*^9}, {
   3.76790879779491*^9, 3.767908825372694*^9}, {3.767908979825952*^9, 
   3.7679090408453407`*^9}, {3.767909194785718*^9, 3.767909245754455*^9}, {
   3.767913171125201*^9, 3.767913198456229*^9}, {3.767913272486478*^9, 
   3.76791330352064*^9}, {3.767914153779848*^9, 3.7679141588164587`*^9}, {
   3.7681024782955236`*^9, 3.768102499702886*^9}, 3.768102531544985*^9, {
   3.768104375659169*^9, 3.76810438398038*^9}, {3.7685174445272303`*^9, 
   3.76851749729531*^9}, {3.768517586239064*^9, 3.7685176671377277`*^9}, {
   3.768517832369461*^9, 3.768517839888811*^9}, {3.768517871527526*^9, 
   3.76851789730014*^9}, {3.768517929531681*^9, 3.768518002160346*^9}, {
   3.76851805531087*^9, 3.7685180617607613`*^9}, {3.768518105161797*^9, 
   3.7685181736466007`*^9}, {3.768518235770719*^9, 3.76851824750353*^9}, {
   3.768569609147747*^9, 3.7685696125649033`*^9}, {3.76856965746797*^9, 
   3.768569659897359*^9}, {3.768569986161075*^9, 3.7685538591503572`*^9}, {
   3.768600477520981*^9, 3.7686004802096252`*^9}, {3.769825315076049*^9, 
   3.769825320354616*^9}, {3.769825376849638*^9, 3.769825378908101*^9}, {
   3.7698254282634*^9, 3.769825441400804*^9}, {3.769825476881383*^9, 
   3.769825496300744*^9}, {3.7698255271924543`*^9, 3.769825534447157*^9}, {
   3.7698255791240273`*^9, 3.769825635842951*^9}, {3.769825925559314*^9, 
   3.769825928241487*^9}, {3.76982597818475*^9, 3.769825979968066*^9}, {
   3.769826043926507*^9, 3.76982607780013*^9}, {3.76982612215952*^9, 
   3.769826170323807*^9}, 3.7698262998119*^9, {3.769826524400581*^9, 
   3.769826533264615*^9}, {3.7700042089016237`*^9, 3.770004216157021*^9}, {
   3.7703633742308073`*^9, 3.77036337768097*^9}, {3.770363455960702*^9, 
   3.770363516392482*^9}, {3.7703636242416983`*^9, 3.7703636692909517`*^9}, {
   3.7703640272978287`*^9, 3.770364027799244*^9}, {3.77036496087442*^9, 
   3.770365073793035*^9}, {3.770365106427327*^9, 3.7703654239668713`*^9}, {
   3.7703654641451483`*^9, 3.7703654722897463`*^9}, {3.7703663618056173`*^9, 
   3.770366362404294*^9}, {3.7717362681437263`*^9, 3.771736272053403*^9}, {
   3.7721426077706423`*^9, 3.7721427946880207`*^9}, {3.772142840012897*^9, 
   3.7721428438507643`*^9}, {3.772142896197873*^9, 3.772142925153846*^9}, {
   3.7721429644057083`*^9, 3.772142970659771*^9}, {3.772145112195024*^9, 
   3.7721451472809343`*^9}, {3.772145210427182*^9, 3.772145217707767*^9}, {
   3.772145324443418*^9, 3.772145352034339*^9}, {3.7721454996422863`*^9, 
   3.77214561601152*^9}, {3.7721784320728493`*^9, 3.77217843240749*^9}, {
   3.7721786609684668`*^9, 3.772178661168169*^9}, {3.772180402217939*^9, 
   3.772180540816546*^9}, {3.7731110210438147`*^9, 3.773111033851281*^9}, {
   3.7731117822585707`*^9, 3.7731118153049803`*^9}, {3.773111891726267*^9, 
   3.773112001001874*^9}, {3.7731120325661488`*^9, 3.77311206499809*^9}, {
   3.77311209996659*^9, 3.773112183173291*^9}, {3.773112267595051*^9, 
   3.773112268770586*^9}, {3.7731123080072813`*^9, 3.773112414758466*^9}, {
   3.773112449567308*^9, 3.773112485322933*^9}, {3.773112543540311*^9, 
   3.773112557638578*^9}, {3.773112608011239*^9, 3.773112615817588*^9}, {
   3.773123769104185*^9, 3.773123778279298*^9}, {3.773123863546554*^9, 
   3.77312386770726*^9}, {3.773123936394822*^9, 3.773123946857643*^9}, {
   3.773123996394215*^9, 3.773124010265359*^9}, {3.77312414033783*^9, 
   3.773124151411742*^9}, {3.7747385026548967`*^9, 3.77473850438417*^9}, {
   3.774738570990274*^9, 3.774738655231835*^9}, {3.774738706519031*^9, 
   3.774738744162818*^9}, {3.774738780217277*^9, 3.774738790316059*^9}, {
   3.774739109989419*^9, 3.7747391465485277`*^9}, {3.774739246142294*^9, 
   3.774739352076707*^9}, {3.7747394570846043`*^9, 3.774739466903583*^9}, {
   3.774739502568264*^9, 3.77473950684978*^9}, {3.774739536888942*^9, 
   3.7747395595561132`*^9}, {3.774739635417963*^9, 3.774739757066689*^9}, {
   3.774739871710547*^9, 3.7747398759132843`*^9}, {3.774739947709367*^9, 
   3.774739988135873*^9}, {3.774740035212722*^9, 3.774740038170114*^9}, {
   3.774740077213812*^9, 3.774740140369585*^9}, {3.7747401908829813`*^9, 
   3.774740202639962*^9}, {3.774740290160569*^9, 3.774740525881075*^9}, {
   3.774740557714738*^9, 3.774740621059113*^9}, {3.774740775758239*^9, 
   3.77474088001131*^9}, {3.774740966711185*^9, 3.774740977917371*^9}, {
   3.774741147344493*^9, 3.774741148184507*^9}, {3.7747415940264273`*^9, 
   3.774741633449576*^9}, {3.774741704975246*^9, 3.774741816377198*^9}, {
   3.774741856076702*^9, 3.7747418825912743`*^9}, {3.774741914022592*^9, 
   3.77474200535256*^9}, 3.774742103057603*^9, 3.774742174223713*^9, {
   3.774742214496533*^9, 3.77474222425428*^9}, {3.774742266973176*^9, 
   3.774742292943687*^9}, {3.77474233582057*^9, 3.774742339746426*^9}, {
   3.774742402769455*^9, 3.774742410648016*^9}, {3.7747424533688383`*^9, 
   3.7747425225741262`*^9}, {3.7747426154769573`*^9, 3.774742687638074*^9}, {
   3.774742724506847*^9, 3.774742735369143*^9}, {3.774742774487959*^9, 
   3.77474290754175*^9}, {3.774742961366431*^9, 3.774742968720813*^9}, {
   3.774743027807337*^9, 3.774743076755836*^9}, {3.7747432075828257`*^9, 
   3.774743224105974*^9}, {3.774743320568571*^9, 3.774743326198412*^9}, {
   3.774743378020823*^9, 3.774743407922916*^9}, {3.7747434761579227`*^9, 
   3.774743486795327*^9}, {3.7747435357789097`*^9, 3.7747436585847197`*^9}, {
   3.774743705358193*^9, 3.774743745859737*^9}, 3.77474796074122*^9, {
   3.774748000398654*^9, 3.7747480409582567`*^9}, {3.774748388526209*^9, 
   3.774748401872311*^9}, {3.7747487113120193`*^9, 3.7747487206295843`*^9}, {
   3.774748767121673*^9, 3.774748775503511*^9}, {3.774748975266923*^9, 
   3.774749094002684*^9}, {3.7747491373296833`*^9, 3.774749158242792*^9}, {
   3.77474920740511*^9, 3.774749301442431*^9}, {3.774749451386376*^9, 
   3.774749497318804*^9}, {3.774749640918552*^9, 3.7747496410944023`*^9}, {
   3.7747497422789497`*^9, 3.774749795947749*^9}, {3.774749848156644*^9, 
   3.77474987766858*^9}, {3.774749916547035*^9, 3.774749923750408*^9}, {
   3.7747500136489067`*^9, 3.774750017333139*^9}, {3.7747501352991667`*^9, 
   3.774750143265101*^9}, {3.774750217898539*^9, 3.7747502215603943`*^9}, {
   3.774750356758498*^9, 3.774750370873774*^9}, {3.7747504611313057`*^9, 
   3.7747504933290873`*^9}, {3.77475053968578*^9, 3.7747505413932734`*^9}, 
   3.774750632013933*^9, {3.774750724076186*^9, 3.774750749026095*^9}, {
   3.774751766793388*^9, 3.774751806152011*^9}, {3.774751859016019*^9, 
   3.774751864343055*^9}, {3.774751947142558*^9, 3.774751967668679*^9}, {
   3.7747520303893213`*^9, 3.774752032432721*^9}, {3.774752105227828*^9, 
   3.774752175762804*^9}, {3.774752237083419*^9, 3.774752242432736*^9}, {
   3.7747523073799973`*^9, 3.7747523372602577`*^9}, {3.77475253210009*^9, 
   3.774752642176455*^9}, {3.7747529484085493`*^9, 3.774752957942327*^9}, {
   3.774755042168393*^9, 3.774755051787191*^9}, {3.774755555630872*^9, 
   3.774755560968449*^9}, {3.774760625825382*^9, 3.7747606360630217`*^9}, {
   3.774761611837137*^9, 3.774761653645938*^9}, {3.77476171830894*^9, 
   3.774761720153977*^9}, {3.774761755732794*^9, 3.7747617695744658`*^9}, {
   3.774761799734023*^9, 3.774761824514632*^9}, {3.774761856140061*^9, 
   3.7747619174438753`*^9}, 3.774838318256198*^9, {3.774838637827796*^9, 
   3.774838669511256*^9}, {3.7748387763881063`*^9, 3.774838806856337*^9}, {
   3.774838875019307*^9, 3.774838878232789*^9}, {3.774921513170004*^9, 
   3.774921519498176*^9}, {3.774922876826902*^9, 3.774922900302491*^9}, {
   3.7751714342314653`*^9, 3.7751714363935137`*^9}, {3.775345771371758*^9, 
   3.77534579940718*^9}, {3.7758805726021767`*^9, 3.775880579130715*^9}, {
   3.78242407110673*^9, 3.78242407274727*^9}, {3.782424117042493*^9, 
   3.7824241281686487`*^9}, {3.782424181634947*^9, 3.78242418860221*^9}, {
   3.7827147714996843`*^9, 3.782714779596816*^9}, 3.7827149388207273`*^9, {
   3.782715515655929*^9, 3.782715521223425*^9}, {3.782715554959346*^9, 
   3.782715566996483*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"23ce2359-039f-49ae-b53c-6a06ede4a55f"],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`datasum$$, $CellContext`averData$$, \
$CellContext`modelAve$$, $CellContext`graverData2$$, \
$CellContext`modelreduceExpAve$$, $CellContext`modelreduceZLAve$$, \
$CellContext`y2$$ = 
  1, $CellContext`fitAve$$, $CellContext`graverData$$, $CellContext`gr1Ave$$, \
$CellContext`gr1reducedExpAve$$, $CellContext`gr1reducedZLAve$$, \
$CellContext`gr2Ave$$, $CellContext`fitresAve$$, $CellContext`grdataAve$$, \
$CellContext`textdata2Ave$$, $CellContext`textdataAve$$, \
$CellContext`modelAveSin$$, $CellContext`modelAveSinreduce$$, \
$CellContext`modelAveSinreduceZL$$, $CellContext`modelAveSinreduceExp$$, \
$CellContext`fitAveSin$$, $CellContext`gr5Ave$$, $CellContext`gr6Ave$$, \
$CellContext`gr5AvereducedZL$$, $CellContext`gr5AvereducedExp$$, \
$CellContext`fitres3Ave$$, $CellContext`textdata13Ave$$, \
$CellContext`textdata23Ave$$, $CellContext`f2$$ = 
  "/media/Melnikov/00_Experimental_Data/2019/FEL", $CellContext`zzz$$ = 
  1, $CellContext`gr5Avereduced$$, $CellContext`f$$, \
$CellContext`grdata4Ave$$, $CellContext`modelAve2Exp$$, \
$CellContext`modelAve2ExpReduce$$, $CellContext`modelAve2ExpreduceZL$$, \
$CellContext`modelAve2ExpreduceExp$$, $CellContext`fitAve2Exp$$, \
$CellContext`gr7Ave$$, $CellContext`gr8Ave$$, $CellContext`gr7Avereduced$$, \
$CellContext`gr7AvereducedZL$$, $CellContext`gr7Avereduced2Exp$$, \
$CellContext`fitres4Ave$$, $CellContext`grdata5Ave$$, \
$CellContext`textdataAve2Exp$$, $CellContext`textdataAve2Exp2$$, \
$CellContext`textdata3Ave$$, $CellContext`textdata4Ave$$, $CellContext`bl$$ = 
  1, $CellContext`ClickerAve$$ = 0, $CellContext`ClickerAvePlot$$ = 
  0, $CellContext`area$$, $CellContext`allgr$$, \
$CellContext`GraphDensityPlotManipCorrFieldFit$$, \
$CellContext`GraphDensityPlotManipCorrFit$$, \
$CellContext`GraphDensityPlotManipFit$$, $CellContext`Clicker2DFit$$ = 
  0, $CellContext`averDataNorm$$, $CellContext`averDataNormSh$$, \
$CellContext`ndelave$$ = 1, $CellContext`MemAve$$ = {
  0}, $CellContext`MemAveNorm$$ = {0}, $CellContext`MemAveNormSh$$ = {
  0}, $CellContext`aveLegend$$ = {}, $CellContext`tave$$ = 
  1, $CellContext`noave$$ = 1, $CellContext`aveLegendButton$$ = {}}, 
  PanelBox[
   TagBox[GridBox[{
      {
       TagBox[GridBox[{
          {
           StyleBox["\<\"Full Path to File For Saving: \"\>",
            StripOnInput->False,
            FontWeight->Bold], 
           DynamicBox[ToBoxes[$CellContext`f2$$, StandardForm],
            ImageSizeCache->{226., {2., 7.}}], "\[SpanFromLeft]"},
          {"", "", ""},
          {
           
           StyleBox["\<\"Choose Parameters For Fitting of Arbitrary Part of \
Averaged Kinetics:\\n\"\>",
            StripOnInput->False,
            FontWeight->Bold], "\[SpanFromLeft]", "\[SpanFromLeft]"},
          {"\<\"Base Level:\"\>", 
           InputFieldBox[Dynamic[$CellContext`ZL0], Number], ""},
          {"\<\"Amplitude of Exp1:\"\>", 
           InputFieldBox[Dynamic[$CellContext`A10], Number], ""},
          {"\<\"Power of Exp1:\"\>", 
           InputFieldBox[Dynamic[$CellContext`T0], Number], ""},
          {"\<\"Amplitude of Exp2:\"\>", 
           InputFieldBox[Dynamic[$CellContext`A20], Number], ""},
          {"\<\"Power of Exp2:\"\>", 
           InputFieldBox[Dynamic[$CellContext`T20], Number], ""},
          {"", "", ""},
          {"\<\"Plot Explorer Function:\"\>", 
           CheckboxBox[Dynamic[$CellContext`y2$$], {1, 2}], ""},
          {"", "", ""},
          {"\<\"Model Wihout BaseLine:\"\>", 
           CheckboxBox[Dynamic[$CellContext`bl$$], {1, 2}], ""},
          {"\<\"After Changing Fit Data Button Should Be Pressed\"\>", 
           "\[SpanFromLeft]", "\[SpanFromLeft]"},
          {"", "", ""},
          {"\<\"Type of Model:\"\>", 
           InterpretationBox[
            StyleBox[
             RowBox[{GridBox[{
                {
                 RadioButtonBox[Dynamic[$CellContext`zzz$$], {1},
                  DefaultBaseStyle->"RadioButtonBar"], 
                 StyleBox["\<\"One Exp\"\>", "RadioButtonBarLabel",
                  StripOnInput->False]}
               },
               AutoDelete->False,
               BaselinePosition->{1, 2},
               
               GridBoxAlignment->{
                "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], {
                    Offset[0.21]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.4]}, 
                   Offset[0.2]}}], "  ", GridBox[{
                {
                 RadioButtonBox[Dynamic[$CellContext`zzz$$], {2},
                  DefaultBaseStyle->"RadioButtonBar"], 
                 StyleBox["\<\"Two Exp\"\>", "RadioButtonBarLabel",
                  StripOnInput->False]}
               },
               AutoDelete->False,
               BaselinePosition->{1, 2},
               
               GridBoxAlignment->{
                "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], {
                    Offset[0.21]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.4]}, 
                   Offset[0.2]}}], "  ", GridBox[{
                {
                 RadioButtonBox[Dynamic[$CellContext`zzz$$], {3},
                  DefaultBaseStyle->"RadioButtonBar"], 
                 StyleBox["\<\"Linear\"\>", "RadioButtonBarLabel",
                  StripOnInput->False]}
               },
               AutoDelete->False,
               BaselinePosition->{1, 2},
               
               GridBoxAlignment->{
                "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], {
                    Offset[0.21]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.4]}, 
                   Offset[0.2]}}]}], "Deploy"],
            RadioButtonBar[
             Dynamic[$CellContext`zzz$$], {
             1 -> "One Exp", 2 -> "Two Exp", 3 -> "Linear"}]], ""},
          {"", "", ""},
          {"", "", ""},
          {"\<\"Start Field For Averaging / G:\"\>", 
           InputFieldBox[Dynamic[$CellContext`SF], Number], ""},
          {"\<\"End Field For Averaging / G:\"\>", 
           InputFieldBox[Dynamic[$CellContext`EF], Number], ""},
          {"\<\"After Changing Averaged Plot Should Be Replotted\"\>", 
           "\[SpanFromLeft]", "\[SpanFromLeft]"},
          {"", "", ""},
          {"\<\"Start Time For Arbitrary Part / \[Mu]s: \"\>", 
           InputFieldBox[Dynamic[$CellContext`TimeIn], Number], ""},
          {"\<\"End Time For Arbitrary Part / \[Mu]s:\"\>", 
           InputFieldBox[Dynamic[$CellContext`TimeOut], Number], ""},
          {"", "", ""},
          {"", "", ""},
          {"\<\" \"\>", 
           ButtonBox[
            StyleBox["\<\"Fit Data\"\>",
             StripOnInput->False,
             FontWeight->Bold],
            Appearance->Automatic,
            ButtonFunction:>(If[
               And[
                Or[
                Head[$CellContext`SF] == Integer, Head[$CellContext`SF] == 
                 Real], 
                Or[
                Head[$CellContext`EF] == Integer, Head[$CellContext`EF] == 
                 Real], $CellContext`EF >= $CellContext`SF, $CellContext`SF >= \
$CellContext`StartField, $CellContext`EF <= $CellContext`EndField, \
$CellContext`EF >= $CellContext`StartField, $CellContext`SF <= \
$CellContext`EndField, Head[$CellContext`fileData] == List, 
                Head[$CellContext`dataKinetics] == List, StringStartsQ[
                  Part[$CellContext`fileData, 1, 1], "%"] == True, 
                Or[
                NumberQ[$CellContext`TimeOut] == True, $CellContext`TimeOut != 
                 Null], 
                Or[
                NumberQ[$CellContext`TimeIn] == True, $CellContext`TimeIn != 
                 Null], $CellContext`TimeOut <= 
                Part[$CellContext`dataTime, -1], $CellContext`TimeOut >= \
$CellContext`TimeResolution, $CellContext`TimeIn <= 
                Part[$CellContext`dataTime, -1], $CellContext`TimeIn >= \
$CellContext`TimeResolution, $CellContext`TimeIn < $CellContext`TimeOut], \
{$CellContext`FitTime = 
                 IntegerPart[$CellContext`TimeIn/$CellContext`TimeResolution]; \
$CellContext`TimeEnd = 
                 IntegerPart[
                  IntegerPart[$CellContext`TimeOut/$CellContext`\
TimeResolution] - $CellContext`FitTime]; $CellContext`ClickerAve$$ = 1; 
                Which[$CellContext`s == 1, $CellContext`f$$[
                    Pattern[$CellContext`H, 
                    Blank[]]] := Transpose[{$CellContext`dataTime, 
                    
                    Part[$CellContext`dataKinetics, 
                    IntegerPart[($CellContext`H - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, 
                    All]}], $CellContext`s == 2, $CellContext`f$$[
                    Pattern[$CellContext`H, 
                    Blank[]]] := Transpose[{$CellContext`dataTime, 
                    
                    Part[$CellContext`dataKineticsCorr, 
                    IntegerPart[($CellContext`H - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, 
                    All]}], $CellContext`s == 3, $CellContext`f$$[
                    Pattern[$CellContext`H, 
                    Blank[]]] := Transpose[{$CellContext`dataTime, 
                    
                    Part[$CellContext`dataKineticsCorrField, 
                    IntegerPart[($CellContext`H - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, 
                    All]}]]; $CellContext`datasum$$ = Table[
                   $CellContext`f$$[$CellContext`H], {$CellContext`H, 
                    Round[$CellContext`SF, $CellContext`FieldResolution], 
                    
                    Round[$CellContext`EF, $CellContext`FieldResolution], \
$CellContext`FieldResolution}]; $CellContext`averData$$ = 
                 Map[Total[#]/Length[$CellContext`datasum$$]& , 
                   
                   Transpose[$CellContext`datasum$$]]; \
$CellContext`graverData$$ = 
                 ListLinePlot[$CellContext`averData$$, PlotRange -> All, 
                   Frame -> True, 
                   FrameLabel -> {$CellContext`label, "Intensity / a. u."}, 
                   GridLines -> Automatic, GridLinesStyle -> 
                   Directive[LightGray, Dashed], ImageSize -> {400, 250}]; 
                Which[$CellContext`bl$$ == 
                  1, $CellContext`modelAve$$ = $CellContext`ZL + \
$CellContext`A1 Exp[(-$CellContext`t)/$CellContext`T], $CellContext`bl$$ == 
                  2, $CellContext`modelAve$$ = 
                  Plus[$CellContext`A1] 
                   Exp[(-$CellContext`t)/$CellContext`T]]; \
$CellContext`modelreduceZLAve$$ = $CellContext`ZL; \
$CellContext`modelreduceExpAve$$ = $CellContext`A1 
                  Exp[(-$CellContext`t)/$CellContext`T]; \
$CellContext`modelAveSin$$ = $CellContext`ZL - $CellContext`t/$CellContext`T; \
$CellContext`modelAveSinreduceZL$$ = $CellContext`ZL; \
$CellContext`modelAveSinreduceExp$$ = (-$CellContext`t)/$CellContext`T; 
                Which[$CellContext`bl$$ == 
                  1, $CellContext`modelAve2Exp$$ = $CellContext`ZL + \
$CellContext`A1 Exp[(-$CellContext`t)/$CellContext`T] + $CellContext`A2 
                    Exp[(-$CellContext`t)/$CellContext`T2], $CellContext`bl$$ == 
                  2, $CellContext`modelAve2Exp$$ = 
                  Plus[$CellContext`A1] 
                    Exp[(-$CellContext`t)/$CellContext`T] + $CellContext`A2 
                    Exp[(-$CellContext`t)/$CellContext`T2]]; \
$CellContext`modelAve2ExpReduce$$ = $CellContext`A2 
                  Exp[(-$CellContext`t)/$CellContext`T2]; \
$CellContext`modelAve2ExpreduceZL$$ = $CellContext`ZL; \
$CellContext`modelAve2ExpreduceExp$$ = $CellContext`A1 
                  Exp[(-$CellContext`t)/$CellContext`T]; 
                If[IntegerQ[$CellContext`TimeEnd] == 
                  True, $CellContext`fitAve$$ = NonlinearModelFit[
                    Take[
                    
                    Drop[$CellContext`averData$$, 
                    IntegerPart[$CellContext`FitTime] - 
                    1], $CellContext`TimeEnd], $CellContext`modelAve$$, \
{{$CellContext`ZL, $CellContext`ZL0}, {$CellContext`A1, $CellContext`A10}, \
{$CellContext`T, $CellContext`T0}}, $CellContext`t, MaxIterations -> 10000, 
                    AccuracyGoal -> 8], $CellContext`fitAve$$ = 
                  NonlinearModelFit[
                    Take[
                    
                    Drop[$CellContext`averData$$, 
                    IntegerPart[$CellContext`FitTime] - 1], 
                    All], $CellContext`modelAve$$, {{$CellContext`ZL, \
$CellContext`ZL0}, {$CellContext`A1, $CellContext`A10}, {$CellContext`T, \
$CellContext`T0}}, $CellContext`t, MaxIterations -> 10000, AccuracyGoal -> 
                    8]]; If[
                 IntegerQ[$CellContext`TimeEnd] == 
                  True, $CellContext`fitAveSin$$ = NonlinearModelFit[
                    Take[
                    
                    Drop[$CellContext`averData$$, 
                    IntegerPart[$CellContext`FitTime] - 
                    1], $CellContext`TimeEnd], $CellContext`modelAveSin$$, \
{{$CellContext`ZL, $CellContext`ZL0}, {$CellContext`T, $CellContext`T0}}, \
$CellContext`t, MaxIterations -> 10000, AccuracyGoal -> 
                    8], $CellContext`fitAveSin$$ = NonlinearModelFit[
                    Take[
                    
                    Drop[$CellContext`averData$$, 
                    IntegerPart[$CellContext`FitTime] - 1], 
                    All], $CellContext`modelAveSin$$, {{$CellContext`ZL, \
$CellContext`ZL0}, {$CellContext`T, $CellContext`T0}}, $CellContext`t, 
                    MaxIterations -> 10000, AccuracyGoal -> 
                    8]]; $CellContext`fitAve2Exp$$ = NonlinearModelFit[
                   
                   Drop[$CellContext`averData$$, 
                    IntegerPart[$CellContext`FitTime] - 
                    
                    1], $CellContext`modelAve2Exp$$, {{$CellContext`ZL, \
$CellContext`ZL0}, {$CellContext`A1, $CellContext`A10}, {$CellContext`T, \
$CellContext`T0}, {$CellContext`A2, $CellContext`A20}, {$CellContext`T2, \
$CellContext`T20}}, $CellContext`t, MaxIterations -> 10000, AccuracyGoal -> 
                   8]; If[IntegerQ[$CellContext`TimeEnd] == 
                  True, $CellContext`gr1Ave$$ = Plot[
                    Normal[$CellContext`fitAve$$], {$CellContext`t, 
                    Part[$CellContext`dataTime, $CellContext`FitTime], 
                    
                    Part[$CellContext`dataTime, $CellContext`TimeEnd + \
$CellContext`FitTime]}, PlotStyle -> {Blue, Thick}, PlotRange -> 
                    All], $CellContext`gr1Ave$$ = Plot[
                    Normal[$CellContext`fitAve$$], {$CellContext`t, 
                    Part[$CellContext`dataTime, $CellContext`FitTime], 
                    Max[$CellContext`dataTime]}, PlotStyle -> {Blue, Thick}, 
                    PlotRange -> All]]; $CellContext`gr1reducedExpAve$$ = Plot[
                   ReplaceAll[$CellContext`modelreduceExpAve$$, 
                    Drop[
                    Take[
                    $CellContext`fitAve$$["BestFitParameters"], 3], 
                    1]], {$CellContext`t, 
                    Part[$CellContext`dataTime, $CellContext`FitTime], 
                    Max[$CellContext`dataTime]}, 
                   PlotStyle -> {Red, Dashed, Thick}, PlotRange -> 
                   All]; $CellContext`gr1reducedZLAve$$ = Plot[
                   ReplaceAll[$CellContext`modelreduceZLAve$$, 
                    Take[
                    $CellContext`fitAve$$["BestFitParameters"], 
                    1]], {$CellContext`t, 
                    Part[$CellContext`dataTime, $CellContext`FitTime], 
                    Max[$CellContext`dataTime]}, 
                   PlotStyle -> {Gray, Dotted, Thin}, PlotRange -> 
                   All]; $CellContext`gr2Ave$$ = ListPlot[
                   Take[
                    Drop[$CellContext`averData$$, 
                    IntegerPart[$CellContext`FitTime]], $CellContext`TimeEnd],
                    PlotRange -> All, PlotStyle -> {Gray, Small}, 
                   MaxPlotPoints -> 3000, Frame -> True, 
                   FrameLabel -> {$CellContext`label, ""}]; 
                If[IntegerQ[$CellContext`TimeEnd] == 
                  True, $CellContext`gr5Ave$$ = Plot[
                    Normal[$CellContext`fitAveSin$$], {$CellContext`t, 
                    Part[$CellContext`dataTime, $CellContext`FitTime], 
                    
                    Part[$CellContext`dataTime, $CellContext`TimeEnd + \
$CellContext`FitTime]}, PlotStyle -> {Blue, Thick}, PlotRange -> 
                    All], $CellContext`gr5Ave$$ = Plot[
                    Normal[$CellContext`fitAveSin$$], {$CellContext`t, 
                    Part[$CellContext`dataTime, $CellContext`FitTime], 
                    Max[$CellContext`dataTime]}, PlotStyle -> {Blue, Thick}, 
                    PlotRange -> All]]; $CellContext`gr6Ave$$ = ListPlot[
                   Take[
                    Drop[$CellContext`averData$$, 
                    IntegerPart[$CellContext`FitTime]], $CellContext`TimeEnd],
                    PlotRange -> All, PlotStyle -> {Gray, Small}, 
                   MaxPlotPoints -> 3000, Frame -> True, 
                   FrameLabel -> {$CellContext`label, 
                    ""}]; $CellContext`gr5AvereducedZL$$ = Plot[
                   ReplaceAll[$CellContext`modelAveSinreduceZL$$, 
                    Take[
                    $CellContext`fitAveSin$$["BestFitParameters"], 
                    1]], {$CellContext`t, 
                    Part[$CellContext`dataTime, $CellContext`FitTime], 
                    Max[$CellContext`dataTime]}, 
                   PlotStyle -> {Gray, Dotted, Thin}, PlotRange -> All]; 
                If[IntegerQ[$CellContext`TimeEnd] == 
                  True, $CellContext`gr5AvereducedExp$$ = Plot[
                    ReplaceAll[$CellContext`modelAveSinreduceExp$$, 
                    Drop[
                    Take[
                    $CellContext`fitAveSin$$["BestFitParameters"], 2], 
                    1]], {$CellContext`t, 
                    Part[$CellContext`dataTime, $CellContext`FitTime], 
                    
                    Part[$CellContext`dataTime, $CellContext`TimeEnd + \
$CellContext`FitTime]}, PlotStyle -> {Red, Dashed, Thick}, PlotRange -> All]; 
                  Null, $CellContext`gr5AvereducedExp$$ = Plot[
                    ReplaceAll[$CellContext`modelAveSinreduceExp$$, 
                    Drop[
                    Take[
                    $CellContext`fitAveSin$$["BestFitParameters"], 2], 
                    1]], {$CellContext`t, 
                    Part[$CellContext`dataTime, $CellContext`FitTime], 
                    Max[$CellContext`dataTime]}, 
                    PlotStyle -> {Red, Dashed, Thick}, PlotRange -> 
                    All]]; $CellContext`gr7Ave$$ = Plot[
                   Normal[$CellContext`fitAve2Exp$$], {$CellContext`t, 
                    Part[$CellContext`dataTime, $CellContext`FitTime], 
                    Max[$CellContext`dataTime]}, PlotStyle -> {Blue, Thick}, 
                   PlotRange -> All]; $CellContext`gr8Ave$$ = ListPlot[
                   Take[
                    Drop[$CellContext`averData$$, 
                    IntegerPart[$CellContext`FitTime]], $CellContext`TimeEnd],
                    PlotRange -> All, PlotStyle -> {Gray, Small}, 
                   MaxPlotPoints -> 3000, Frame -> True, 
                   FrameLabel -> {$CellContext`label, 
                    ""}]; $CellContext`gr7Avereduced$$ = Plot[
                   ReplaceAll[$CellContext`modelAve2ExpReduce$$, 
                    Take[
                    $CellContext`fitAve2Exp$$[
                    "BestFitParameters"], -3]], {$CellContext`t, 
                    Part[$CellContext`dataTime, $CellContext`FitTime], 
                    Max[$CellContext`dataTime]}, 
                   PlotStyle -> {Purple, Dashed, Thick}, PlotRange -> 
                   All]; $CellContext`gr7AvereducedZL$$ = Plot[
                   ReplaceAll[$CellContext`modelAve2ExpreduceZL$$, 
                    Take[
                    $CellContext`fitAve2Exp$$["BestFitParameters"], 
                    1]], {$CellContext`t, 
                    Part[$CellContext`dataTime, $CellContext`FitTime], 
                    Max[$CellContext`dataTime]}, 
                   PlotStyle -> {Gray, Dotted, Thin}, PlotRange -> 
                   All]; $CellContext`gr7Avereduced2Exp$$ = Plot[
                   ReplaceAll[$CellContext`modelAve2ExpreduceExp$$, 
                    Drop[
                    Take[
                    $CellContext`fitAve2Exp$$["BestFitParameters"], 3], 
                    1]], {$CellContext`t, 
                    Part[$CellContext`dataTime, $CellContext`FitTime], 
                    Max[$CellContext`dataTime]}, 
                   PlotStyle -> {Red, Dashed, Thick}, PlotRange -> All]; 
                If[IntegerQ[$CellContext`TimeEnd] == 
                  True, $CellContext`fitresAve$$ = {{
                    
                    Show[$CellContext`gr2Ave$$, $CellContext`gr1Ave$$, \
$CellContext`gr1reducedZLAve$$, $CellContext`gr1reducedExpAve$$]}, {
                    ListPlot[
                    $CellContext`fitAve$$["FitResiduals"], 
                    DataRange -> {$CellContext`TimeIn, $CellContext`TimeOut}, 
                    ImageSize -> {400, 250}, PlotRange -> All, Frame -> True, 
                    FrameLabel -> {$CellContext`label, 
                    ""}]}}, $CellContext`fitresAve$$ = {{
                    
                    Show[$CellContext`gr2Ave$$, $CellContext`gr1Ave$$, \
$CellContext`gr1reducedZLAve$$, $CellContext`gr1reducedExpAve$$, Frame -> 
                    True, FrameLabel -> {$CellContext`label, 
                    "Intensity / a. u."}, PlotRange -> All]}, {
                    ListPlot[
                    $CellContext`fitAve$$["FitResiduals"], DataRange -> {
                    Min[
                    Part[$CellContext`averData$$, All, 1]], 
                    Max[
                    Part[$CellContext`averData$$, All, 1]]}, 
                    ImageSize -> {400, 250}, PlotRange -> All, Frame -> True, 
                    FrameLabel -> {$CellContext`label, ""}]}}]; 
                If[IntegerQ[$CellContext`TimeEnd] == 
                  True, $CellContext`fitres3Ave$$ = {{
                    
                    Show[$CellContext`gr6Ave$$, $CellContext`gr5Ave$$, \
$CellContext`gr5AvereducedZL$$, $CellContext`gr5AvereducedExp$$]}, {
                    ListPlot[
                    $CellContext`fitAveSin$$["FitResiduals"], 
                    DataRange -> {$CellContext`TimeIn, $CellContext`TimeOut}, 
                    ImageSize -> {400, 250}, PlotRange -> All, Frame -> True, 
                    FrameLabel -> {$CellContext`label, ""}]}}; 
                  Null, $CellContext`fitres3Ave$$ = {{
                    
                    Show[$CellContext`gr6Ave$$, $CellContext`gr5Ave$$, \
$CellContext`gr5AvereducedZL$$, $CellContext`gr5AvereducedExp$$]}, {
                    ListPlot[
                    $CellContext`fitAveSin$$["FitResiduals"], DataRange -> {
                    Min[
                    Part[$CellContext`averData$$, All, 1]], 
                    Max[
                    Part[$CellContext`averData$$, All, 1]]}, 
                    ImageSize -> {400, 250}, Frame -> True, 
                    FrameLabel -> {$CellContext`label, ""}]}}]; 
                If[IntegerQ[$CellContext`TimeEnd] == 
                  True, $CellContext`fitres4Ave$$ = {{
                    
                    Show[$CellContext`gr8Ave$$, $CellContext`gr7Ave$$, \
$CellContext`gr7Avereduced$$, $CellContext`gr7AvereducedZL$$, \
$CellContext`gr7Avereduced2Exp$$]}, {
                    ListPlot[
                    $CellContext`fitAve2Exp$$["FitResiduals"], 
                    DataRange -> {$CellContext`TimeIn, $CellContext`TimeOut}, 
                    ImageSize -> {400, 250}, PlotRange -> All, Frame -> True, 
                    FrameLabel -> {$CellContext`label, ""}]}}; 
                  Null, $CellContext`fitres4Ave$$ = {{
                    
                    Show[$CellContext`gr8Ave$$, $CellContext`gr7Ave$$, \
$CellContext`gr7Avereduced$$, $CellContext`gr7AvereducedZL$$, \
$CellContext`gr7Avereduced2Exp$$]}, {
                    ListPlot[
                    $CellContext`fitAve2Exp$$["FitResiduals"], DataRange -> {
                    Min[
                    Part[$CellContext`averData$$, All, 1]], 
                    Max[
                    Part[$CellContext`averData$$, All, 1]]}, 
                    ImageSize -> {400, 250}, Frame -> True, 
                    FrameLabel -> {$CellContext`label, 
                    ""}]}}]; $CellContext`grdataAve$$ = \
$CellContext`plotGrid[$CellContext`fitresAve$$, 450, 380, ImagePadding -> 
                   60]; $CellContext`grdata4Ave$$ = \
$CellContext`plotGrid[$CellContext`fitres3Ave$$, 450, 380, ImagePadding -> 
                   60]; $CellContext`grdata5Ave$$ = \
$CellContext`plotGrid[$CellContext`fitres4Ave$$, 450, 380, ImagePadding -> 
                   60]; $CellContext`textdataAve$$ = Grid[
                   Transpose[
                    ({#, 
                    $CellContext`fitAve$$[#]}& )[{"RSquared"}]], Alignment -> 
                   Left]; $CellContext`textdata2Ave$$ = $CellContext`fitAve$$[
                  "ParameterConfidenceIntervalTable"]; \
$CellContext`textdata3Ave$$ = StringJoin["Exact Start Field / G        ", 
                   ToString[
                   Round[$CellContext`SF - $CellContext`StartField, \
$CellContext`FieldResolution] + $CellContext`StartField]]; \
$CellContext`textdata4Ave$$ = StringJoin["Exact End Field / G          ", 
                   ToString[
                   Round[$CellContext`EF - $CellContext`StartField, \
$CellContext`FieldResolution] + $CellContext`StartField]]; \
$CellContext`textdata13Ave$$ = Grid[
                   Transpose[
                    ({#, 
                    $CellContext`fitAveSin$$[#]}& )[{"RSquared"}]], Alignment -> 
                   Left]; $CellContext`textdata23Ave$$ = \
$CellContext`fitAveSin$$[
                  "ParameterConfidenceIntervalTable"]; \
$CellContext`textdataAve2Exp$$ = Grid[
                   Transpose[
                    ({#, 
                    $CellContext`fitAve2Exp$$[#]}& )[{"RSquared"}]], 
                   Alignment -> 
                   Left]; $CellContext`textdataAve2Exp2$$ = \
$CellContext`fitAve2Exp$$["ParameterConfidenceIntervalTable"]; Null}, {Which[
                  
                  Or[$CellContext`SF < $CellContext`StartField, \
$CellContext`SF > $CellContext`EndField], 
                  MessageDialog[
                   Style["Starting field is incorrect", 18, Black]], 
                  
                  Or[$CellContext`EF > $CellContext`EndField, $CellContext`EF < \
$CellContext`StartField], 
                  MessageDialog[
                   Style["Ending field is incorrect", 18, Black]], 
                  
                  Or[$CellContext`TimeOut > 
                   Part[$CellContext`dataTime, -1], $CellContext`TimeIn >= \
$CellContext`TimeOut, $CellContext`TimeOut < $CellContext`TimeResolution], 
                  MessageDialog[
                   Style["Time out is incorrect", 18, Black]], 
                  
                  Or[$CellContext`TimeIn > 
                   Part[$CellContext`dataTime, -1], $CellContext`TimeIn >= \
$CellContext`TimeOut, $CellContext`TimeIn < $CellContext`TimeResolution], 
                  MessageDialog[
                   Style["Time in is incorrect", 18, Black]]]; Abort[]}, {
               MessageDialog[
                  Style[
                  "An incorrect file / incorrect field / incorrect time has \
been used", 18, Black]]; Abort[]}]; Null),
            Evaluator->Automatic,
            FrameMargins->10,
            Method->"Queued"], ""},
          {"\<\"/media/Melnikov/00_Experimental_Data/2019/FEL\"\>", "", ""},
          {"\<\"Choose File Name to Save:\"\>", 
           
           TemplateBox[{
            Dynamic[$CellContext`f2$$],"Save",All,Automatic,DynamicBox[
              FEPrivate`FrontEndResource["FEStrings", "BrowseLabel"]],
             "DialogBox",{"FileNameSetter"},Automatic,0,{100, 40}},
            "FileNameSetterBoxes4"], ""},
          {"", "", ""},
          {"\<\"\"\>", 
           ButtonBox[
            StyleBox["\<\"Save Data, Fit, And Residuals\"\>",
             StripOnInput->False,
             FontWeight->Bold],
            Appearance->Automatic,
            ButtonFunction:>{If[
                And[
                Head[$CellContext`f2$$] == String, 
                 Head[$CellContext`fileData] == List, 
                 Head[$CellContext`dataKinetics] == List, StringStartsQ[
                   Part[$CellContext`fileData, 1, 1], "%"] == True], {Export[
                   StringJoin[$CellContext`f2$$, "_Averaged_Data", 
                    ".csv"], $CellContext`averData$$, "CSV"]; 
                 Which[$CellContext`zzz$$ == 1, {Export[
                    StringJoin[$CellContext`f2$$, "_fit_AD", ".csv"], 
                    Table[{$CellContext`t, 
                    Normal[$CellContext`fitAve$$]}, {$CellContext`t, 
                    Part[$CellContext`dataTime, $CellContext`FitTime + 1], 
                    
                    Part[$CellContext`dataTime, $CellContext`TimeEnd + \
$CellContext`FitTime], $CellContext`TimeResolution}], "CSV"]; Export[
                    StringJoin[$CellContext`f2$$, "_fit_res_AD", ".csv"], 
                    Transpose[{
                    Take[
                    Drop[$CellContext`dataTime, 
                    IntegerPart[$CellContext`FitTime]], $CellContext`TimeEnd], 
                    $CellContext`fitAve$$["FitResiduals"]}], "CSV"]; Export[
                    
                    StringJoin[$CellContext`f2$$, "_fit_parameters_AD", 
                    ".csv"], {
                    StringJoin["RSquared: ", 
                    ToString[
                    $CellContext`fitAve$$["RSquared"]], "\n"], 
                    ToString[$CellContext`textdata2Ave$$], "\n", 
                    ToString[$CellContext`modelAve$$]}, "CSV"]; 
                    Null}, $CellContext`zzz$$ == 3, {Export[
                    StringJoin[$CellContext`f2$$, "_fit_AD_Sin", ".csv"], 
                    Table[{$CellContext`t, 
                    Normal[$CellContext`fitAveSin$$]}, {$CellContext`t, 
                    Part[$CellContext`dataTime, $CellContext`FitTime + 1], 
                    Max[$CellContext`dataTime], $CellContext`TimeResolution}],
                     "CSV"]; Export[
                    StringJoin[$CellContext`f2$$, "_fit_res_AD_Sin", ".csv"], 
                    Transpose[{
                    Take[
                    Drop[$CellContext`dataTime, 
                    IntegerPart[$CellContext`FitTime]], $CellContext`TimeEnd], 
                    $CellContext`fitAveSin$$["FitResiduals"]}], "CSV"]; Export[
                    
                    StringJoin[$CellContext`f2$$, "_fit_parameters_AD_Sin", 
                    ".csv"], {
                    StringJoin["RSquared: ", 
                    ToString[
                    $CellContext`fitAveSin$$["RSquared"]], "\n"], 
                    ToString[$CellContext`textdata23Ave$$], "\n", 
                    ToString[$CellContext`modelAveSin$$]}, "CSV"]; 
                    Null}, $CellContext`zzz$$ == 2, {Export[
                    StringJoin[$CellContext`f2$$, "_fit_AD_2Exp", ".csv"], 
                    Table[{$CellContext`t, 
                    Normal[$CellContext`fitAve2Exp$$]}, {$CellContext`t, 
                    Part[$CellContext`dataTime, $CellContext`FitTime + 1], 
                    Max[$CellContext`dataTime], $CellContext`TimeResolution}],
                     "CSV"]; Export[
                    StringJoin[$CellContext`f2$$, "_fit_res_AD_2Exp", ".csv"], 
                    Transpose[{
                    Take[
                    Drop[$CellContext`dataTime, 
                    IntegerPart[$CellContext`FitTime]], $CellContext`TimeEnd], 
                    $CellContext`fitAve2Exp$$["FitResiduals"]}], "CSV"]; 
                    Export[
                    
                    StringJoin[$CellContext`f2$$, "_fit_parameters_AD_2Exp", 
                    ".csv"], {
                    StringJoin["RSquared: ", 
                    ToString[
                    $CellContext`fitAve2Exp$$["RSquared"]], "\n"], 
                    ToString[$CellContext`textdataAve2Exp2$$], "\n", 
                    ToString[$CellContext`modelAve2Exp$$]}, "CSV"]; Null}]; 
                 Null}, {MessageDialog[
                   Style["Path to file has not been chosen", 18, Black]]; 
                 Abort[]}, {MessageDialog[
                   Style["Path to file has not been chosen", 18, Black]]; 
                 Abort[]}]; Null},
            Evaluator->Automatic,
            FrameMargins->10,
            Method->"Queued"], ""},
          {"", "", ""}
         },
         AutoDelete->False,
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"], 
       DynamicBox[ToBoxes[
         Which[$CellContext`ClickerAve$$ == 1, 
          Which[$CellContext`zzz$$ == 1, 
           Grid[{{
              Dynamic[
               If[$CellContext`y2$$ == 1, $CellContext`grdataAve$$, 
                $CellContext`PlotExplorer[$CellContext`grdataAve$$]]]}, {
              Grid[{{
                 Dynamic[$CellContext`textdataAve$$]}, {}, {
                 
                 Dynamic[$CellContext`textdata2Ave$$]}}]}, {}, \
{$CellContext`modelAve$$}, {}, {
              Style["Lower Panel - Fit Residuals", Bold]}, {}, {
              Style["Upper Panel - Fit, Where:", Bold]}, {
             "Gray Dots - Experimental Points"}, {
             "Blue Solid Line - The Whole Model"}, {
             "Red Dashed Line - A1*Exp(-t/T)"}, {"Small Gray Dots - ZL"}, {}, {
              Dynamic[$CellContext`textdata3Ave$$]}, {
              Dynamic[$CellContext`textdata4Ave$$]}}], $CellContext`zzz$$ == 
           3, 
           Grid[{{
              Dynamic[
               If[$CellContext`y2$$ == 1, $CellContext`grdata4Ave$$, 
                $CellContext`PlotExplorer[$CellContext`grdata4Ave$$]]]}, {
              Grid[{{
                 Dynamic[$CellContext`textdata13Ave$$]}, {}, {
                 
                 Dynamic[$CellContext`textdata23Ave$$]}}]}, {}, \
{$CellContext`modelAveSin$$}, {}, {
              Style["Lower Panel - Fit Residuals", Bold]}, {}, {
              Style["Upper Panel - Fit, Where:", Bold]}, {
             "Gray Dots - Experimental Points"}, {
             "Blue Solid Line - The Whole Model"}, {
             "Red Dashed Line - (-t/T)"}, {"Small Gray Dots - ZL"}, {}, {
              Dynamic[$CellContext`textdata3Ave$$]}, {
              Dynamic[$CellContext`textdata4Ave$$]}}], $CellContext`zzz$$ == 
           2, 
           Grid[{{
              Dynamic[
               If[$CellContext`y2$$ == 1, $CellContext`grdata5Ave$$, 
                $CellContext`PlotExplorer[$CellContext`grdata5Ave$$]]]}, {
              Grid[{{
                 Dynamic[$CellContext`textdataAve2Exp$$]}, {}, {
                 
                 Dynamic[$CellContext`textdataAve2Exp2$$]}}]}, {}, \
{$CellContext`modelAve2Exp$$}, {}, {
              Style["Lower Panel - Fit Residuals", Bold]}, {}, {
              Style["Upper Panel - Fit, Where:", Bold]}, {
             "Gray Dots - Experimental Points"}, {
             "Blue Solid Line - The Whole Model"}, {
             "Red Dashed Line - A1*Exp(-t/T1)"}, {
             "Purple Dashed Line - A2*Exp(-t/T2)"}, {
             "Small Gray Dots - ZL"}, {}, {
              Dynamic[$CellContext`textdata3Ave$$]}, {
              
              Dynamic[$CellContext`textdata4Ave$$]}}]], \
$CellContext`ClickerAve$$ == 0, 
          Which[$CellContext`zzz$$ == 1, 
           Grid[{{
              Dynamic["Fit Something"]}}], $CellContext`zzz$$ == 3, 
           Grid[{{
              Dynamic["Fit Something"]}}], $CellContext`zzz$$ == 2, 
           Grid[{{
              Dynamic["Fit Something"]}}]]], StandardForm],
        ImageSizeCache->{64., {2., 7.}}], "\<\"   \"\>", 
       TagBox[GridBox[{
          {
           ButtonBox[
            StyleBox["\<\"Averaged Data Plot\"\>",
             StripOnInput->False,
             FontWeight->Bold],
            Appearance->Automatic,
            ButtonFunction:>{If[
                And[
                 Or[
                 Head[$CellContext`SF] == Integer, Head[$CellContext`SF] == 
                  Real], 
                 Or[
                 Head[$CellContext`EF] == Integer, Head[$CellContext`EF] == 
                  Real], $CellContext`SF >= $CellContext`StartField, \
$CellContext`SF <= $CellContext`EF, $CellContext`EF <= $CellContext`EndField, \
$CellContext`EF >= $CellContext`StartField, $CellContext`SF <= \
$CellContext`EndField, Head[$CellContext`fileData] == List, 
                 Head[$CellContext`dataKinetics] == List, StringStartsQ[
                   Part[$CellContext`fileData, 1, 1], "%"] == True, 
                 Or[
                 NumberQ[$CellContext`TimeOut] == True, $CellContext`TimeOut != 
                  Null], 
                 Or[
                 NumberQ[$CellContext`TimeIn] == True, $CellContext`TimeIn != 
                  Null], $CellContext`TimeOut <= 
                 Part[$CellContext`dataTime, -1], $CellContext`TimeOut >= \
$CellContext`TimeResolution, $CellContext`TimeIn <= 
                 Part[$CellContext`dataTime, -1], $CellContext`TimeIn >= \
$CellContext`TimeResolution, $CellContext`TimeIn < $CellContext`TimeOut], \
{$CellContext`ClickerAvePlot$$ = 1; $CellContext`FitTime = 
                  IntegerPart[$CellContext`TimeIn/$CellContext`TimeResolution]\
; $CellContext`TimeEnd = 
                  IntegerPart[
                   IntegerPart[$CellContext`TimeOut/$CellContext`\
TimeResolution] - $CellContext`FitTime]; 
                 DynamicModule[{$CellContext`datasum2}, 
                   Which[$CellContext`s == 1, $CellContext`f$$[
                    Pattern[$CellContext`H, 
                    Blank[]]] := Transpose[{$CellContext`dataTime, 
                    
                    Part[$CellContext`dataKinetics, 
                    IntegerPart[($CellContext`H - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, 
                    All]}], $CellContext`s == 2, $CellContext`f$$[
                    Pattern[$CellContext`H, 
                    Blank[]]] := Transpose[{$CellContext`dataTime, 
                    
                    Part[$CellContext`dataKineticsCorr, 
                    IntegerPart[($CellContext`H - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, 
                    All]}], $CellContext`s == 3, $CellContext`f$$[
                    Pattern[$CellContext`H, 
                    Blank[]]] := Transpose[{$CellContext`dataTime, 
                    
                    Part[$CellContext`dataKineticsCorrField, 
                    IntegerPart[($CellContext`H - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, 
                    All]}]]; $CellContext`datasum2 = Table[
                    $CellContext`f$$[$CellContext`H], {$CellContext`H, 
                    Round[$CellContext`SF, $CellContext`FieldResolution], 
                    
                    Round[$CellContext`EF, $CellContext`FieldResolution], \
$CellContext`FieldResolution}]; $CellContext`averData$$ = 
                    Map[Total[#]/Length[$CellContext`datasum2]& , 
                    
                    Transpose[$CellContext`datasum2]]; \
$CellContext`aveLegendButton$$ = Join[{
                    Text[
                    Style[
                    StringJoin[
                    ToString[$CellContext`SF], " - ", 
                    ToString[$CellContext`EF], " G"], 
                    Bold]]}, $CellContext`aveLegendButton$$]; \
$CellContext`graverData2$$ = 
                    ListLinePlot[$CellContext`averData$$, PlotRange -> All, 
                    Frame -> True, 
                    FrameLabel -> {$CellContext`label, "Intensity / a. u."}, 
                    GridLines -> Automatic, GridLinesStyle -> 
                    Directive[LightGray, Dashed], ImageSize -> {400, 250}, 
                    PlotLegends -> 
                    Placed[$CellContext`aveLegendButton$$, 
                    Above]]; $CellContext`area$$ = 
                    Plot[{100 Sign[$CellContext`x - $CellContext`TimeOut], 
                    100 Sign[$CellContext`x - $CellContext`TimeIn]}, \
{$CellContext`x, 0, $CellContext`TimeOut + 0.1}, ExclusionsStyle -> 
                    Directive[Red, Thick, Dashed], PlotRange -> {-1, 1}, 
                    Filling -> {1 -> {2}}, FillingStyle -> Directive[
                    Lighter[Red, 0.1], 
                    Opacity[0.1]]]; Null]; Null}, {
                 Which[
                  
                  Or[$CellContext`SF < $CellContext`StartField, \
$CellContext`SF > $CellContext`EndField], 
                  MessageDialog[
                   Style["Starting field is incorrect", 18, Black]], 
                  
                  Or[$CellContext`EF > $CellContext`EndField, $CellContext`EF < \
$CellContext`StartField], 
                  MessageDialog[
                   Style["Ending field is incorrect", 18, Black]], 
                  Or[$CellContext`TimeOut > 
                   Part[$CellContext`dataTime, -1], $CellContext`TimeIn >= \
$CellContext`TimeOut, $CellContext`TimeOut < $CellContext`TimeResolution], 
                  MessageDialog[
                   Style["Time out is incorrect", 18, Black]], 
                  
                  Or[$CellContext`TimeIn > 
                   Part[$CellContext`dataTime, -1], $CellContext`TimeIn >= \
$CellContext`TimeOut, $CellContext`TimeIn < $CellContext`TimeResolution], 
                  MessageDialog[
                   Style["Time in is incorrect", 18, Black]]]}, {MessageDialog[
                   Style[
                   "An incorrect file / incorrect field has been used", 18, 
                    Black]]; Abort[]}]; Null},
            Evaluator->Automatic,
            FrameMargins->10,
            Method->"Queued"], "\[SpanFromLeft]"},
          {"", ""},
          {"", ""},
          {
           DynamicBox[ToBoxes[
             Which[$CellContext`ClickerAvePlot$$ == 1, 
              If[
               And[$CellContext`y2$$ == 1, 
                Or[
                NumberQ[$CellContext`TimeOut] == True, $CellContext`TimeOut != 
                 Null]], $CellContext`area$$ = 
                Plot[{100 Sign[$CellContext`x - $CellContext`TimeOut], 100 
                   Sign[$CellContext`x - $CellContext`TimeIn]}, \
{$CellContext`x, 0, $CellContext`TimeOut + 0.1}, ExclusionsStyle -> 
                  Directive[Red, Thick, Dashed], PlotRange -> {-1, 1}, 
                  Filling -> {1 -> {2}}, FillingStyle -> Directive[
                    Lighter[Red, 0.1], 
                    Opacity[0.1]]]; Dynamic[
                 Show[$CellContext`graverData2$$, $CellContext`area$$]], 
               If[
                Or[
                NumberQ[$CellContext`TimeOut] == True, $CellContext`TimeOut != 
                 Null], $CellContext`area$$ = 
                 Plot[{100 Sign[$CellContext`x - $CellContext`TimeOut], 100 
                    Sign[$CellContext`x - $CellContext`TimeIn]}, \
{$CellContext`x, 0, $CellContext`TimeOut + 0.1}, ExclusionsStyle -> 
                   Directive[Red, Thick, Dashed], PlotRange -> {-1, 1}, 
                   Filling -> {1 -> {2}}, FillingStyle -> Directive[
                    Lighter[Red, 0.1], 
                    Opacity[0.1]]]; $CellContext`PlotExplorer[
                  
                  Show[$CellContext`graverData2$$, $CellContext`area$$, 
                   ImageSize -> {400, 320}]], {MessageDialog[
                   Style[
                   "An incorrect time is used ", 18, 
                    Black]]; $CellContext`TimeOut = 
                  Part[$CellContext`dataTime, -1]; Abort[]; Null}], {
               MessageDialog[
                  Style[
                  "An incorrect time is used ", 18, 
                   Black]]; $CellContext`TimeOut = 
                 Part[$CellContext`dataTime, -1]; Abort[]; 
                Null}], $CellContext`ClickerAvePlot$$ == 0, 
              "Press Averaged Plot"], StandardForm],
            ImageSizeCache->{90., {2., 7.}}], "\[SpanFromLeft]"},
          {"", ""},
          {"", ""},
          {
           ButtonBox[
            StyleBox["\<\"Clear Fit And Kinetics\"\>",
             StripOnInput->False,
             FontWeight->Bold],
            Appearance->Automatic,
            
            ButtonFunction:>{$CellContext`ClickerAve$$ = 
               0; $CellContext`ClickerAvePlot$$ = 0; Null},
            Evaluator->Automatic,
            FrameMargins->10,
            Method->"Queued"], "\[SpanFromLeft]"},
          {"", ""},
          {"", ""},
          {"\<\"Normalization:\"\>", 
           CheckboxBox[Dynamic[$CellContext`noave$$], {1, 2}]},
          {"\<\"Positive Kinetics Are Inverted In Normalization Mode\"\>", 
           "\[SpanFromLeft]"},
          {"", ""},
          {"\<\"Type:\"\>", 
           InterpretationBox[
            StyleBox[
             RowBox[{GridBox[{
                {
                 RadioButtonBox[Dynamic[$CellContext`tave$$], {1},
                  DefaultBaseStyle->"RadioButtonBar"], 
                 StyleBox["\<\"Overlapping\"\>", "RadioButtonBarLabel",
                  StripOnInput->False]}
               },
               AutoDelete->False,
               BaselinePosition->{1, 2},
               
               GridBoxAlignment->{
                "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], {
                    Offset[0.21]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.4]}, 
                   Offset[0.2]}}], "  ", GridBox[{
                {
                 RadioButtonBox[Dynamic[$CellContext`tave$$], {2},
                  DefaultBaseStyle->"RadioButtonBar"], 
                 StyleBox["\<\"Shifting\"\>", "RadioButtonBarLabel",
                  StripOnInput->False]}
               },
               AutoDelete->False,
               BaselinePosition->{1, 2},
               
               GridBoxAlignment->{
                "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], {
                    Offset[0.21]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.4]}, 
                   Offset[0.2]}}]}], "Deploy"],
            RadioButtonBar[
             Dynamic[$CellContext`tave$$], {
             1 -> "Overlapping", 2 -> "Shifting"}]]},
          {"", ""},
          {
           ButtonBox[
            StyleBox["\<\"Memorize Averaged\"\>",
             StripOnInput->False,
             FontWeight->Bold],
            Appearance->Automatic,
            ButtonFunction:>{If[
                And[
                 Or[
                 Head[$CellContext`SF] == Integer, Head[$CellContext`SF] == 
                  Real], 
                 Or[
                 Head[$CellContext`EF] == Integer, Head[$CellContext`EF] == 
                  Real], $CellContext`SF >= $CellContext`StartField, \
$CellContext`EF <= $CellContext`EndField, $CellContext`EF >= \
$CellContext`StartField, $CellContext`SF <= $CellContext`EndField, 
                 Head[$CellContext`fileData] == List, 
                 Head[$CellContext`dataKinetics] == List, StringStartsQ[
                   Part[$CellContext`fileData, 1, 1], "%"] == 
                 True], {$CellContext`aveLegend$$ = Join[{
                    Text[
                    Style[
                    StringJoin[
                    ToString[$CellContext`SF], " - ", 
                    ToString[$CellContext`EF], " G", " (F", 
                    ToString[$CellContext`counter], ")"], 
                    Bold]]}, $CellContext`aveLegend$$]; 
                 Which[$CellContext`s == 1, $CellContext`f$$[
                    Pattern[$CellContext`H, 
                    Blank[]]] := Transpose[{$CellContext`dataTime, 
                    
                    Part[$CellContext`dataKinetics, 
                    IntegerPart[($CellContext`H - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, 
                    All]}], $CellContext`s == 2, $CellContext`f$$[
                    Pattern[$CellContext`H, 
                    Blank[]]] := Transpose[{$CellContext`dataTime, 
                    
                    Part[$CellContext`dataKineticsCorr, 
                    IntegerPart[($CellContext`H - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, 
                    All]}], $CellContext`s == 3, $CellContext`f$$[
                    Pattern[$CellContext`H, 
                    Blank[]]] := Transpose[{$CellContext`dataTime, 
                    
                    Part[$CellContext`dataKineticsCorrField, 
                    IntegerPart[($CellContext`H - \
$CellContext`StartField)/$CellContext`FieldResolution] + 1, 
                    All]}]]; $CellContext`datasum$$ = Table[
                    $CellContext`f$$[$CellContext`H], {$CellContext`H, 
                    Round[$CellContext`SF, $CellContext`FieldResolution], 
                    
                    Round[$CellContext`EF, $CellContext`FieldResolution], \
$CellContext`FieldResolution}]; $CellContext`averData$$ = 
                  Map[Total[#]/Length[$CellContext`datasum$$]& , 
                    
                    Transpose[$CellContext`datasum$$]]; \
$CellContext`averDataNorm$$ = 
                  If[Part[$CellContext`averData$$, $CellContext`FitTime, 2] > 
                    0, 
                    Transpose[{
                    Part[
                    Map[Total[#]/Length[$CellContext`datasum$$]& , 
                    Transpose[$CellContext`datasum$$]], All, 1], Part[
                    Map[Total[#]/Length[$CellContext`datasum$$]& , 
                    Transpose[$CellContext`datasum$$]], All, 2]/(-Max[
                    Abs[
                    Part[
                    Map[Total[#]/Length[$CellContext`datasum$$]& , 
                    Transpose[$CellContext`datasum$$]], All, 2]]])}], 
                    Transpose[{
                    Part[
                    Map[Total[#]/Length[$CellContext`datasum$$]& , 
                    Transpose[$CellContext`datasum$$]], All, 1], Part[
                    Map[Total[#]/Length[$CellContext`datasum$$]& , 
                    Transpose[$CellContext`datasum$$]], All, 2]/Max[
                    Abs[
                    Part[
                    Map[Total[#]/Length[$CellContext`datasum$$]& , 
                    Transpose[$CellContext`datasum$$]], All, 
                    2]]]}]]; $CellContext`averDataNormSh$$ = 
                  If[Part[$CellContext`averData$$, $CellContext`FitTime, 2] > 
                    0, 
                    Transpose[{
                    Part[
                    Map[Total[#]/Length[$CellContext`datasum$$]& , 
                    Transpose[$CellContext`datasum$$]], All, 1], 
                    1 (Length[$CellContext`MemAveNormSh$$] - 1) + Part[
                    Map[Total[#]/Length[$CellContext`datasum$$]& , 
                    Transpose[$CellContext`datasum$$]], All, 2]/(-Max[
                    Abs[
                    Part[
                    Map[Total[#]/Length[$CellContext`datasum$$]& , 
                    Transpose[$CellContext`datasum$$]], All, 2]]])}], 
                    Transpose[{
                    Part[
                    Map[Total[#]/Length[$CellContext`datasum$$]& , 
                    Transpose[$CellContext`datasum$$]], All, 1], 
                    1 (Length[$CellContext`MemAveNormSh$$] - 1) + Part[
                    Map[Total[#]/Length[$CellContext`datasum$$]& , 
                    Transpose[$CellContext`datasum$$]], All, 2]/Max[
                    Abs[
                    Part[
                    Map[Total[#]/Length[$CellContext`datasum$$]& , 
                    Transpose[$CellContext`datasum$$]], All, 
                    2]]]}]]; $CellContext`MemAve$$ = 
                  Join[{$CellContext`averData$$}, $CellContext`MemAve$$]; \
$CellContext`MemAveNorm$$ = 
                  Join[{$CellContext`averDataNorm$$}, \
$CellContext`MemAveNorm$$]; $CellContext`MemAveNormSh$$ = 
                  Join[{$CellContext`averDataNormSh$$}, \
$CellContext`MemAveNormSh$$]; Null}, {
                 Which[
                  
                  Or[$CellContext`SF < $CellContext`StartField, \
$CellContext`SF > $CellContext`EndField], 
                  MessageDialog[
                   Style["Starting field is incorrect", 18, Black]], 
                  
                  Or[$CellContext`EF > $CellContext`EndField, $CellContext`EF < \
$CellContext`StartField], 
                  MessageDialog[
                   Style["Ending field is incorrect", 18, Black]]]}, {
                MessageDialog[
                   Style[
                   "An incorrect file / incorrect field has been used", 18, 
                    Black]]; Abort[]}]; Null},
            Evaluator->Automatic,
            FrameMargins->10,
            Method->"Queued"], "\[SpanFromLeft]"},
          {"", ""},
          {"\<\"Number to Delete (Counts From Left):\"\>", 
           InputFieldBox[Dynamic[$CellContext`ndelave$$], Number,
            FieldSize->13]},
          {
           ButtonBox[
            StyleBox["\<\"Delete Arbitrary\"\>",
             StripOnInput->False,
             FontWeight->Bold],
            Appearance->Automatic,
            ButtonFunction:>{If[
                And[
                Length[$CellContext`MemAve$$] >= 2, 
                 Round[$CellContext`ndelave$$] < 
                 Length[$CellContext`MemAve$$]], $CellContext`MemAve$$ = 
                Drop[$CellContext`MemAve$$, {
                   Round[$CellContext`ndelave$$]}]]; If[
                And[
                Length[$CellContext`MemAveNorm$$] >= 2, 
                 Round[$CellContext`ndelave$$] < 
                 Length[$CellContext`MemAveNorm$$]], \
$CellContext`MemAveNorm$$ = Drop[$CellContext`MemAveNorm$$, {
                   Round[$CellContext`ndelave$$]}]]; If[
                And[
                Length[$CellContext`MemAveNormSh$$] >= 2, 
                 Round[$CellContext`ndelave$$] < 
                 Length[$CellContext`MemAveNormSh$$]], \
$CellContext`MemAveNormSh$$ = Drop[$CellContext`MemAveNormSh$$, {
                   Round[$CellContext`ndelave$$]}]]; If[
                And[
                Length[$CellContext`aveLegend$$] >= 1, 
                 Round[$CellContext`ndelave$$] < 
                 Length[$CellContext`aveLegend$$]], $CellContext`aveLegend$$ = 
                Drop[$CellContext`aveLegend$$, {
                   Round[$CellContext`ndelave$$]}]]; Null},
            Evaluator->Automatic,
            FrameMargins->10,
            Method->"Queued"], "\[SpanFromLeft]"},
          {
           ButtonBox[
            StyleBox["\<\"Delete All\"\>",
             StripOnInput->False,
             FontWeight->Bold],
            Appearance->Automatic,
            
            ButtonFunction:>{
             ClearAll[$CellContext`MemAve$$]; $CellContext`MemAve$$ = {0}; 
              ClearAll[$CellContext`MemAveNorm$$]; $CellContext`MemAveNorm$$ = \
{0}; ClearAll[$CellContext`MemAveNormSh$$]; $CellContext`MemAveNormSh$$ = {0}; 
              Null},
            Evaluator->Automatic,
            FrameMargins->10,
            Method->"Queued"], "\[SpanFromLeft]"},
          {"", ""},
          {
           DynamicBox[ToBoxes[
             Which[$CellContext`tave$$ == 1, 
              Which[$CellContext`noave$$ == 1, 
               If[$CellContext`y2$$ == 1, 
                If[Length[$CellContext`MemAve$$] >= 2, 
                 ListLinePlot[
                  Drop[$CellContext`MemAve$$, -1], PlotRange -> All, Frame -> 
                  True, FrameLabel -> {"Time / \[Mu]s", "Intensity / a. u."}, 
                  GridLines -> Automatic, GridLinesStyle -> 
                  Directive[LightGray, Dashed], ImageSize -> {400, 250}, 
                  PlotLegends -> Placed[$CellContext`aveLegend$$, Above]], 
                 "Memorize Something"], 
                If[Length[$CellContext`MemAve$$] >= 2, 
                 $CellContext`PlotExplorer[
                  ListLinePlot[
                   Drop[$CellContext`MemAve$$, -1], PlotRange -> All, Frame -> 
                   True, FrameLabel -> {"Time / \[Mu]s", "Intensity / a. u."},
                    GridLines -> Automatic, GridLinesStyle -> 
                   Directive[LightGray, Dashed], ImageSize -> {400, 320}, 
                   PlotLegends -> Placed[$CellContext`aveLegend$$, Above]]], 
                 "Memorize Something"]], $CellContext`noave$$ == 2, 
               If[$CellContext`y2$$ == 1, 
                If[Length[$CellContext`MemAveNorm$$] >= 2, 
                 ListLinePlot[
                  Drop[$CellContext`MemAveNorm$$, -1], PlotRange -> All, 
                  Frame -> True, 
                  FrameLabel -> {"Time / \[Mu]s", "Intensity / a. u."}, 
                  GridLines -> Automatic, GridLinesStyle -> 
                  Directive[LightGray, Dashed], ImageSize -> {400, 250}, 
                  PlotLegends -> Placed[$CellContext`aveLegend$$, Above]], 
                 "Memorize Something"], 
                If[Length[$CellContext`MemAveNorm$$] >= 2, 
                 $CellContext`PlotExplorer[
                  ListLinePlot[
                   Drop[$CellContext`MemAveNorm$$, -1], PlotRange -> All, 
                   Frame -> True, 
                   FrameLabel -> {"Time / \[Mu]s", "Intensity / a. u."}, 
                   GridLines -> Automatic, GridLinesStyle -> 
                   Directive[LightGray, Dashed], ImageSize -> {400, 320}, 
                   PlotLegends -> Placed[$CellContext`aveLegend$$, Above]]], 
                 "Memorize Something"]]], $CellContext`tave$$ == 2, 
              Which[$CellContext`noave$$ == 1, 
               If[$CellContext`y2$$ == 1, 
                If[Length[$CellContext`MemAve$$] >= 2, 
                 ListLinePlot[
                  Drop[$CellContext`MemAve$$, -1], PlotRange -> All, Frame -> 
                  True, FrameLabel -> {"Time / \[Mu]s", "Intensity / a. u."}, 
                  GridLines -> Automatic, GridLinesStyle -> 
                  Directive[LightGray, Dashed], ImageSize -> {400, 250}, 
                  PlotLegends -> Placed[$CellContext`aveLegend$$, Above]], 
                 "Memorize Something"], 
                If[Length[$CellContext`MemAve$$] >= 2, 
                 $CellContext`PlotExplorer[
                  ListLinePlot[
                   Drop[$CellContext`MemAve$$, -1], PlotRange -> All, Frame -> 
                   True, FrameLabel -> {"Time / \[Mu]s", "Intensity / a. u."},
                    GridLines -> Automatic, GridLinesStyle -> 
                   Directive[LightGray, Dashed], ImageSize -> {400, 320}, 
                   PlotLegends -> Placed[$CellContext`aveLegend$$, Above]]], 
                 "Memorize Something"]], $CellContext`noave$$ == 2, 
               If[$CellContext`y2$$ == 1, 
                If[Length[$CellContext`MemAveNormSh$$] >= 2, 
                 ListLinePlot[
                  Drop[$CellContext`MemAveNormSh$$, -1], PlotRange -> All, 
                  Frame -> True, 
                  FrameLabel -> {"Time / \[Mu]s", "Intensity / a. u."}, 
                  GridLines -> Automatic, GridLinesStyle -> 
                  Directive[LightGray, Dashed], ImageSize -> {400, 250}, 
                  PlotLegends -> Placed[$CellContext`aveLegend$$, Above]], 
                 "Memorize Something"], 
                If[Length[$CellContext`MemAveNormSh$$] >= 2, 
                 $CellContext`PlotExplorer[
                  ListLinePlot[
                   Drop[$CellContext`MemAveNormSh$$, -1], PlotRange -> All, 
                   Frame -> True, 
                   FrameLabel -> {"Time / \[Mu]s", "Intensity / a. u."}, 
                   GridLines -> Automatic, GridLinesStyle -> 
                   Directive[LightGray, Dashed], ImageSize -> {400, 320}, 
                   PlotLegends -> Placed[$CellContext`aveLegend$$, Above]]], 
                 "Memorize Something"]]]], StandardForm],
            ImageSizeCache->{96., {2., 7.}}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"], "\<\"         \"\>", 
       TagBox[GridBox[{
          {
           ButtonBox[
            StyleBox["\<\"2D Plot\"\>",
             StripOnInput->False,
             FontWeight->Bold],
            Appearance->Automatic,
            
            ButtonFunction:>{$CellContext`Clicker2DFit$$ = 
               1; $CellContext`GraphDensityPlotManipFit$$ = Dynamic[
                 
                 ListDensityPlot[$CellContext`dataResample, 
                  MaxPlotPoints -> {$CellContext`plot2dSliceRes, \
$CellContext`plot2dSliceRes}, PlotRange -> All, ColorFunction -> "Rainbow", 
                  PlotLegends -> Placed[
                    
                    BarLegend[{"Rainbow", {-1, 1}}, LegendMarkerSize -> 250, 
                    LegendMargins -> {{0, 0}, {32, 0}}], Right], 
                  DataRange -> {{$CellContext`TimeResolution, \
$CellContext`RecordLength $CellContext`TimeResolution}, \
{$CellContext`StartField/
                    1000, ($CellContext`StartField + \
$CellContext`RecordLengthField)/1000}}, 
                  FrameLabel -> {$CellContext`label, "Magnetic Field / kG"}, 
                  AspectRatio -> 1/1, ImageSize -> {350, 350}, LabelStyle -> 
                  Directive[12, Bold], 
                  Mesh -> {{$CellContext`TimeIn, $CellContext`TimeOut}, \
{$CellContext`SF/1000, $CellContext`EF/1000}}, MeshStyle -> {
                    Directive[Red, Dashed], 
                    Directive[
                    Red, Dashed]}]]; \
$CellContext`GraphDensityPlotManipCorrFit$$ = Dynamic[
                 
                 ListDensityPlot[$CellContext`dataResampleCorr, 
                  MaxPlotPoints -> {$CellContext`plot2dSliceRes, \
$CellContext`plot2dSliceRes}, PlotRange -> All, ColorFunction -> "Rainbow", 
                  PlotLegends -> Placed[
                    
                    BarLegend[{"Rainbow", {-1, 1}}, LegendMarkerSize -> 250, 
                    LegendMargins -> {{0, 0}, {32, 0}}], Right], 
                  DataRange -> {{$CellContext`TimeResolution, \
$CellContext`RecordLength $CellContext`TimeResolution}, \
{$CellContext`StartField/
                    1000, ($CellContext`StartField + \
$CellContext`RecordLengthField)/1000}}, 
                  FrameLabel -> {$CellContext`label, "Magnetic Field / kG"}, 
                  AspectRatio -> 1/1, ImageSize -> {350, 350}, LabelStyle -> 
                  Directive[12, Bold], 
                  Mesh -> {{$CellContext`TimeIn, $CellContext`TimeOut}, \
{$CellContext`SF/1000, $CellContext`EF/1000}}, MeshStyle -> {
                    Directive[Red, Dashed], 
                    Directive[
                    Red, Dashed]}]]; \
$CellContext`GraphDensityPlotManipCorrFieldFit$$ = Dynamic[
                 
                 ListDensityPlot[$CellContext`dataResampleCorrField, 
                  MaxPlotPoints -> {$CellContext`plot2dSliceRes, \
$CellContext`plot2dSliceRes}, PlotRange -> All, ColorFunction -> "Rainbow", 
                  PlotLegends -> Placed[
                    
                    BarLegend[{"Rainbow", {-1, 1}}, LegendMarkerSize -> 250, 
                    LegendMargins -> {{0, 0}, {32, 0}}], Right], 
                  DataRange -> {{
                    0, $CellContext`RecordLength \
$CellContext`TimeResolution}, {$CellContext`StartField/
                    1000, ($CellContext`StartField + \
$CellContext`RecordLengthField)/1000}}, 
                  FrameLabel -> {$CellContext`label, "Magnetic Field / kG"}, 
                  AspectRatio -> 1/1, ImageSize -> {350, 350}, LabelStyle -> 
                  Directive[12, Bold], 
                  Mesh -> {{$CellContext`TimeIn, $CellContext`TimeOut}, \
{$CellContext`SF/1000, $CellContext`EF/1000}}, MeshStyle -> {
                    Directive[Red, Dashed], 
                    Directive[Red, Dashed]}]]; Null},
            Evaluator->Automatic,
            FrameMargins->10,
            Method->"Queued"]},
          {""},
          {""},
          {
           DynamicBox[ToBoxes[
             Which[$CellContext`s == 1, 
              Grid[{{
                 If[
                  And[$CellContext`\:0421licker2 == 1], 
                  
                  If[$CellContext`Clicker2DFit$$ == 
                   1, $CellContext`GraphDensityPlotManipFit$$, 
                   "Press 2D Plot"], "Press Convert Data"], 
                 SpanFromLeft}}], $CellContext`s == 2, 
              Grid[{{
                 If[
                  And[$CellContext`\:0421licker2 == 1], 
                  
                  If[$CellContext`Clicker2DFit$$ == 
                   1, $CellContext`GraphDensityPlotManipCorrFit$$, 
                   "Press 2D Plot"], "Press Convert Data"], 
                 SpanFromLeft}}], $CellContext`s == 3, 
              Grid[{{
                 If[
                  And[$CellContext`\:0421licker2 == 1], 
                  
                  If[$CellContext`Clicker2DFit$$ == 
                   1, $CellContext`GraphDensityPlotManipCorrFieldFit$$, 
                   "Press 2D Plot"], "Press Convert Data"], SpanFromLeft}}]], 
             StandardForm],
            ImageSizeCache->{519., {2.5, 7.5}}]},
          {""},
          {""},
          {
           ButtonBox[
            StyleBox["\<\"Clear 2D\"\>",
             StripOnInput->False,
             FontWeight->Bold],
            Appearance->Automatic,
            ButtonFunction:>{$CellContext`Clicker2DFit$$ = 0; Null},
            Evaluator->Automatic,
            FrameMargins->10,
            Method->"Queued"]},
          {""}
         },
         AutoDelete->False,
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"]}
     },
     AutoDelete->False,
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
    "Grid"],
   Background->RGBColor[0.985, 0.985, 0.985],
   FrameMargins->{{20, 20}, {5, 5}}],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{
  3.767913304513475*^9, {3.767913634989146*^9, 3.767913678321966*^9}, 
   3.767913790200367*^9, 3.767914160018261*^9, 3.7679965598231497`*^9, 
   3.768100938505782*^9, 3.7681025490764236`*^9, 3.7685169404123917`*^9, {
   3.7685174484399567`*^9, 3.768517497683538*^9}, {3.7685176446375093`*^9, 
   3.768517667397509*^9}, 3.7685178790950527`*^9, {3.768517974929082*^9, 
   3.768518002946414*^9}, {3.768518058533543*^9, 3.768518062466476*^9}, {
   3.768518106093482*^9, 3.768518183462833*^9}, {3.76851824814717*^9, 
   3.768518291651054*^9}, 3.7685187214761543`*^9, 3.768568575432076*^9, 
   3.768569613116592*^9, 3.768569661790127*^9, 3.768569994427855*^9, {
   3.768570040623507*^9, 3.768553860835088*^9}, 3.768600483688801*^9, 
   3.7686021259920692`*^9, 3.768706509764715*^9, 3.768711152327756*^9, 
   3.768714551869944*^9, {3.768715291934923*^9, 3.7687153144868*^9}, 
   3.769811651938651*^9, {3.769818353754225*^9, 3.7698183843762608`*^9}, 
   3.769818945417108*^9, 3.769818994416801*^9, 3.7698244783505707`*^9, {
   3.769824518684616*^9, 3.769824525617268*^9}, 3.769824652156918*^9, 
   3.769825327020842*^9, 3.769825380037574*^9, 3.769825442202013*^9, {
   3.7698254969073687`*^9, 3.7698255816667*^9}, {3.769825622899282*^9, 
   3.769825654006928*^9}, 3.769825688631083*^9, 3.7698257937114573`*^9, 
   3.769825858795588*^9, 3.769825928723133*^9, {3.769825980494499*^9, 
   3.76982598286591*^9}, {3.769826037541342*^9, 3.769826078259901*^9}, {
   3.769826126125163*^9, 3.769826151676057*^9}, 3.7698261907449503`*^9, 
   3.769826300834957*^9, {3.76982653453049*^9, 3.769826539531643*^9}, 
   3.769855801413699*^9, 3.769855920738203*^9, {3.769855962320434*^9, 
   3.769855963936144*^9}, 3.769982194730749*^9, 3.7699825318031*^9, 
   3.7699827235429077`*^9, 3.769986343352569*^9, 3.769986523722539*^9, 
   3.769987639103629*^9, 3.7699877061365337`*^9, 3.769987971827847*^9, 
   3.769988098922316*^9, 3.7699973433648577`*^9, 3.769999059536812*^9, 
   3.7699997140896387`*^9, 3.770001949354002*^9, 3.770002426165041*^9, 
   3.770002953433331*^9, 3.770003169378742*^9, 3.770003893176042*^9, 
   3.7700039516384163`*^9, 3.7700042196897182`*^9, {3.7700115580687943`*^9, 
   3.7700115729246893`*^9}, 3.770013434891292*^9, {3.770015541170124*^9, 
   3.7700155460735283`*^9}, 3.770327843765954*^9, 3.770328167072074*^9, 
   3.7703361843290453`*^9, 3.770363389560883*^9, 3.7703635298006687`*^9, 
   3.770363680592216*^9, {3.770363752158948*^9, 3.770363781573595*^9}, 
   3.7703640282591467`*^9, 3.770364964881024*^9, 3.770365074916423*^9, 
   3.770365107294157*^9, 3.770365189679825*^9, 3.770365262897438*^9, {
   3.7703654038182793`*^9, 3.77036542482491*^9}, 3.7703654729921837`*^9, 
   3.770366363512422*^9, 3.771047399975356*^9, 3.771730092908491*^9, 
   3.7717361353936253`*^9, 3.77173627676478*^9, 3.7717371865654907`*^9, 
   3.771737512739203*^9, 3.771737572174655*^9, 3.7717376825899267`*^9, 
   3.7717380044534187`*^9, 3.771739556911468*^9, 3.771796432740457*^9, 
   3.771884768338017*^9, 3.77188750398458*^9, 3.7719752359681377`*^9, 
   3.7719772601704063`*^9, {3.7721426115411167`*^9, 3.772142624858973*^9}, {
   3.772142771421637*^9, 3.7721427965176086`*^9}, 3.772142925624345*^9, {
   3.772142971761252*^9, 3.77214298625097*^9}, 3.772145148067256*^9, 
   3.772145218335434*^9, 3.77214532970089*^9, {3.7721456017834806`*^9, 
   3.772145617890029*^9}, 3.77217818133046*^9, 3.772178366562685*^9, 
   3.772178435973859*^9, 3.772178474651601*^9, 3.772178662286276*^9, {
   3.7721804235001497`*^9, 3.772180448091054*^9}, {3.772180541264776*^9, 
   3.7721805468309517`*^9}, 3.7722304693601227`*^9, 3.772234403822329*^9, 
   3.7731072357282343`*^9, 3.773107287147421*^9, 3.7731075153279343`*^9, 
   3.773110106506222*^9, 3.773111817268425*^9, {3.773111893793685*^9, 
   3.773112003374278*^9}, {3.77311203561699*^9, 3.773112065601246*^9}, {
   3.7731121027557077`*^9, 3.7731121119540577`*^9}, {3.773112142448701*^9, 
   3.7731121837869787`*^9}, 3.773112269980917*^9, {3.773112320901525*^9, 
   3.77311234308353*^9}, 3.773112486087099*^9, 3.773112560235943*^9, 
   3.773112616479507*^9, 3.7731154544761343`*^9, 3.7731168933001833`*^9, 
   3.773117893332802*^9, 3.773118151386804*^9, 3.773122943260663*^9, 
   3.773123430428248*^9, 3.773123779599936*^9, {3.7731238474139633`*^9, 
   3.7731238828660707`*^9}, {3.773123948299884*^9, 3.773123951402132*^9}, 
   3.773124015129798*^9, 3.773124152439481*^9, 3.774669220443736*^9, 
   3.774670312438182*^9, 3.77467099218602*^9, 3.774674694204835*^9, 
   3.7746751842611437`*^9, 3.774676060616995*^9, 3.7746777194409933`*^9, 
   3.77473629770224*^9, 3.774738656539809*^9, {3.7747387204008083`*^9, 
   3.774738744546337*^9}, 3.774738842901436*^9, 3.7747391557550497`*^9, {
   3.7747392515208263`*^9, 3.774739274509954*^9}, {3.774739307798955*^9, 
   3.7747393532766943`*^9}, {3.774739739888254*^9, 3.774739768545916*^9}, {
   3.774739876385335*^9, 3.774739879994547*^9}, 3.7747399283777323`*^9, {
   3.7747399631788397`*^9, 3.7747399886707573`*^9}, {3.774740081324212*^9, 
   3.774740102083335*^9}, 3.774740141327312*^9, 3.7747402035986233`*^9, {
   3.774740294898263*^9, 3.774740378999846*^9}, {3.774740413857924*^9, 
   3.774740437802684*^9}, {3.774740504287018*^9, 3.774740526840847*^9}, 
   3.774740560419714*^9, 3.7747406223305197`*^9, 3.7747407781608753`*^9, 
   3.774740843640935*^9, 3.774740880825158*^9, 3.7747409533433113`*^9, 
   3.774740984241652*^9, 3.774741153211648*^9, {3.774741605963352*^9, 
   3.774741636820921*^9}, {3.774741726716886*^9, 3.774741750763832*^9}, 
   3.774741795194826*^9, {3.774741883175248*^9, 3.774741904981332*^9}, 
   3.774741945814466*^9, {3.774741995700718*^9, 3.774742012072689*^9}, {
   3.7747421080718813`*^9, 3.774742117581662*^9}, 3.7747422273072443`*^9, {
   3.774742293970271*^9, 3.77474230463196*^9}, 3.774742340573799*^9, 
   3.774742523986986*^9, 3.774742688838852*^9, {3.7747428279081087`*^9, 
   3.774742846142323*^9}, 3.774742907891199*^9, {3.7747429817115307`*^9, 
   3.7747430776068*^9}, 3.7747432257032433`*^9, 3.7747433289351397`*^9, 
   3.7747434883405447`*^9, {3.774743548965362*^9, 3.7747436065712357`*^9}, 
   3.7747479622282677`*^9, 3.774748041293256*^9, 3.7747483182017727`*^9, {
   3.7747484024115553`*^9, 3.774748408040769*^9}, 3.774748778526287*^9, 
   3.774748877616275*^9, 3.7747493020320883`*^9, 3.7747496417760572`*^9, {
   3.774749686400453*^9, 3.774749698203422*^9}, 3.774749879597208*^9, 
   3.774750144787661*^9, 3.774750378059993*^9, 3.7747504958984203`*^9, 
   3.7747506392021923`*^9, {3.774750726458083*^9, 3.774750749716632*^9}, 
   3.774751868189958*^9, 3.7747519681398687`*^9, 3.77475203445536*^9, 
   3.774752189256647*^9, 3.774752243465567*^9, 3.7747523377700853`*^9, 
   3.774752602793559*^9, 3.774752643504629*^9, 3.774752816210907*^9, 
   3.77475288699653*^9, 3.774752960792305*^9, 3.7747549173838453`*^9, {
   3.774755055122836*^9, 3.7747550650187387`*^9}, {3.7747555466541243`*^9, 
   3.7747555615347*^9}, 3.774760643118702*^9, {3.77476153428503*^9, 
   3.774761547313445*^9}, 3.77476161714966*^9, {3.7747616586007843`*^9, 
   3.774761741544777*^9}, {3.7747618286826677`*^9, 3.774761928119453*^9}, 
   3.774822537772293*^9, 3.7748231220954514`*^9, 3.774837524418325*^9, 
   3.774838330892398*^9, 3.774838681898109*^9, 3.7748388084317703`*^9, 
   3.7748388848179207`*^9, 3.774907920935339*^9, 3.7749215282027893`*^9, {
   3.774922684950429*^9, 3.774922696631036*^9}, 3.774922905972659*^9, 
   3.7751699417430983`*^9, 3.775170292072851*^9, 3.77517144394552*^9, 
   3.775343919795987*^9, 3.775344671343562*^9, 3.7753458065575237`*^9, 
   3.775350711228791*^9, 3.775878416779749*^9, 3.775879831303618*^9, 
   3.7758805808391333`*^9, 3.782423766174041*^9, 3.7824242135860443`*^9, 
   3.782698140396398*^9, 3.7826991708059053`*^9, 3.782714058289565*^9, 
   3.782714812916874*^9, 3.78271493939817*^9, 3.782715569747134*^9, {
   3.784529482663064*^9, 3.784529500821431*^9}},
 CellLabel->"Out[70]=",ExpressionUUID->"7b0d704f-b4ca-4823-ab19-a16660907c58"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"gr", "=", 
  RowBox[{"ListDensityPlot", "[", 
   RowBox[{"dataKineticsCorrField", ",", 
    RowBox[{"MaxPlotPoints", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"100", ",", "150"}], "}"}]}], ",", " ", 
    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
    RowBox[{"ColorFunction", "\[Rule]", "\"\<Rainbow\>\""}], ",", 
    RowBox[{"PlotLegends", "\[Rule]", 
     RowBox[{"Placed", "[", 
      RowBox[{
       RowBox[{"BarLegend", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\"\<Rainbow\>\"", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}], ",", 
         RowBox[{"LegendMarkerSize", "\[Rule]", "350"}], ",", 
         RowBox[{"LegendMargins", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "0"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"32", ",", "0"}], "}"}]}], "}"}]}]}], "]"}], ",", 
       "Right"}], "]"}]}], ",", 
    RowBox[{"DataRange", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", 
         RowBox[{"RecordLength", "*", 
          RowBox[{"TimeResolution", "/", "100"}]}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"StartField", "/", "1000"}], ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"StartField", "+", "RecordLengthField"}], ")"}], "/", 
          "1000"}]}], "}"}]}], "}"}]}], ",", 
    RowBox[{"FrameLabel", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<Time / ms\>\"", ",", "\"\<Magnetic Field / kG\>\""}], 
      "}"}]}], ",", 
    RowBox[{"AspectRatio", "\[Rule]", 
     RowBox[{"1", "/", "1"}]}], ",", 
    RowBox[{"ImageSize", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"450", ",", "450"}], "}"}]}], ",", 
    RowBox[{"LabelStyle", "\[Rule]", 
     RowBox[{"Directive", "[", 
      RowBox[{"16", ",", " ", "Bold"}], "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7674869952935247`*^9, 3.7674869960276747`*^9}, 
   3.767487200986806*^9, {3.767487739425893*^9, 3.7674877544288054`*^9}, {
   3.767487802696045*^9, 3.767487803052717*^9}, {3.7674901929607487`*^9, 
   3.7674901957363663`*^9}, {3.767490246532879*^9, 3.767490266006913*^9}, {
   3.767490324875279*^9, 3.767490326528364*^9}, {3.767490358995675*^9, 
   3.767490359136476*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"19b021b3-b995-4a8d-8301-b6417b72ce92"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[
    GraphicsComplexBox[CompressedData["
1:eJxc3X8QtN1d1/dAClgazJhSIVO1SPlRaJtC2TIxgMKwOkEnITIiQ5OiGzcb
NiubjexGdmF3KWJCDE2RFGEoJEXaKUqZIMUy/CgGlWZCUxyngIi1EeogilQK
TVGHpt37znl9znye/SfznuvJdZ3zPVeu1+TXc//uV772C171wc961rO+5UXP
etaTf+zfv/LZ//tPfsO3/MCnfdxndy/SL/n0v7t+60t+7zOuL9N/4YP/6u2/
+ezPS7/06V//0vSzn1z+nj+cfu/Tf/4fSf/wL/3FN7/gh/5o+puf3u+L01/+
O971ut/xrpenP//p/b8k/W981/v+3Q95zR9/xvNW6f/rxz7s3/qqX33lM56/
Tv8vf+/5z/v117/qGevZpP/Sk9v/v69+xvq26T/73N/7z//Bn3nNM9a7S68+
6WW//EUf/mXPWP8+/Vmf+8rHSF/7jP0c0l//gh/6pb/4r73uGfubffmMxw1e
+qeesd/ZX/ri9/y953/jlz9j/8f0H/3Cx++nZ39gHqf08snyPvr1z5jP7P/w
ta9+8Xte/qefMa/ZH/NVv/pjH/b2r3jG/M7p3/qm82d87i/M/sA8L+nf/KbH
P+Hjv/IZ8539T54s50u/6hnzvqZ/9h0f+V3v++7ZH5j/Lf0//ci3/+5P/Wez
P3Ae9/TPPf7qT3/+V6c/cD6znzztp35o9pufntd/Ou//WO3rXjH7g56e3+zP
fOz2ue+f/aefnufXpL/vyV/+9tm/8vR8Z/87j2n/wc/5M+k/8fS8Z7/tyYJ+
YfbffXr+X5v+yMdpv+FrZ3/+0/dh9p978nX4hD+b/vGn78fsZz1W82Pvmv0Z
T9+XN6Rf/1j+H9vO/itP35/Z//TJ6/Lhb0x/4tP3afYrv+/dn/Bf/nezv/3p
+zX7Z1/4lv/jhS/9uvS//vR9m/3Sv/YF/9XP/LPZb3r6/r0p/Td//0f9J8c/
P/v/+7on7+PsFz3G+bxP+3Pp09P3c/b3Pm7/jp+a/ctP39c3pz/hyev2+tmr
p+/v7G/7Y48X9qO+Pv13nr7Ps5/3i7/ynDf94OyXPH2//7P01/3Jx4BePvtv
PH3fZ7//117/hr/5m7N/z9P3/y3p42O7r3zb7Hc8/dfD7Kf/8Nn/effj99/+
iRf8trd95PSje5HmR19fpvmh+aH5ofmh+aH5ofmh+aH50c9bpfnRz1+n+dHr
2aT50evbpvnR692l+dHr36f50fs5pPnR+5vNj97vbH70/o9pfvQ8Tml+9Hxm
86PnNZsfPb9zmh89z0uaHz3f2fzoeV/T/Oj539L86PO4p/nR5zObH5ofuf/w
Q/ND80PzQ/ND80PzQ/ND80PzQ/Mj8xl+aH5ofmh+aH5ofmh+aH5ofmh+aH7k
fIcfmh/5Hg0/ND80PzQ/ND80PzQ/ND80P/J+Dj80PzQ/ND/yPR5+aH5ofmh+
aH5ofmh+5HyHH9WP30vf9YqP/cxPmn50L9L86OvLND80PzQ/ND80PzQ/ND80
PzQ/+nmrND/6+es0P3o9mzQ/en3bND96vbs0P3r9+zQ/ej+HND96f7P50fud
zY/e/zHNj57HKc2Pns9sfvS8ZvOj53dO86PneUnzo+c7mx8972uaHz3/W5of
fR73ND/6fGbzQ/Mj9x9+aH5ofmh+aH5ofmh+aH5ofmh+aH5kPsMPzQ/ND80P
zQ/ND80PzQ/ND80PzY+c7/BD8yPfo+GH5ofmh+aH5ofmh+aH5ofmR97P4Yfm
h+aH5ke+x8MPzQ/ND80PzQ/ND82PnO/wo/rxe98nv/nTfu6zph/dizQ/+voy
zQ/ND80PzQ/ND80PzQ/ND82Pft4qzY9+/jrNj17PJs2PXt82zY9e7y7Nj17/
Ps2P3s8hzY/e32x+9H5n86P3f0zzo+dxSvOj5zObHz2v2fzo+Z3T/Oh5XtL8
6PnO5kfP+5rmR8//luZHn8c9zY8+n9n80PzI/Ycfmh+aH5ofmh+aH5ofmh+a
H5ofmh+Zz/BD80PzQ/ND80PzQ/ND80PzQ/ND8yPnO/zQ/Mj3aPih+aH5ofmh
+aH5ofmh+aH5kfdz+KH5ofmh+ZHv8fBD80PzQ/ND80PzQ/Mj5zv8qH78vu0t
P7j8ii+YfnQv0vzo68s0PzQ/ND80PzQ/ND80PzQ/ND/6eas0P/r56zQ/ej2b
ND96fds0P3q9uzQ/ev37ND96P4c0P3p/s/nR+53Nj97/Mc2PnscpzY+ez2x+
9Lxm86Pnd07zo+d5SfOj5zubHz3va5ofPf9bmh99Hvc0P/p8ZvND8yP3H35o
fmh+aH5ofmh+aH5ofmh+aH5ofmQ+ww/ND80PzQ/ND80PzQ/ND80PzQ/Nj5zv
8EPzI9+j4Yfmh+aH5ofmh+aH5ofmh+ZH3s/hh+aH5ofmR77Hww/ND80PzQ/N
D80PzY+c7/Cj+vH73F/7R1/42189/ehepPnR15dpfmh+aH5ofmh+aH5ofmh+
aH7081ZpfvTz12l+9Ho2aX70+rZpfvR6d2l+9Pr3aX70fg5pfvT+ZvOj9zub
H73/Y5ofPY9Tmh89n9n86HnN5kfP75zmR8/zkuZHz3c2P3re1zQ/ev63ND/6
PO5pfvT5zOaH5kfuP/zQ/ND80PzQ/ND80PzQ/ND80PzQ/Mh8hh+aH5ofmh+a
H5ofmh+aH5ofmh+aHznf4YfmR75Hww/ND80PzQ/ND80PzQ/ND82PvJ/DD80P
zQ/Nj3yPhx+aH5ofmh+aH5ofmh853+FH9eP3Tx71/V85/ehepPnR15dpfmh+
aH5ofmh+aH5ofmh+aH7081ZpfvTz12l+9Ho2aX70+rZpfvR6d2l+9Pr3aX70
fg5pfvT+ZvOj9zubH73/Y5ofPY9Tmh89n9n86HnN5kfP75zmR8/zkuZHz3c2
P3re1zQ/ev63ND/6PO5pfvT5zOaH5kfuP/zQ/ND80PzQ/ND80PzQ/ND80PzQ
/Mh8hh+aH5ofmh+aH5ofmh+aH5ofmh+aHznf4YfmR75Hww/ND80PzQ/ND80P
zQ/ND82PvJ/DD80PzQ/Nj3yPhx+aH5ofmh+aH5ofmh853+FH9eP355/825Fv
mH50L9L86OvLND80PzQ/ND80PzQ/ND80PzQ/+nmrND/6+es0P3o9mzQ/en3b
ND96vbs0P3r9+zQ/ej+HND96f7P50fudzY/e/zHNj57HKc2Pns9sfvS8ZvOj
53dO86PneUnzo+c7mx8972uaHz3/W5offR73ND/6fGbzQ/Mj9x9+aH5ofmh+
aH5ofmh+aH5ofmh+aH5kPsMPzQ/ND80PzQ/ND80PzQ/ND80PzY+c7/BD8yPf
o+GH5ofmh+aH5ofmh+aH5ofmR97P4Yfmh+aH5ke+x8MPzQ/ND80PzQ/ND82P
nO/wo/rxe+Hv/PI3/ep/Pf3oXqT50deXaX5ofmh+aH5ofmh+aH5ofmh+9PNW
aX7089dpfvR6Nml+9Pq2aX70endpfvT692l+9H4OaX70/mbzo/c7mx+9/2Oa
Hz2PU5ofPZ/Z/Oh5zeZHz++c5kfP85LmR893Nj963tc0P3r+tzQ/+jzuaX70
+czmh+ZH7j/80PzQ/ND80PzQ/ND80PzQ/ND80PzIfIYfmh+aH5ofmh+aH5of
mh+aH5ofmh853+GH5ke+R8MPzQ/ND80PzQ/ND80PzQ/Nj7yfww/ND80PzY98
j4cfmh+aH5ofmh+aH5ofOd/hR/Xj996v/o5vfcsPTj+6F2l+9PVlmh+aH5of
mh+aH5ofmh+aH5of/bxVmh/9/HWaH72eTZofvb5tmh+93l2aH73+fZofvZ9D
mh+9v9n86P3O5kfv/5jmR8/jlOZHz2c2P3pes/nR8zun+dHzvKT50fOdzY+e
9zXNj57/Lc2PPo97mh99PrP5ofmR+w8/ND80PzQ/ND80PzQ/ND80PzQ/ND8y
n+GH5ofmh+aH5ofmh+aH5ofmh+aH5kfOd/ih+ZHv0fBD80PzQ/ND80PzQ/ND
80PzI+/n8EPzQ/ND8yPf4+GH5ofmh+aH5ofmh+ZHznf4Uf34veEf/q3v/vd+
cvrRvUjzo68v0/zQ/ND80PzQ/ND80PzQ/ND86Oet0vzo56/T/Oj1bNL86PVt
0/zo9e7S/Oj179P86P0c0vzo/c3mR+93Nj96/8c0P3oepzQ/ej6z+dHzms2P
nt85zY+e5yXNj57vbH70vK9pfvT8b2l+9Hnc0/zo85nND82P3H/4ofmh+aH5
ofmh+aH5ofmh+aH5ofmR+Qw/ND80PzQ/ND80PzQ/ND80PzQ/ND9yvsMPzY98
j4Yfmh+aH5ofmh+aH5ofmh+aH3k/hx+aH5ofmh/5Hg8/ND80PzQ/ND80PzQ/
cr7Dj+rH799/8ft/5Cd+YfrRvUjzo68v0/zQ/ND80PzQ/ND80PzQ/ND86Oet
0vzo56/T/Oj1bNL86PVt0/zo9e7S/Oj179P86P0c0vzo/c3mR+93Nj96/8c0
P3oepzQ/ej6z+dHzms2Pnt85zY+e5yXNj57vbH70vK9pfvT8b2l+9Hnc0/zo
85nND82P3H/4ofmh+aH5ofmh+aH5ofmh+aH5ofmR+Qw/ND80PzQ/ND80PzQ/
ND80PzQ/ND9yvsMPzY98j4Yfmh+aH5ofmh+aH5ofmh+aH3k/hx+aH5ofmh/5
Hg8/ND80PzQ/ND80PzQ/cr7Dj+rH76cemnzpb0w/uhdpfvT1ZZofmh+aH5of
mh+aH5ofmh+aH/28VZof/fx1mh+9nk2aH72+bZofvd5dmh+9/n2aH72fQ5of
vb/Z/Oj9zuZH7/+Y5kfP45TmR89nNj96XrP50fM7p/nR87yk+dHznc2Pnvc1
zY+e/y3Njz6Pe5offT6z+aH5kfsPPzQ/ND80PzQ/ND80PzQ/ND80PzQ/Mp/h
h+aH5ofmh+aH5ofmh+aH5ofmh+ZHznf4ofmR79HwQ/ND80PzQ/ND80PzQ/ND
8yPv5/BD80PzQ/Mj3+Phh+aH5ofmh+aH5ofmR853+FH9+H3lc1/+3g99zofE
j+5Fmh99fZnmh+aH5ofmh+aH5ofmh+aH5kc/b5XmRz9/neZHr2eT5kevb5vm
R693l+ZHr3+f5kfv55DmR+9vNj96v7P50fs/pvnR8zil+dHzmc2PntdsfvT8
zml+9DwvaX70fGfzo+d9TfOj539L86PP457mR5/PbH5ofuT+ww/ND80PzQ/N
D80PzQ/ND80PzQ/Nj8xn+KH5ofmh+aH5ofmh+aH5ofmh+aH5kfMdfmh+5Hs0
/ND80PzQ/ND80PzQ/ND80PzI+zn80PzQ/ND8yPd4+KH5ofmh+aH5ofmh+ZHz
HX5UP34f++S/Tv+Y6Uf3Is2Pvr5M80PzQ/ND80PzQ/ND80PzQ/Ojn7dK86Of
v07zo9ezSfOj17dN86PXu0vzo9e/T/Oj93NI86P3N5sfvd/Z/Oj9H9P86Hmc
0vzo+czmR89rNj96fuc0P3qelzQ/er6z+dHzvqb50fO/pfnR53FP86PPZzY/
ND9y/+GH5ofmh+aH5ofmh+aH5ofmh+aH5kfmM/zQ/ND80PzQ/ND80PzQ/ND8
0PzQ/Mj5Dj80P/I9Gn5ofmh+aH5ofmh+aH5ofmh+5P0cfmh+aH5ofuR7PPzQ
/ND80PzQ/ND80PzI+Q4/qh+/d//MD3zQ5/5H04/uRZoffX2Z5ofmh+aH5ofm
h+aH5ofmh+ZHP2+V5kc/f53mR69nk+ZHr2+b5kevd5fmR69/n+ZH7+eQ5kfv
bzY/er+z+dH7P6b50fM4pfnR85nNj57XbH70/M5pfvQ8L2l+9Hxn86PnfU3z
o+d/S/Ojz+Oe5kefz2x+aH7k/sMPzQ/ND80PzQ/ND80PzQ/ND80PzY/MZ/ih
+aH5ofmh+aH5ofmh+aH5ofmh+ZHzHX5ofuR7NPzQ/ND80PzQ/ND80PzQ/ND8
yPs5/ND80PzQ/Mj3ePih+aH5ofmh+aH5ofmR8x1+VD9+hxf94vN+/vOmH92L
ND/6+jLND80PzQ/ND80PzQ/ND80PzY9+3irNj37+Os2PXs8mzY9e3zbNj17v
Ls2PXv8+zY/ezyHNj97fbH70fmfzo/d/TPOj53FK86PnM5sfPa/Z/Oj5ndP8
6Hle0vzo+c7mR8/7muZHz/+W5kefxz3Njz6f2fzQ/Mj9hx+aH5ofmh+aH5of
mh+aH5ofmh+aH5nP8EPzQ/ND80PzQ/ND80PzQ/ND80PzI+c7/ND8yPdo+KH5
ofmh+aH5ofmh+aH5ofmR93P4ofmh+aH5ke/x8EPzQ/ND80PzQ/ND8yPnO/yo
fvw+6m0f+XH3L5l+dC/S/OjryzQ/ND80PzQ/ND80PzQ/ND80P/p5qzQ/+vnr
ND96PZs0P3p92zQ/er27ND96/fs0P3o/hzQ/en+z+dH7nc2P3v8xzY+exynN
j57PbH70vGbzo+d3TvOj53lJ86PnO5sfPe9rmh89/1uaH30e9zQ/+nxm80Pz
I/cffmh+aH5ofmh+aH5ofmh+aH5ofmh+ZD7DD80PzQ/ND80PzQ/ND80PzQ/N
D82PnO/wQ/Mj36Phh+aH5ofmh+aH5ofmh+aH5kfez+GH5ofmh+ZHvsfDD80P
zQ/ND80PzQ/Nj5zv8KP68fvRx78b+Z1fPv3oXqT50deXaX5ofmh+aH5ofmh+
aH5ofmh+9PNWaX7089dpfvR6Nml+9Pq2aX70endpfvT692l+9H4OaX70/mbz
o/c7mx+9/2OaHz2PU5ofPZ/Z/Oh5zeZHz++c5kfP85LmR893Nj963tc0P3r+
tzQ/+jzuaX70+czmh+ZH7j/80PzQ/ND80PzQ/ND80PzQ/ND80PzIfIYfmh+a
H5ofmh+aH5ofmh+aH5ofmh853+GH5ke+R8MPzQ/ND80PzQ/ND80PzQ/Nj7yf
ww/ND80PzY98j4cfmh+aH5ofmh+aH5ofOd/hR/Xj96pXve4P/PAbpx/dizQ/
+voyzQ/ND80PzQ/ND80PzQ/ND82Pft4qzY9+/jrNj17PJs2PXt82zY9e7y7N
j17/Ps2P3s8hzY/e32x+9H5n86P3f0zzo+dxSvOj5zObHz2v2fzo+Z3T/Oh5
XtL86PnO5kfP+5rmR8//luZHn8c9zY8+n9n80PzI/Ycfmh+aH5ofmh+aH5of
mh+aH5ofmh+Zz/BD80PzQ/ND80PzQ/ND80PzQ/ND8yPnO/zQ/Mj3aPih+aH5
ofmh+aH5ofmh+aH5kfdz+KH5ofmh+ZHv8fBD80PzQ/ND80PzQ/Mj5zv8qH78
nvPut3/RF3/b9KN7keZHX1+m+aH5ofmh+aH5ofmh+aH5ofnRz1ul+dHPX6f5
0evZpPnR69um+dHr3aX50evfp/nR+zmk+dH7m82P3u9sfvT+j2l+9DxOaX70
fGbzo+c1mx89v3OaHz3PS5ofPd/Z/Oh5X9P86Pnf0vzo87in+dHnM5sfmh+5
//BD80PzQ/ND80PzQ/ND80PzQ/ND8yPzGX5ofmh+aH5ofmh+aH5ofmh+aH5o
fuR8hx+aH/keDT80PzQ/ND80PzQ/ND80PzQ/8n4OPzQ/ND80P/I9Hn5ofmh+
aH5ofmh+aH7kfIcf1Y/ff//k/w7yvdOP7kWaH319meaH5ofmh+aH5ofmh+aH
5ofmRz9vleZHP3+d5kevZ5PmR69vm+ZHr3eX5kevf5/mR+/nkOZH7282P3q/
s/nR+z+m+dHzOKX50fOZzY+e12x+9PzOaX70PC9pfvR8Z/Oj531N86Pnf0vz
o8/jnuZHn89sfmh+5P7DD80PzQ/ND80PzQ/ND80PzQ/ND82PzGf4ofmh+aH5
ofmh+aH5ofmh+aH5ofmR8x1+aH7kezT80PzQ/ND80PzQ/ND80PzQ/Mj7OfzQ
/ND80PzI93j4ofmh+aH5ofmh+aH5kfMdflQ/fv/xN/zm+Zt+fPrRvUjzo68v
0/zQ/ND80PzQ/ND80PzQ/ND86Oet0vzo56/T/Oj1bNL86PVt0/zo9e7S/Oj1
79P86P0c0vzo/c3mR+93Nj96/8c0P3oepzQ/ej6z+dHzms2Pnt85zY+e5yXN
j57vbH70vK9pfvT8b2l+9Hnc0/zo85nND82P3H/4ofmh+aH5ofmh+aH5ofmh
+aH5ofmR+Qw/ND80PzQ/ND80PzQ/ND80PzQ/ND9yvsMPzY98j4Yfmh+aH5of
mh+aH5ofmh+aH3k/hx+aH5ofmh/5Hg8/ND80PzQ/ND80PzQ/cr7Dj+rH74P+
7yd/oO30o3uR5kdfX6b5ofmh+aH5ofmh+aH5ofmh+dHPW6X50c9fp/nR69mk
+dHr26b50evdpfnR69+n+dH7OaT50fubzY/e72x+9P6PaX70PE5pfvR8ZvOj
5zWbHz2/c5ofPc9Lmh8939n86Hlf0/zo+d/S/OjzuKf50eczmx+aH7n/8EPz
Q/ND80PzQ/ND80PzQ/ND80PzI/MZfmh+aH5ofmh+aH5ofmh+aH5ofmh+5HyH
H5of+R4NPzQ/ND80PzQ/ND80PzQ/ND/yfg4/ND80PzQ/8j0efmh+aH5ofmh+
aH5ofuR8hx/Vj993fdEXf9vf/j+nH92LND/6+jLND80PzQ/ND80PzQ/ND80P
zY9+3irNj37+Os2PXs8mzY9e3zbNj17vLs2PXv8+zY/ezyHNj97fbH70fmfz
o/d/TPOj53FK86PnM5sfPa/Z/Oj5ndP86Hle0vzo+c7mR8/7muZHz/+W5kef
xz3Njz6f2fzQ/Mj9hx+aH5ofmh+aH5ofmh+aH5ofmh+aH5nP8EPzQ/ND80Pz
Q/ND80PzQ/ND80PzI+c7/ND8yPdo+KH5ofmh+aH5ofmh+aH5ofmR93P4ofmh
+aH5ke/x8EPzQ/ND80PzQ/ND8yPnO/yofvw+/4ff+D2vffaHxo/uRZoffX2Z
5ofmh+aH5ofmh+aH5ofmh+ZHP2+V5kc/f53mR69nk+ZHr2+b5kevd5fmR69/
n+ZH7+eQ5kfvbzY/er+z+dH7P6b50fM4pfnR85nNj57XbH70/M5pfvQ8L2l+
9Hxn86PnfU3zo+d/S/Ojz+Oe5kefz2x+aH7k/sMPzQ/ND80PzQ/ND80PzQ/N
D80PzY/MZ/ih+aH5ofmh+aH5ofmh+aH5ofmh+ZHzHX5ofuR7NPzQ/ND80PzQ
/ND80PzQ/ND8yPs5/ND80PzQ/Mj3ePih+aH5ofmh+aH5ofmR8x1+VD9+/8/v
+h9+9CM+evrRvUjzo68v0/zQ/ND80PzQ/ND80PzQ/ND86Oet0vzo56/T/Oj1
bNL86PVt0/zo9e7S/Oj179P86P0c0vzo/c3mR+93Nj96/8c0P3oepzQ/ej6z
+dHzms2Pnt85zY+e5yXNj57vbH70vK9pfvT8b2l+9Hnc0/zo85nND82P3H/4
ofmh+aH5ofmh+aH5ofmh+aH5ofmR+Qw/ND80PzQ/ND80PzQ/ND80PzQ/ND9y
vsMPzY98j4Yfmh+aH5ofmh+aH5ofmh+aH3k/hx+aH5ofmh/5Hg8/ND80PzQ/
ND80PzQ/cr7Dj+rH79u/5skfCDL96F6k+dHXl2l+aH5ofmh+aH5ofmh+aH5o
fvTzVml+9PPXaX70ejZpfvT6tml+9Hp3aX70+vdpfvR+Dml+9P5m86P3O5sf
vf9jmh89j1OaHz2f2fzoec3mR8/vnOZHz/OS5kfPdzY/et7XND96/rc0P/o8
7ml+9PnM5ofmR+4//ND80PzQ/ND80PzQ/ND80PzQ/ND8yHyGH5ofmh+aH5of
mh+aH5ofmh+aH5ofOd/hh+ZHvkfDD80PzQ/ND80PzQ/ND80PzY+8n8MPzQ/N
D82PfI+HH5ofmh+aH5ofmh+aHznf4Uf147d88rcz+ZzpR/cizY++vkzzQ/ND
80PzQ/ND80PzQ/ND86Oft0rzo5+/TvOj17NJ86PXt03zo9e7S/Oj179P86P3
c0jzo/c3mx+939n86P0f0/zoeZzS/Oj5zOZHz2s2P3p+5zQ/ep6XND96vrP5
0fO+pvnR87+l+dHncU/zo89nNj80P3L/4Yfmh+aH5ofmh+aH5ofmh+aH5ofm
R+Yz/ND80PzQ/ND80PzQ/ND80PzQ/ND8yPkOPzQ/8j0afmh+aH5ofmh+aH5o
fmh+aH7k/Rx+aH5ofmh+5Hs8/ND80PzQ/ND80PzQ/Mj5Dj+qH79f/rzP+bV/
9IXTj+5Fmh99fZnmh+aH5ofmh+aH5ofmh+aH5kc/b5XmRz9/neZHr2eT5kev
b5vmR693l+ZHr3+f5kfv55DmR+9vNj96v7P50fs/pvnR8zil+dHzmc2Pntds
fvT8zml+9DwvaX70fGfzo+d9TfOj539L86PP457mR5/PbH5ofuT+ww/ND80P
zQ/ND80PzQ/ND80PzQ/Nj8xn+KH5ofmh+aH5ofmh+aH5ofmh+aH5kfMdfmh+
5Hs0/ND80PzQ/ND80PzQ/ND80PzI+zn80PzQ/ND8yPd4+KH5ofmh+aH5ofmh
+ZHzHX5UP37f+D2vffYbXjP96F6k+dHXl2l+aH5ofmh+aH5ofmh+aH5ofvTz
Vml+9PPXaX70ejZpfvT6tml+9Hp3aX70+vdpfvR+Dml+9P5m86P3O5sfvf9j
mh89j1OaHz2f2fzoec3mR8/vnOZHz/OS5kfPdzY/et7XND96/rc0P/o87ml+
9PnM5ofmR+4//ND80PzQ/ND80PzQ/ND80PzQ/ND8yHyGH5ofmh+aH5ofmh+a
H5ofmh+aH5ofOd/hh+ZHvkfDD80PzQ/ND80PzQ/ND80PzY+8n8MPzQ/ND82P
fI+HH5ofmh+aH5ofmh+aHznf4Uf14/d7ftuTv6Hi9KN7keZHX1+m+aH5ofmh
+aH5ofmh+aH5ofnRz1ul+dHPX6f50evZpPnR69um+dHr3aX50evfp/nR+zmk
+dH7m82P3u9sfvT+j2l+9DxOaX70fGbzo+c1mx89v3OaHz3PS5ofPd/Z/Oh5
X9P86Pnf0vzo87in+dHnM5sfmh+5//BD80PzQ/ND80PzQ/ND80PzQ/ND8yPz
GX5ofmh+aH5ofmh+aH5ofmh+aH5ofuR8hx+aH/keDT80PzQ/ND80PzQ/ND80
PzQ/8n4OPzQ/ND80P/I9Hn5ofmh+aH5ofmh+aH7kfIcf1Y/fPzi+5+P/+lun
H92LND/6+jLND80PzQ/ND80PzQ/ND80PzY9+3irNj37+Os2PXs8mzY9e3zbN
j17vLs2PXv8+zY/ezyHNj97fbH70fmfzo/d/TPOj53FK86PnM5sfPa/Z/Oj5
ndP86Hle0vzo+c7mR8/7muZHz/+W5kefxz3Njz6f2fzQ/Mj9hx+aH5ofmh+a
H5ofmh+aH5ofmh+aH5nP8EPzQ/ND80PzQ/ND80PzQ/ND80PzI+c7/ND8yPdo
+KH5ofmh+aH5ofmh+aH5ofmR93P4ofmh+aH5ke/x8EPzQ/ND80PzQ/ND8yPn
O/yofvze+LP/8tP/+HdNP7oXaX709WWaH5ofmh+aH5ofmh+aH5ofmh/9vFWa
H/38dZofvZ5Nmh+9vm2aH73eXZofvf59mh+9n0OaH72/2fzo/c7mR+//mOZH
z+OU5kfPZzY/el6z+dHzO6f50fO8pPnR853Nj573Nc2Pnv8tzY8+j3uaH30+
s/mh+ZH7Dz80PzQ/ND80PzQ/ND80PzQ/ND80PzKf4Yfmh+aH5ofmh+aH5ofm
h+aH5ofmR853+KH5ke/R8EPzQ/ND80PzQ/ND80PzQ/Mj7+fwQ/ND80PzI9/j
4Yfmh+aH5ofmh+aH5kfOd/hR/fi94DM/6cXv/5HpR/cizY++vkzzQ/ND80Pz
Q/ND80PzQ/ND86Oft0rzo5+/TvOj17NJ86PXt03zo9e7S/Oj179P86P3c0jz
o/c3mx+939n86P0f0/zoeZzS/Oj5zOZHz2s2P3p+5zQ/ep6XND96vrP50fO+
pvnR87+l+dHncU/zo89nNj80P3L/4Yfmh+aH5ofmh+aH5ofmh+aH5ofmR+Yz
/ND80PzQ/ND80PzQ/ND80PzQ/ND8yPkOPzQ/8j0afmh+aH5ofmh+aH5ofmh+
aH7k/Rx+aH5ofmh+5Hs8/ND80PzQ/ND80PzQ/Mj5Dj+qH7+ffvK34/3b04/u
RZoffX2Z5ofmh+aH5ofmh+aH5ofmh+ZHP2+V5kc/f53mR69nk+ZHr2+b5kev
d5fmR69/n+ZH7+eQ5kfvbzY/er+z+dH7P6b50fM4pfnR85nNj57XbH70/M5p
fvQ8L2l+9Hxn86PnfU3zo+d/S/Ojz+Oe5kefz2x+aH7k/sMPzQ/ND80PzQ/N
D80PzQ/ND80PzY/MZ/ih+aH5ofmh+aH5ofmh+aH5ofmh+ZHzHX5ofuR7NPzQ
/ND80PzQ/ND80PzQ/ND8yPs5/ND80PzQ/Mj3ePih+aH5ofmh+aH5ofmR8x1+
VD9+X/XsN7zmRb84/ehepPnR15dpfmh+aH5ofmh+aH5ofmh+aH7081ZpfvTz
12l+9Ho2aX70+rZpfvR6d2l+9Pr3aX70fg5pfvT+ZvOj9zubH73/Y5ofPY9T
mh89n9n86HnN5kfP75zmR8/zkuZHz3c2P3re1zQ/ev63ND/6PO5pfvT5zOaH
5kfuP/zQ/ND80PzQ/ND80PzQ/ND80PzQ/Mh8hh+aH5ofmh+aH5ofmh+aH5of
mh+aHznf4YfmR75Hww/ND80PzQ/ND80PzQ/ND82PvJ/DD80PzQ/Nj3yPhx+a
H5ofmh+aH5ofmh853+FH9eP3b7/6+7/yZ//l9KN7keZHX1+m+aH5ofmh+aH5
ofmh+aH5ofnRz1ul+dHPX6f50evZpPnR69um+dHr3aX50evfp/nR+zmk+dH7
m82P3u9sfvT+j2l+9DxOaX70fGbzo+c1mx89v3OaHz3PS5ofPd/Z/Oh5X9P8
6Pnf0vzo87in+dHnM5sfmh+5//BD80PzQ/ND80PzQ/ND80PzQ/ND8yPzGX5o
fmh+aH5ofmh+aH5ofmh+aH5ofuR8hx+aH/keDT80PzQ/ND80PzQ/ND80PzQ/
8n4OPzQ/ND80P/I9Hn5ofmh+aH5ofmh+aH7kfIcf1Y/fT/zEL3z965/7YfGj
e5HmR19fpvmh+aH5ofmh+aH5ofmh+aH50c9bpfnRz1+n+dHr2aT50evbpvnR
692l+dHr36f50fs5pPnR+5vNj97vbH70/o9pfvQ8Tml+9Hxm86PnNZsfPb9z
mh89z0uaHz3f2fzoeV/T/Oj539L86PO4p/nR5zObH5ofuf/wQ/ND80PzQ/ND
80PzQ/ND80PzQ/Mj8xl+aH5ofmh+aH5ofmh+aH5ofmh+aH7kfIcfmh/5Hg0/
ND80PzQ/ND80PzQ/ND80P/J+Dj80PzQ/ND/yPR5+aH5ofmh+aH5ofmh+5HyH
H9WP3+te8OR/0Dv96F6k+dHXl2l+aH5ofmh+aH5ofmh+aH5ofvTzVml+9PPX
aX70ejZpfvT6tml+9Hp3aX70+vdpfvR+Dml+9P5m86P3O5sfvf9jmh89j1Oa
Hz2f2fzoec3mR8/vnOZHz/OS5kfPdzY/et7XND96/rc0P/o87ml+9PnM5ofm
R+4//ND80PzQ/ND80PzQ/ND80PzQ/ND8yHyGH5ofmh+aH5ofmh+aH5ofmh+a
H5ofOd/hh+ZHvkfDD80PzQ/ND80PzQ/ND80PzY+8n8MPzQ/ND82PfI+HH5of
mh+aH5ofmh+aHznf4Uf14/fR3/j73vF9L5x+dC/S/OjryzQ/ND80PzQ/ND80
PzQ/ND80P/p5qzQ/+vnrND96PZs0P3p92zQ/er27ND96/fs0P3o/hzQ/en+z
+dH7nc2P3v8xzY+exynNj57PbH70vGbzo+d3TvOj53lJ86PnO5sfPe9rmh89
/1uaH30e9zQ/+nxm80PzI/cffmh+aH5ofmh+aH5ofmh+aH5ofmh+ZD7DD80P
zQ/ND80PzQ/ND80PzQ/ND82PnO/wQ/Mj36Phh+aH5ofmh+aH5ofmh+aH5kfe
z+GH5ofmh+ZHvsfDD80PzQ/ND80PzQ/Nj5zv8KP68ftr7/uyd77sJdOP7kWa
H319meaH5ofmh+aH5ofmh+aH5ofmRz9vleZHP3+d5kevZ5PmR69vm+ZHr3eX
5kevf5/mR+/nkOZH7282P3q/s/nR+z+m+dHzOKX50fOZzY+e12x+9PzOaX70
PC9pfvR8Z/Oj531N86Pnf0vzo8/jnuZHn89sfmh+5P7DD80PzQ/ND80PzQ/N
D80PzQ/ND82PzGf4ofmh+aH5ofmh+aH5ofmh+aH5ofmR8x1+aH7kezT80PzQ
/ND80PzQ/ND80PzQ/Mj7OfzQ/ND80PzI93j4ofmh+aH5ofmh+aH5kfMdflQ/
fpsnf5zUavrRvUjzo68v0/zQ/ND80PzQ/ND80PzQ/ND86Oet0vzo56/T/Oj1
bNL86PVt0/zo9e7S/Oj179P86P0c0vzo/c3mR+93Nj96/8c0P3oepzQ/ej6z
+dHzms2Pnt85zY+e5yXNj57vbH70vK9pfvT8b2l+9Hnc0/zo85nND82P3H/4
ofmh+aH5ofmh+aH5ofmh+aH5ofmR+Qw/ND80PzQ/ND80PzQ/ND80PzQ/ND9y
vsMPzY98j4Yfmh+aH5ofmh+aH5ofmh+aH3k/hx+aH5ofmh/5Hg8/ND80PzQ/
ND80PzQ/cr7Dj+rH7yP+xyf/hcj0o3uR5kdfX6b5ofmh+aH5ofmh+aH5ofmh
+dHPW6X50c9fp/nR69mk+dHr26b50evdpfnR69+n+dH7OaT50fubzY/e72x+
9P6PaX70PE5pfvR8ZvOj5zWbHz2/c5ofPc9Lmh8939n86Hlf0/zo+d/S/Ojz
uKf50eczmx+aH7n/8EPzQ/ND80PzQ/ND80PzQ/ND80PzI/MZfmh+aH5ofmh+
aH5ofmh+aH5ofmh+5HyHH5of+R4NPzQ/ND80PzQ/ND80PzQ/ND/yfg4/ND80
PzQ/8j0efmh+aH5ofmh+aH5ofuR8hx/Vj9/3f8y/+PVPfvP0o3uR5kdfX6b5
ofmh+aH5ofmh+aH5ofmh+dHPW6X50c9fp/nR69mk+dHr26b50evdpfnR69+n
+dH7OaT50fubzY/e72x+9P6PaX70PE5pfvR8ZvOj5zWbHz2/c5ofPc9Lmh89
39n86Hlf0/zo+d/S/OjzuKf50eczmx+aH7n/8EPzQ/ND80PzQ/ND80PzQ/ND
80PzI/MZfmh+aH5ofmh+aH5ofmh+aH5ofmh+5HyHH5of+R4NPzQ/ND80PzQ/
ND80PzQ/ND/yfg4/ND80PzQ/8j0efmh+aH5ofmh+aH5ofuR8hx/Vj9/Lv/YT
P+Tdb59+dC/S/OjryzQ/ND80PzQ/ND80PzQ/ND80P/p5qzQ/+vnrND96PZs0
P3p92zQ/er27ND96/fs0P3o/hzQ/en+z+dH7nc2P3v8xzY+exynNj57PbH70
vGbzo+d3TvOj53lJ86PnO5sfPe9rmh89/1uaH30e9zQ/+nxm80PzI/cffmh+
aH5ofmh+aH5ofmh+aH5ofmh+ZD7DD80PzQ/ND80PzQ/ND80PzQ/ND82PnO/w
Q/Mj36Phh+aH5ofmh+aH5ofmh+aH5kfez+GH5ofmh+ZHvsfDD80PzQ/ND80P
zQ/Nj5zv8KP68fvgX/rC3/7q759+dC/S/OjryzQ/ND80PzQ/ND80PzQ/ND80
P/p5qzQ/+vnrND96PZs0P3p92zQ/er27ND96/fs0P3o/hzQ/en+z+dH7nc2P
3v8xzY+exynNj57PbH70vGbzo+d3TvOj53lJ86PnO5sfPe9rmh89/1uaH30e
9zQ/+nxm80PzI/cffmh+aH5ofmh+aH5ofmh+aH5ofmh+ZD7DD80PzQ/ND80P
zQ/ND80PzQ/ND82PnO/wQ/Mj36Phh+aH5ofmh+aH5ofmh+aH5kfez+GH5ofm
h+ZHvsfDD80PzQ/ND80PzQ/Nj5zv8KP68ftLf+gJKNOP7kWaH319meaH5ofm
h+aH5ofmh+aH5ofmRz9vleZHP3+d5kevZ5PmR69vm+ZHr3eX5kevf5/mR+/n
kOZH7282P3q/s/nR+z+m+dHzOKX50fOZzY+e12x+9PzOaX70PC9pfvR8Z/Oj
531N86Pnf0vzo8/jnuZHn89sfmh+5P7DD80PzQ/ND80PzQ/ND80PzQ/ND82P
zGf4ofmh+aH5ofmh+aH5ofmh+aH5ofmR8x1+aH7kezT80PzQ/ND80PzQ/ND8
0PzQ/Mj7OfzQ/ND80PzI93j4ofmh+aH5ofmh+aH5kfMdflQ/fi97x/e98Dv/
/vSje5HmR19fpvmh+aH5ofmh+aH5ofmh+aH50c9bpfnRz1+n+dHr2aT50evb
pvnR692l+dHr36f50fs5pPnR+5vNj97vbH70/o9pfvQ8Tml+9Hxm86PnNZsf
Pb9zmh89z0uaHz3f2fzoeV/T/Oj539L86PO4p/nR5zObH5ofuf/wQ/ND80Pz
Q/ND80PzQ/ND80PzQ/Mj8xl+aH5ofmh+aH5ofmh+aH5ofmh+aH7kfIcfmh/5
Hg0/ND80PzQ/ND80PzQ/ND80P/J+Dj80PzQ/ND/yPR5+aH5ofmh+aH5ofmh+
5HyHH9WP3288+ePQf2360b1I86OvL9P80PzQ/ND80PzQ/ND80PzQ/OjnrdL8
6Oev0/zo9WzS/Oj1bdP86PXu0vzo9e/T/Oj9HNL86P3N5kfvdzY/ev/HND96
Hqc0P3o+s/nR85rNj57fOc2PnuclzY+e72x+9LyvaX70/G9pfvR53NP86POZ
zQ/Nj9x/+KH5ofmh+aH5ofmh+aH5ofmh+aH5kfkMPzQ/ND80PzQ/ND80PzQ/
ND80PzQ/cr7DD82PfI+GH5ofmh+aH5ofmh+aH5ofmh95P4cfmh+aH5of+R4P
PzQ/ND80PzQ/ND80P3K+w4/qx+9tr3/uy9/7ob8lfnQv0vzo68s0PzQ/ND80
PzQ/ND80PzQ/ND/6eas0P/r56zQ/ej2bND96fds0P3q9uzQ/ev37ND96P4c0
P3p/s/nR+53Nj97/Mc2PnscpzY+ez2x+9Lxm86Pnd07zo+d5SfOj5zubHz3v
a5ofPf9bmh99Hvc0P/p8ZvND8yP3H35ofmh+aH5ofmh+aH5ofmh+aH5ofmQ+
ww/ND80PzQ/ND80PzQ/ND80PzQ/Nj5zv8EPzI9+j4Yfmh+aH5ofmh+aH5ofm
h+ZH3s/hh+aH5ofmR77Hww/ND80PzQ/ND80PzY+c7/Cj+vH7/T/3WX/y+m9O
P7oXaX709WWaH5ofmh+aH5ofmh+aH5ofmh/9vFWaH/38dZofvZ5Nmh+9vm2a
H73eXZofvf59mh+9n0OaH72/2fzo/c7mR+//mOZHz+OU5kfPZzY/el6z+dHz
O6f50fO8pPnR853Nj573Nc2Pnv8tzY8+j3uaH30+s/mh+ZH7Dz80PzQ/ND80
PzQ/ND80PzQ/ND80PzKf4Yfmh+aH5ofmh+aH5ofmh+aH5ofmR853+KH5ke/R
8EPzQ/ND80PzQ/ND80PzQ/Mj7+fwQ/ND80PzI9/j4Yfmh+aH5ofmh+aH5kfO
d/hR/fj90yf5KdOP7kWaH319meaH5ofmh+aH5ofmh+aH5ofmRz9vleZHP3+d
5kevZ5PmR69vm+ZHr3eX5kevf5/mR+/nkOZH7282P3q/s/nR+z+m+dHzOKX5
0fOZzY+e12x+9PzOaX70PC9pfvR8Z/Oj531N86Pnf0vzo8/jnuZHn89sfmh+
5P7DD80PzQ/ND80PzQ/ND80PzQ/ND82PzGf4ofmh+aH5ofmh+aH5ofmh+aH5
ofmR8x1+aH7kezT80PzQ/ND80PzQ/ND80PzQ/Mj7OfzQ/ND80PzI93j4ofmh
+aH5ofmh+aH5kfMdflQ/fm/9jm99yw8upx/dizQ/+voyzQ/ND80PzQ/ND80P
zQ/ND82Pft4qzY9+/jrNj17PJs2PXt82zY9e7y7Nj17/Ps2P3s8hzY/e32x+
9H5n86P3f0zzo+dxSvOj5zObHz2v2fzo+Z3T/Oh5XtL86PnO5kfP+5rmR8//
luZHn8c9zY8+n9n80PzI/Ycfmh+aH5ofmh+aH5ofmh+aH5ofmh+Zz/BD80Pz
Q/ND80PzQ/ND80PzQ/ND8yPnO/zQ/Mj3aPih+aH5ofmh+aH5ofmh+aH5kfdz
+KH5ofmh+ZHv8fBD80PzQ/ND80PzQ/Mj5zv8qH78XvQh7377F33x9KN7keZH
X1+m+aH5ofmh+aH5ofmh+aH5ofnRz1ul+dHPX6f50evZpPnR69um+dHr3aX5
0evfp/nR+zmk+dH7m82P3u9sfvT+j2l+9DxOaX70fGbzo+c1mx89v3OaHz3P
S5ofPd/Z/Oh5X9P86Pnf0vzo87in+dHnM5sfmh+5//BD80PzQ/ND80PzQ/ND
80PzQ/ND8yPzGX5ofmh+aH5ofmh+aH5ofmh+aH5ofuR8hx+aH/keDT80PzQ/
ND80PzQ/ND80PzQ/8n4OPzQ/ND80P/I9Hn5ofmh+aH5ofmh+aH7kfIcf1Y/f
z3/pb3zv+75s+tG9SPOjry/T/ND80PzQ/ND80PzQ/ND80Pzo563S/Ojnr9P8
6PVs0vzo9W3T/Oj17tL86PXv0/zo/RzS/Oj9zeZH73c2P3r/xzQ/eh6nND96
PrP50fOazY+e3znNj57nJc2Pnu9sfvS8r2l+9PxvaX70edzT/Ojzmc0PzY/c
f/ih+aH5ofmh+aH5ofmh+aH5ofmh+ZH5DD80PzQ/ND80PzQ/ND80PzQ/ND80
P3K+ww/Nj3yPhh+aH5ofmh+aH5ofmh+aH5ofeT+HH5ofmh+aH/keDz80PzQ/
ND80PzQ/ND9yvsOP6sfv697z8X/9rV8z/ehepPnR15dpfmh+aH5ofmh+aH5o
fmh+aH7081ZpfvTz12l+9Ho2aX70+rZpfvR6d2l+9Pr3aX70fg5pfvT+ZvOj
9zubH73/Y5ofPY9Tmh89n9n86HnN5kfP75zmR8/zkuZHz3c2P3re1zQ/ev63
ND/6PO5pfvT5zOaH5kfuP/zQ/ND80PzQ/ND80PzQ/ND80PzQ/Mh8hh+aH5of
mh+aH5ofmh+aH5ofmh+aHznf4YfmR75Hww/ND80PzQ/ND80PzQ/ND82PvJ/D
D80PzQ/Nj3yPhx+aH5ofmh+aH5ofmh853+FH9eP3H3zKH/lfP/Wbpx/dizQ/
+voyzQ/ND80PzQ/ND80PzQ/ND82Pft4qzY9+/jrNj17PJs2PXt82zY9e7y7N
j17/Ps2P3s8hzY/e32x+9H5n86P3f0zzo+dxSvOj5zObHz2v2fzo+Z3T/Oh5
XtL86PnO5kfP+5rmR8//luZHn8c9zY8+n9n80PzI/Ycfmh+aH5ofmh+aH5of
mh+aH5ofmh+Zz/BD80PzQ/ND80PzQ/ND80PzQ/ND8yPnO/zQ/Mj3aPih+aH5
ofmh+aH5ofmh+aH5kfdz+KH5ofmh+ZHv8fBD80PzQ/ND80PzQ/Mj5zv8qH78
fuatX/MP/9Z3Tz+6F2l+9PVlmh+aH5ofmh+aH5ofmh+aH5of/bxVmh/9/HWa
H72eTZofvb5tmh+93l2aH73+fZofvZ9Dmh+9v9n86P3O5kfv/5jmR8/jlOZH
z2c2P3pes/nR8zun+dHzvKT50fOdzY+e9zXNj57/Lc2PPo97mh99PrP5ofmR
+w8/ND80PzQ/ND80PzQ/ND80PzQ/ND8yn+GH5ofmh+aH5ofmh+aH5ofmh+aH
5kfOd/ih+ZHv0fBD80PzQ/ND80PzQ/ND80PzI+/n8EPzQ/ND8yPf4+GH5ofm
h+aH5ofmh+ZHznf4Uf34XZ/8x1nvnH50L9L86OvLND80PzQ/ND80PzQ/ND80
PzQ/+nmrND/6+es0P3o9mzQ/en3bND96vbs0P3r9+zQ/ej+HND96f7P50fud
zY/e/zHNj57HKc2Pns9sfvS8ZvOj53dO86PneUnzo+c7mx8972uaHz3/W5of
fR73ND/6fGbzQ/Mj9x9+aH5ofmh+aH5ofmh+aH5ofmh+aH5kPsMPzQ/ND80P
zQ/ND80PzQ/ND80PzY+c7/BD8yPfo+GH5ofmh+aH5ofmh+aH5ofmR97P4Yfm
h+aH5ke+x8MPzQ/ND80PzQ/ND82PnO/wo/rx+7iXv/dDn/PT04/uRZoffX2Z
5ofmh+aH5ofmh+aH5ofmh+ZHP2+V5kc/f53mR69nk+ZHr2+b5kevd5fmR69/
n+ZH7+eQ5kfvbzY/er+z+dH7P6b50fM4pfnR85nNj57XbH70/M5pfvQ8L2l+
9Hxn86PnfU3zo+d/S/Ojz+Oe5kefz2x+aH7k/sMPzQ/ND80PzQ/ND80PzQ/N
D80PzY/MZ/ih+aH5ofmh+aH5ofmh+aH5ofmh+ZHzHX5ofuR7NPzQ/ND80PzQ
/ND80PzQ/ND8yPs5/ND80PzQ/Mj3ePih+aH5ofmh+aH5ofmR8x1+VD9+//OP
fsRH/+V/PP3oXqT50deXaX5ofmh+aH5ofmh+aH5ofmh+9PNWaX7089dpfvR6
Nml+9Pq2aX70endpfvT692l+9H4OaX70/mbzo/c7mx+9/2OaHz2PU5ofPZ/Z
/Oh5zeZHz++c5kfP85LmR893Nj963tc0P3r+tzQ/+jzuaX70+czmh+ZH7j/8
0PzQ/ND80PzQ/ND80PzQ/ND80PzIfIYfmh+aH5ofmh+aH5ofmh+aH5ofmh85
3+GH5ke+R8MPzQ/ND80PzQ/ND80PzQ/Nj7yfww/ND80PzY98j4cfmh+aH5of
mh+aH5ofOd/hR/Xj96c+9jM/6cXvn350L9L86OvLND80PzQ/ND80PzQ/ND80
PzQ/+nmrND/6+es0P3o9mzQ/en3bND96vbs0P3r9+zQ/ej+HND96f7P50fud
zY/e/zHNj57HKc2Pns9sfvS8ZvOj53dO86PneUnzo+c7mx8972uaHz3/W5of
fR73ND/6fGbzQ/Mj9x9+aH5ofmh+aH5ofmh+aH5ofmh+aH5kPsMPzQ/ND80P
zQ/ND80PzQ/ND80PzY+c7/BD8yPfo+GH5ofmh+aH5ofmh+aH5ofmR97P4Yfm
h+aH5ke+x8MPzQ/ND80PzQ/ND82PnO/wo/rxe/4bXvOiX3zevxo/uhdpfvT1
ZZofmh+aH5ofmh+aH5ofmh+aH/28VZof/fx1mh+9nk2aH72+bZofvd5dmh+9
/n2aH72fQ5ofvb/Z/Oj9zuZH7/+Y5kfP45TmR89nNj96XrP50fM7p/nR87yk
+dHznc2Pnvc1zY+e/y3Njz6Pe5offT6z+aH5kfsPPzQ/ND80PzQ/ND80PzQ/
ND80PzQ/Mp/hh+aH5ofmh+aH5ofmh+aH5ofmh+ZHznf4ofmR79HwQ/ND80Pz
Q/ND80PzQ/ND8yPv5/BD80PzQ/Mj3+Phh+aH5ofmh+aH5ofmR853+FH9+L3z
H3/LH/raT5x+dC/S/OjryzQ/ND80PzQ/ND80PzQ/ND80P/p5qzQ/+vnrND96
PZs0P3p92zQ/er27ND96/fs0P3o/hzQ/en+z+dH7nc2P3v8xzY+exynNj57P
bH70vGbzo+d3TvOj53lJ86PnO5sfPe9rmh89/1uaH30e9zQ/+nxm80PzI/cf
fmh+aH5ofmh+aH5ofmh+aH5ofmh+ZD7DD80PzQ/ND80PzQ/ND80PzQ/ND82P
nO/wQ/Mj36Phh+aH5ofmh+aH5ofmh+aH5kfez+GH5ofmh+ZHvsfDD80PzQ/N
D80PzQ/Nj5zv8KP68Xv1S971io/9zOlH9yLNj76+TPND80PzQ/ND80PzQ/ND
80Pzo5+3SvOjn79O86PXs0nzo9e3TfOj17tL86PXv0/zo/dzSPOj9zebH73f
2fzo/R/T/Oh5nNL86PnM5kfPazY/en7nND96npc0P3q+s/nR876m+dHzv6X5
0edxT/Ojz2c2PzQ/cv/hh+aH5ofmh+aH5ofmh+aH5ofmh+ZH5jP80PzQ/ND8
0PzQ/ND80PzQ/ND80PzI+Q4/ND/yPRp+aH5ofmh+aH5ofmh+aH5ofuT9HH5o
fmh+aH7kezz80PzQ/ND80PzQ/ND8yPkOP6ofv9/6V973Ze982fSje5HmR19f
pvmh+aH5ofmh+aH5ofmh+aH50c9bpfnRz1+n+dHr2aT50evbpvnR692l+dHr
36f50fs5pPnR+5vNj97vbH70/o9pfvQ8Tml+9Hxm86PnNZsfPb9zmh89z0ua
Hz3f2fzoeV/T/Oj539L86PO4p/nR5zObH5ofuf/wQ/ND80PzQ/ND80PzQ/ND
80PzQ/Mj8xl+aH5ofmh+aH5ofmh+aH5ofmh+aH7kfIcfmh/5Hg0/ND80PzQ/
ND80PzQ/ND80P/J+Dj80PzQ/ND/yPR5+aH5ofmh+aH5ofmh+5HyHH9WP31/9
yI+7f8mrph/dizQ/+voyzQ/ND80PzQ/ND80PzQ/ND82Pft4qzY9+/jrNj17P
Js2PXt82zY9e7y7Nj17/Ps2P3s8hzY/e32x+9H5n86P3f0zzo+dxSvOj5zOb
Hz2v2fzo+Z3T/Oh5XtL86PnO5kfP+5rmR8//luZHn8c9zY8+n9n80PzI/Ycf
mh+aH5ofmh+aH5ofmh+aH5ofmh+Zz/BD80PzQ/ND80PzQ/ND80PzQ/ND8yPn
O/zQ/Mj3aPih+aH5ofmh+aH5ofmh+aH5kfdz+KH5ofmh+ZHv8fBD80PzQ/ND
80PzQ/Mj5zv8qH78XvEVX/ANv3mefnQv0vzo68s0PzQ/ND80PzQ/ND80PzQ/
ND/6eas0P/r56zQ/ej2bND96fds0P3q9uzQ/ev37ND96P4c0P3p/s/nR+53N
j97/Mc2PnscpzY+ez2x+9Lxm86Pnd07zo+d5SfOj5zubHz3va5ofPf9bmh99
Hvc0P/p8ZvND8yP3H35ofmh+aH5ofmh+aH5ofmh+aH5ofmQ+ww/ND80PzQ/N
D80PzQ/ND80PzQ/Nj5zv8EPzI9+j4Yfmh+aH5ofmh+aH5ofmh+ZH3s/hh+aH
5ofmR77Hww/ND80PzQ/ND80PzY+c7/Cj+vF79v/21d/xrW+ZfnQv0vzo68s0
PzQ/ND80PzQ/ND80PzQ/ND/6eas0P/r56zQ/ej2bND96fds0P3q9uzQ/ev37
ND96P4c0P3p/s/nR+53Nj97/Mc2PnscpzY+ez2x+9Lxm86Pnd07zo+d5SfOj
5zubHz3va5ofPf9bmh99Hvc0P/p8ZvND8yP3H35ofmh+aH5ofmh+aH5ofmh+
aH5ofmQ+ww/ND80PzQ/ND80PzQ/ND80PzQ/Nj5zv8EPzI9+j4Yfmh+aH5ofm
h+aH5ofmh+ZH3s/hh+aH5ofmR77Hww/ND80PzQ/ND80PzY+c7/Cj+vH7y7/v
Hd/3wu+cfnQv0vzo68s0PzQ/ND80PzQ/ND80PzQ/ND/6eas0P/r56zQ/ej2b
ND96fds0P3q9uzQ/ev37ND96P4c0P3p/s/nR+53Nj97/Mc2PnscpzY+ez2x+
9Lxm86Pnd07zo+d5SfOj5zubHz3va5ofPf9bmh99Hvc0P/p8ZvND8yP3H35o
fmh+aH5ofmh+aH5ofmh+aH5ofmQ+ww/ND80PzQ/ND80PzQ/ND80PzQ/Nj5zv
8EPzI9+j4Yfmh+aH5ofmh+aH5ofmh+ZH3s/hh+aH5ofmR77Hww/ND80PzQ/N
D80PzY+c7/Cj+vH7w9/59//Gz/zA9KN7keZHX1+m+aH5ofmh+aH5ofmh+aH5
ofnRz1ul+dHPX6f50evZpPnR69um+dHr3aX50evfp/nR+zmk+dH7m82P3u9s
fvT+j2l+9DxOaX70fGbzo+c1mx89v3OaHz3PS5ofPd/Z/Oh5X9P86Pnf0vzo
87in+dHnM5sfmh+5//BD80PzQ/ND80PzQ/ND80PzQ/ND8yPzGX5ofmh+aH5o
fmh+aH5ofmh+aH5ofuR8hx+aH/keDT80PzQ/ND80PzQ/ND80PzQ/8n4OPzQ/
ND80P/I9Hn5ofmh+aH5ofmh+aH7kfIcf1Y/fP//Q5/z08T3Tj+5Fmh99fZnm
h+aH5ofmh+aH5ofmh+aH5kc/b5XmRz9/neZHr2eT5kevb5vmR693l+ZHr3+f
5kfv55DmR+9vNj96v7P50fs/pvnR8zil+dHzmc2PntdsfvT8zml+9DwvaX70
fGfzo+d9TfOj539L86PP457mR5/PbH5ofuT+ww/ND80PzQ/ND80PzQ/ND80P
zQ/Nj8xn+KH5ofmh+aH5ofmh+aH5ofmh+aH5kfMdfmh+5Hs0/ND80PzQ/ND8
0PzQ/ND80PzI+zn80PzQ/ND8yPd4+KH5ofmh+aH5ofmh+ZHzHX5UP35vf/J/
J/z56Uf3Is2Pvr5M80PzQ/ND80PzQ/ND80PzQ/Ojn7dK86Ofv07zo9ezSfOj
17dN86PXu0vzo9e/T/Oj93NI86P3N5sfvd/Z/Oj9H9P86Hmc0vzo+czmR89r
Nj96fuc0P3qelzQ/er6z+dHzvqb50fO/pfnR53FP86PPZzY/ND9y/+GH5ofm
h+aH5ofmh+aH5ofmh+aH5kfmM/zQ/ND80PzQ/ND80PzQ/ND80PzQ/Mj5Dj80
P/I9Gn5ofmh+aH5ofmh+aH5ofmh+5P0cfmh+aH5ofuR7PPzQ/ND80PzQ/ND8
0PzI+Q4/qh+/P/CTT/5AwulH9yLNj76+TPND80PzQ/ND80PzQ/ND80Pzo5+3
SvOjn79O86PXs0nzo9e3TfOj17tL86PXv0/zo/dzSPOj9zebH73f2fzo/R/T
/Oh5nNL86PnM5kfPazY/en7nND96npc0P3q+s/nR876m+dHzv6X50edxT/Oj
z2c2PzQ/cv/hh+aH5ofmh+aH5ofmh+aH5ofmh+ZH5jP80PzQ/ND80PzQ/ND8
0PzQ/ND80PzI+Q4/ND/yPRp+aH5ofmh+aH5ofmh+aH5ofuT9HH5ofmh+aH7k
ezz80PzQ/ND80PzQ/ND8yPkOP6ofv1/51G/+LZ//4R8eP7oXaX709WWaH5of
mh+aH5ofmh+aH5ofmh/9vFWaH/38dZofvZ5Nmh+9vm2aH73eXZofvf59mh+9
n0OaH72/2fzo/c7mR+//mOZHz+OU5kfPZzY/el6z+dHzO6f50fO8pPnR853N
j573Nc2Pnv8tzY8+j3uaH30+s/mh+ZH7Dz80PzQ/ND80PzQ/ND80PzQ/ND80
PzKf4Yfmh+aH5ofmh+aH5ofmh+aH5ofmR853+KH5ke/R8EPzQ/ND80PzQ/ND
80PzQ/Mj7+fwQ/ND80PzI9/j4Yfmh+aH5ofmh+aH5kfOd/hR/fj9F9/048//
ld81/ehepPnR15dpfmh+aH5ofmh+aH5ofmh+aH7081ZpfvTz12l+9Ho2aX70
+rZpfvR6d2l+9Pr3aX70fg5pfvT+ZvOj9zubH73/Y5ofPY9Tmh89n9n86HnN
5kfP75zmR8/zkuZHz3c2P3re1zQ/ev63ND/6PO5pfvT5zOaH5kfuP/zQ/ND8
0PzQ/ND80PzQ/ND80PzQ/Mh8hh+aH5ofmh+aH5ofmh+aH5ofmh+aHznf4Yfm
R75Hww/ND80PzQ/ND80PzQ/ND82PvJ/DD80PzQ/Nj3yPhx+aH5ofmh+aH5of
mh853+FH9eP3Gf/i1z/5zZ82/ehepPnR15dpfmh+aH5ofmh+aH5ofmh+aH70
81ZpfvTz12l+9Ho2aX70+rZpfvR6d2l+9Pr3aX70fg5pfvT+ZvOj9zubH73/
Y5ofPY9Tmh89n9n86HnN5kfP75zmR8/zkuZHz3c2P3re1zQ/ev63ND/6PO5p
fvT5zOaH5kfuP/zQ/ND80PzQ/ND80PzQ/ND80PzQ/Mh8hh+aH5ofmh+aH5of
mh+aH5ofmh+aHznf4YfmR75Hww/ND80PzQ/ND80PzQ/ND82PvJ/DD80PzQ/N
j3yPhx+aH5ofmh+aH5ofmh853+FH9eP3C6948jd0n350L9L86OvLND80PzQ/
ND80PzQ/ND80PzQ/+nmrND/6+es0P3o9mzQ/en3bND96vbs0P3r9+zQ/ej+H
ND96f7P50fudzY/e/zHNj57HKc2Pns9sfvS8ZvOj53dO86PneUnzo+c7mx89
72uaHz3/W5offR73ND/6fGbzQ/Mj9x9+aH5ofmh+aH5ofmh+aH5ofmh+aH5k
PsMPzQ/ND80PzQ/ND80PzQ/ND80PzY+c7/BD8yPfo+GH5ofmh+aH5ofmh+aH
5ofmR97P4Yfmh+aH5ke+x8MPzQ/ND80PzQ/ND82PnO/wo/rxe9M7X/aSd71i
+tG9SPOjry/T/ND80PzQ/ND80PzQ/ND80Pzo563S/Ojnr9P86PVs0vzo9W3T
/Oj17tL86PXv0/zo/RzS/Oj9zeZH73c2P3r/xzQ/eh6nND96PrP50fOazY+e
3znNj57nJc2Pnu9sfvS8r2l+9PxvaX70edzT/Ojzmc0PzY/cf/ih+aH5ofmh
+aH5ofmh+aH5ofmh+ZH5DD80PzQ/ND80PzQ/ND80PzQ/ND80P3K+ww/Nj3yP
hh+aH5ofmh+aH5ofmh+aH5ofeT+HH5ofmh+aH/keDz80PzQ/ND80PzQ/ND9y
vsOP6sfvU5787bBeN/3oXqT50deXaX5ofmh+aH5ofmh+aH5ofmh+9PNWaX70
89dpfvR6Nml+9Pq2aX70endpfvT692l+9H4OaX70/mbzo/c7mx+9/2OaHz2P
U5ofPZ/Z/Oh5zeZHz++c5kfP85LmR893Nj963tc0P3r+tzQ/+jzuaX70+czm
h+ZH7j/80PzQ/ND80PzQ/ND80PzQ/ND80PzIfIYfmh+aH5ofmh+aH5ofmh+a
H5ofmh853+GH5ke+R8MPzQ/ND80PzQ/ND80PzQ/Nj7yfww/ND80PzY98j4cf
mh+aH5ofmh+aH5ofOd/hR/Xj93fe+D2vffYbph/dizQ/+voyzQ/ND80PzQ/N
D80PzQ/ND82Pft4qzY9+/jrNj17PJs2PXt82zY9e7y7Nj17//1/V/Yawu/93
fadsFdF2tXek2jnKoCsbQ+yMToadSEOnFFG6jt1w65oZozElppiIiSQpQzac
3ZCOTidjW6crUhVBpCqKaKvIhn8monQWkTmHSLEreqtdGcuR9+P14XXd+fE8
F1zX5/P+hOvB4XfO+Z7T/Oj9XNL86P2t5kfvdzU/ev/XND96Hrc0P3o+q/nR
81rNj57fPc2PnucjzY+e72p+9LyfaX70/F9pfvR5vNP86PNZzQ/Njzx//ND8
0PzQ/ND80PzQ/ND80PzQ/ND8yHzGD80PzQ/ND80PzQ/ND80PzQ/ND82PnO/4
ofmR79H4ofmh+aH5ofmh+aH5ofmh+ZHf5/ih+aH5ofmR7/H4ofmh+aH5ofmh
+aH5kfMdP6o/1+vHfvS7vu8PLD+6N2l+9P1tmh+aH5ofmh+aH5ofmh+aH5of
/b5dmh/9/n2aH72eQ5ofvb5jmh+93lOaH73+c5ofvZ9Lmh+9v9X86P2u5kfv
/5rmR8/jluZHz2c1P3peq/nR87un+dHzfKT50fNdzY+e9zPNj57/K82PPo93
mh99Pqv5ofmR548fmh+aH5ofmh+aH5ofmh+aH5ofmh+Zz/ih+aH5ofmh+aH5
ofmh+aH5ofmh+ZHzHT80P/I9Gj80PzQ/ND80PzQ/ND80PzQ/8vscPzQ/ND80
P/I9Hj80PzQ/ND80PzQ/ND9yvuNH9ef62l/7s77nV/zx5Uf3Js2Pvr9N80Pz
Q/ND80PzQ/ND80PzQ/Oj37dL86Pfv0/zo9dzSPOj13dM86PXe0rzo9d/TvOj
93NJ86P3t5ofvd/V/Oj9X9P86Hnc0vzo+azmR89rNT96fvc0P3qejzQ/er6r
+dHzfqb50fN/pfnR5/FO86PPZzU/ND/y/PFD80PzQ/ND80PzQ/ND80PzQ/ND
8yPzGT80PzQ/ND80PzQ/ND80PzQ/ND80P3K+44fmR75H44fmh+aH5ofmh+aH
5ofmh+ZHfp/jh+aH5ofmR77H44fmh+aH5ofmh+aH5kfOd/yo/lx/9U/8sj/4
9354+dG9SfOj72/T/ND80PzQ/ND80PzQ/ND80Pzo9+3S/Oj379P86PUc0vzo
9R3T/Oj1ntL86PWf0/zo/VzS/Oj9reZH73c1P3r/1zQ/eh63ND96Pqv50fNa
zY+e3z3Nj57nI82Pnu9qfvS8n2l+9PxfaX70ebzT/OjzWc0PzY88f/zQ/ND8
0PzQ/ND80PzQ/ND80PzQ/Mh8xg/ND80PzQ/ND80PzQ/ND80PzQ/Nj5zv+KH5
ke/R+KH5ofmh+aH5ofmh+aH5ofmR3+f4ofmh+aH5ke/x+KH5ofmh+aH5ofmh
+ZHzHT+qP9dv+7m/6U/+zh9ZfnRv0vzo+9s0PzQ/ND80PzQ/ND80PzQ/ND/6
fbs0P/r9+zQ/ej2HND96fcc0P3q9pzQ/ev3nND96P5c0P3p/q/nR+13Nj97/
Nc2PnsctzY+ez2p+9LxW86Pnd0/zo+f5SPOj57uaHz3vZ5ofPf9Xmh99Hu80
P/p8VvND8yPPHz80PzQ/ND80PzQ/ND80PzQ/ND80PzKf8UPzQ/ND80PzQ/ND
80PzQ/ND80PzI+c7fmh+5Hs0fmh+aH5ofmh+aH5ofmh+aH7k9zl+aH5ofmh+
5Hs8fmh+aH5ofmh+aH5ofuR8x4/qz/XzH1/8C4XLj+5Nmh99f5vmh+aH5ofm
h+aH5ofmh+aH5ke/b5fmR79/n+ZHr+eQ5kev75jmR6/3lOZHr/+c5kfv55Lm
R+9vNT96v6v50fu/pvnR87il+dHzWc2PntdqfvT87ml+9DwfaX70fFfzo+f9
TPOj5/9K86PP453mR5/Pan5ofuT544fmh+aH5ofmh+aH5ofmh+aH5ofmR+Yz
fmh+aH5ofmh+aH5ofmh+aH5ofmh+5HzHD82PfI/GD80PzQ/ND80PzQ/ND80P
zY/8PscPzQ/ND82PfI/HD80PzQ/ND80PzQ/Nj5zv+FH9uf7iF/859y/52fGj
e5PmR9/fpvmh+aH5ofmh+aH5ofmh+aH50e/bpfnR79+n+dHrOaT50es7pvnR
6z2l+dHrP6f50fu5pPnR+1vNj97van70/q9pfvQ8bml+9HxW86PntZofPb97
mh89z0eaHz3f1fzoeT/T/Oj5v9L86PN4p/nR57OaH5ofef74ofmh+aH5ofmh
+aH5ofmh+aH5ofmR+Ywfmh+aH5ofmh+aH5ofmh+aH5ofmh853/FD8yPfo/FD
80PzQ/ND80PzQ/ND80PzI7/P8UPzQ/ND8yPf4/FD80PzQ/ND80PzQ/Mj5zt+
VH+u3/wr/+k/+g9+7vKje5PmR9/fpvmh+aH5ofmh+aH5ofmh+aH50e/bpfnR
79+n+dHrOaT50es7pvnR6z2l+dHrP6f50fu5pPnR+1vNj97van70/q9pfvQ8
bml+9HxW86PntZofPb97mh89z0eaHz3f1fzoeT/T/Oj5v9L86PN4p/nR57Oa
H5ofef74ofmh+aH5ofmh+aH5ofmh+aH5ofmR+Ywfmh+aH5ofmh+aH5ofmh+a
H5ofmh853/FD8yPfo/FD80PzQ/ND80PzQ/ND80PzI7/P8UPzQ/ND8yPf4/FD
80PzQ/ND80PzQ/Mj5zt+VH+ur/hfvuYn/9m/sfzo3qT50fe3aX5ofmh+aH5o
fmh+aH5ofmh+9Pt2aX70+/dpfvR6Dml+9PqOaX70ek9pfvT6z2l+9H4uaX70
/lbzo/e7mh+9/2uaHz2PW5ofPZ/V/Oh5reZHz++e5kfP85HmR893NT963s80
P3r+rzQ/+jzeaX70+azmh+ZHnj9+aH5ofmh+aH5ofmh+aH5ofmh+aH5kPuOH
5ofmh+aH5ofmh+aH5ofmh+aH5kfOd/zQ/Mj3aPzQ/ND80PzQ/ND80PzQ/ND8
yO9z/ND80PzQ/Mj3ePzQ/ND80PzQ/ND80PzI+Y4f1Z/rB3/mF/9A1vKje5Pm
R9/fpvmh+aH5ofmh+aH5ofmh+aH50e/bpfnR79+n+dHrOaT50es7pvnR6z2l
+dHrP6f50fu5pPnR+1vNj97van70/q9pfvQ8bml+9HxW86PntZofPb97mh89
z0eaHz3f1fzoeT/T/Oj5v9L86PN4p/nR57OaH5ofef74ofmh+aH5ofmh+aH5
ofmh+aH5ofmR+Ywfmh+aH5ofmh+aH5ofmh+aH5ofmh853/FD8yPfo/FD80Pz
Q/ND80PzQ/ND80PzI7/P8UPzQ/ND8yPf4/FD80PzQ/ND80PzQ/Mj5zt+VH+u
//g7nl/9i751+dG9SfOj72/T/ND80PzQ/ND80PzQ/ND80Pzo9+3S/Oj379P8
6PUc0vzo9R3T/Oj1ntL86PWf0/zo/VzS/Oj9reZH73c1P3r/1zQ/eh63ND96
Pqv50fNazY+e3z3Nj57nI82Pnu9qfvS8n2l+9PxfaX70ebzT/OjzWc0PzY88
f/zQ/ND80PzQ/ND80PzQ/ND80PzQ/Mh8xg/ND80PzQ/ND80PzQ/ND80PzQ/N
j5zv+KH5ke/R+KH5ofmh+aH5ofmh+aH5ofmR3+f4ofmh+aH5ke/x+KH5ofmh
+aH5ofmh+ZHzHT+qP9e/+L//kX/zr//m5Uf3Js2Pvr9N80PzQ/ND80PzQ/ND
80PzQ/Oj37dL86Pfv0/zo9dzSPOj13dM86PXe0rzo9d/TvOj93NJ86P3t5of
vd/V/Oj9X9P86Hnc0vzo+azmR89rNT96fvc0P3qejzQ/er6r+dHzfqb50fN/
pfnR5/FO86PPZzU/ND/y/PFD80PzQ/ND80PzQ/ND80PzQ/ND8yPzGT80PzQ/
ND80PzQ/ND80PzQ/ND80P3K+44fmR75H44fmh+aH5ofmh+aH5ofmh+ZHfp/j
h+aH5ofmR77H44fmh+aH5ofmh+aH5kfOd/yo/lx/5Bf/3W/4jufyo3uT5kff
36b5ofmh+aH5ofmh+aH5ofmh+dHv26X50e/fp/nR6zmk+dHrO6b50es9pfnR
6z+n+dH7uaT50ftbzY/e72p+9P6vaX70PG5pfvR8VvOj57WaHz2/e5ofPc9H
mh8939X86Hk/0/zo+b/S/OjzeKf50eezmh+aH3n++KH5ofmh+aH5ofmh+aH5
ofmh+aH5kfmMH5ofmh+aH5ofmh+aH5ofmh+aH5ofOd/xQ/Mj36PxQ/ND80Pz
Q/ND80PzQ/ND8yO/z/FD80PzQ/Mj3+PxQ/ND80PzQ/ND80PzI+c7flR/rm/5
4o8j/J7lR/cmzY++v03zQ/ND80PzQ/ND80PzQ/ND86Pft0vzo9+/T/Oj13NI
86PXd0zzo9d7SvOj139O86P3c0nzo/e3mh+939X86P1f0/zoedzS/Oj5rOZH
z2s1P3p+9zQ/ep6PND96vqv50fN+pvnR83+l+dHn8U7zo89nNT80P/L88UPz
Q/ND80PzQ/ND80PzQ/ND80PzI/MZPzQ/ND80PzQ/ND80PzQ/ND80PzQ/cr7j
h+ZHvkfjh+aH5ofmh+aH5ofmh+aH5kd+n+OH5ofmh+ZHvsfjh+aH5ofmh+aH
5ofmR853/Kj+XD/5U7/02//w9y8/ujdpfvT9bZofmh+aH5ofmh+aH5ofmh+a
H/2+XZof/f59mh+9nkOaH72+Y5ofvd5Tmh+9/nOaH72fS5ofvb/V/Oj9ruZH
7/+a5kfP45bmR89nNT96Xqv50fO7p/nR83yk+dHzXc2PnvczzY+e/yvNjz6P
d5offT6r+aH5keePH5ofmh+aH5ofmh+aH5ofmh+aH5ofmc/4ofmh+aH5ofmh
+aH5ofmh+aH5ofmR8x0/ND/yPRo/ND80PzQ/ND80PzQ/ND80P/L7HD80PzQ/
ND/yPR4/ND80PzQ/ND80PzQ/cr7jR/Xn+p++7Td+5zf92eVH9ybNj76/TfND
80PzQ/ND80PzQ/ND80Pzo9+3S/Oj379P86PXc0jzo9d3TPOj13tK86PXf07z
o/dzSfOj97eaH73f1fzo/V/T/Oh53NL86Pms5kfPazU/en73ND96no80P3q+
q/nR836m+dHzf6X50efxTvOjz2c1PzQ/8vzxQ/ND80PzQ/ND80PzQ/ND80Pz
Q/Mj8xk/ND80PzQ/ND80PzQ/ND80PzQ/ND9yvuOH5ke+R+OH5ofmh+aH5ofm
h+aH5ofmR36f44fmh+aH5ke+x+OH5ofmh+aH5ofmh+ZHznf8qP5c/94P/Tf/
2T/8G8uP7k2aH31/m+aH5ofmh+aH5ofmh+aH5ofmR79vl+ZHv3+f5kev55Dm
R6/vmOZHr/eU5kev/5zmR+/nkuZH7281P3q/q/nR+7+m+dHzuKX50fNZzY+e
12p+9PzuaX70PB9pfvR8V/Oj5/1M86Pn/0rzo8/jneZHn89qfmh+5Pnjh+aH
5ofmh+aH5ofmh+aH5ofmh+ZH5jN+aH5ofmh+aH5ofmh+aH5ofmh+aH7kfMcP
zY98j8YPzQ/ND80PzQ/ND80PzQ/Nj/w+xw/ND80PzY98j8cPzQ/ND80PzQ/N
D82PnO/4Uf25fvxrv/gLy4/uTZoffX+b5ofmh+aH5ofmh+aH5ofmh+ZHv2+X
5ke/f5/mR6/nkOZHr++Y5kev95TmR6//nOZH7+eS5kfvbzU/er+r+dH7v6b5
0fO4pfnR81nNj57Xan70/O5pfvQ8H2l+9HxX86Pn/Uzzo+f/SvOjz+Od5kef
z2p+aH7k+eOH5ofmh+aH5ofmh+aH5ofmh+aH5kfmM35ofmh+aH5ofmh+aH5o
fmh+aH5ofuR8xw/Nj3yPxg/ND80PzQ/ND80PzQ/ND82P/D7HD80PzQ/Nj3yP
xw/ND80PzQ/ND80PzY+c7/hR/bm+93f/xB/6mp9cfnRv0vzo+9s0PzQ/ND80
PzQ/ND80PzQ/ND/6fbs0P/r9+zQ/ej2HND96fcc0P3q9pzQ/ev3nND96P5c0
P3p/q/nR+13Nj97/Nc2PnsctzY+ez2p+9LxW86Pnd0/zo+f5SPOj57uaHz3v
Z5ofPf9Xmh99Hu80P/p8VvND8yPPHz80PzQ/ND80PzQ/ND80PzQ/ND80PzKf
8UPzQ/ND80PzQ/ND80PzQ/ND80PzI+c7fmh+5Hs0fmh+aH5ofmh+aH5ofmh+
aH7k9zl+aH5ofmh+5Hs8fmh+aH5ofmh+aH5ofuR8x4/qz/XL/8m/8oN//su/
LH50b9L86PvbND80PzQ/ND80PzQ/ND80PzQ/+n27ND/6/fs0P3o9hzQ/en3H
ND96vac0P3r95zQ/ej+XND96f6v50ftdzY/e/zXNj57HLc2Pns9qfvS8VvOj
53dP86Pn+Ujzo+e7mh8972eaHz3/V5offR7vND/6fFbzQ/Mjzx8/ND80PzQ/
ND80PzQ/ND80PzQ/ND8yn/FD80PzQ/ND80PzQ/ND80PzQ/ND8yPnO35ofuR7
NH5ofmh+aH5ofmh+aH5ofmh+5Pc5fmh+aH5ofuR7PH5ofmh+aH5ofmh+aH7k
fMeP6s/1f/26X/NX/qN/dfnRvUnzo+9v0/zQ/ND80PzQ/ND80PzQ/ND86Pft
0vzo9+/T/Oj1HNL86PUd0/zo9Z7S/Oj1n9P86P1c0vzo/a3mR+93NT96/9c0
P3oetzQ/ej6r+dHzWs2Pnt89zY+e5yPNj57van70vJ9pfvT8X2l+9Hm80/zo
81nND82PPH/80PzQ/ND80PzQ/ND80PzQ/ND80PzIfMYPzQ/ND80PzQ/ND80P
zQ/ND80PzY+c7/ih+ZHv0fih+aH5ofmh+aH5ofmh+aH5kd/n+KH5ofmh+ZHv
8fih+aH5ofmh+aH5ofmR8x0/qj/Xf/knf+eP/NQvXX50b9L86PvbND80PzQ/
ND80PzQ/ND80PzQ/+n27ND/6/fs0P3o9hzQ/en3HND96vac0P3r95zQ/ej+X
ND96f6v50ftdzY/e/zXNj57HLc2Pns9qfvS8VvOj53dP86Pn+Ujzo+e7mh89
72eaHz3/V5offR7vND/6fFbzQ/Mjzx8/ND80PzQ/ND80PzQ/ND80PzQ/ND8y
n/FD80PzQ/ND80PzQ/ND80PzQ/ND8yPnO35ofuR7NH5ofmh+aH5ofmh+aH5o
fmh+5Pc5fmh+aH5ofuR7PH5ofmh+aH5ofmh+aH7kfMeP6s/19V/1A//493/z
8qN7k+ZH39+m+aH5ofmh+aH5ofmh+aH5ofnR79ul+dHv36f50es5pPnR6zum
+dHrPaX50es/p/nR+7mk+dH7W82P3u9qfvT+r2l+9DxuaX70fFbzo+e1mh89
v3uaHz3PR5ofPd/V/Oh5P9P86Pm/0vzo83in+dHns5ofmh95/vih+aH5ofmh
+aH5ofmh+aH5ofmh+ZH5jB+aH5ofmh+aH5ofmh+aH5ofmh+aHznf8UPzI9+j
8UPzQ/ND80PzQ/ND80PzQ/Mjv8/xQ/ND80PzI9/j8UPzQ/ND80PzQ/ND8yPn
O35Uf64f+YKTb19+dG/S/Oj72zQ/ND80PzQ/ND80PzQ/ND80P/p9uzQ/+v37
ND96PYc0P3p9xzQ/er2nND96/ec0P3o/lzQ/en+r+dH7Xc2P3v81zY+exy3N
j57Pan70vFbzo+d3T/Oj5/lI86Pnu5ofPe9nmh89/1eaH30e7zQ/+nxW80Pz
I88fPzQ/ND80PzQ/ND80PzQ/ND80PzQ/Mp/xQ/ND80PzQ/ND80PzQ/ND80Pz
Q/Mj5zt+aH7kezR+aH5ofmh+aH5ofmh+aH5ofuT3OX5ofmh+aH7kezx+aH5o
fmh+aH5ofmh+5HzHj+rP9f77P+PL/vZ1+dG9SfOj72/T/ND80PzQ/ND80PzQ
/ND80Pzo9+3S/Oj379P86PUc0vzo9R3T/Oj1ntL86PWf0/zo/VzS/Oj9reZH
73c1P3r/1zQ/eh63ND96Pqv50fNazY+e3z3Nj57nI82Pnu9qfvS8n2l+9Pxf
aX70ebzT/OjzWc0PzY88f/zQ/ND80PzQ/ND80PzQ/ND80PzQ/Mh8xg/ND80P
zQ/ND80PzQ/ND80PzQ/Nj5zv+KH5ke/R+KH5ofmh+aH5ofmh+aH5ofmR3+f4
ofmh+aH5ke/x+KH5ofmh+aH5ofmh+ZHzHT+qP9e/9o2/5Bf8tt+9/OjepPnR
97dpfmh+aH5ofmh+aH5ofmh+aH70+3ZpfvT792l+9HoOaX70+o5pfvR6T2l+
9PrPaX70fi5pfvT+VvOj97uaH73/a5ofPY9bmh89n9X86Hmt5kfP757mR8/z
keZHz3c1P3rezzQ/ev6vND/6PN5pfvT5rOaH5keeP35ofmh+aH5ofmh+aH5o
fmh+aH5ofmQ+44fmh+aH5ofmh+aH5ofmh+aH5ofmR853/ND8yPdo/ND80PzQ
/ND80PzQ/ND80PzI73P80PzQ/ND8yPd4/ND80PzQ/ND80PzQ/Mj5jh/Vn+uv
ff9v+IVf+T8sP7o3aX70/W2aH5ofmh+aH5ofmh+aH5ofmh/9vl2aH/3+fZof
vZ5Dmh+9vmOaH73eU5ofvf5zmh+9n0uaH72/1fzo/a7mR+//muZHz+OW5kfP
ZzU/el6r+dHzu6f50fN8pPnR813Nj573M82Pnv8rzY8+j3eaH30+q/mh+ZHn
jx+aH5ofmh+aH5ofmh+aH5ofmh+aH5nP+KH5ofmh+aH5ofmh+aH5ofmh+aH5
kfMdPzQ/8j0aPzQ/ND80PzQ/ND80PzQ/ND/y+xw/ND80PzQ/8j0ePzQ/ND80
PzQ/ND80P3K+40f157r+rO/5FX/8Tyw/ujdpfvT9bZofmh+aH5ofmh+aH5of
mh+aH/2+XZof/f59mh+9nkOaH72+Y5ofvd5Tmh+9/nOaH72fS5ofvb/V/Oj9
ruZH7/+a5kfP45bmR89nNT96Xqv50fO7p/nR83yk+dHzXc2PnvczzY+e/yvN
jz6Pd5offT6r+aH5keePH5ofmh+aH5ofmh+aH5ofmh+aH5ofmc/4ofmh+aH5
ofmh+aH5ofmh+aH5ofmR8x0/ND/yPRo/ND80PzQ/ND80PzQ/ND80P/L7HD80
PzQ/ND/yPR4/ND80PzQ/ND80PzQ/cr7jR/Xn+urzX/h1v+avLD+6N2l+9P1t
mh+aH5ofmh+aH5ofmh+aH5of/b5dmh/9/n2aH72eQ5ofvb5jmh+93lOaH73+
c5ofvZ9Lmh+9v9X86P2u5kfv/5rmR8/jluZHz2c1P3peq/nR87un+dHzfKT5
0fNdzY+e9zPNj57/K82PPo93mh99Pqv5ofmR548fmh+aH5ofmh+aH5ofmh+a
H5ofmh+Zz/ih+aH5ofmh+aH5ofmh+aH5ofmh+ZHzHT80P/I9Gj80PzQ/ND80
PzQ/ND80PzQ/8vscPzQ/ND80P/I9Hj80PzQ/ND80PzQ/ND9yvuNH9ef6ob/5
47sf+9HlR/cmzY++v03zQ/ND80PzQ/ND80PzQ/ND86Pft0vzo9+/T/Oj13NI
86PXd0zzo9d7SvOj139O86P3c0nzo/e3mh+939X86P1f0/zoedzS/Oj5rOZH
z2s1P3p+9zQ/ep6PND96vqv50fN+pvnR83+l+dHn8U7zo89nNT80P/L88UPz
Q/ND80PzQ/ND80PzQ/ND80PzI/MZPzQ/ND80PzQ/ND80PzQ/ND80PzQ/cr7j
h+ZHvkfjh+aH5ofmh+aH5ofmh+aH5kd+n+OH5ofmh+ZHvsfjh+aH5ofmh+aH
5ofmR853/Kj+XMcv/u+Qn1h+dG/S/Oj72zQ/ND80PzQ/ND80PzQ/ND80P/p9
uzQ/+v37ND96PYc0P3p9xzQ/er2nND96/ec0P3o/lzQ/en+r+dH7Xc2P3v81
zY+exy3Nj57Pan70vFbzo+d3T/Oj5/lI86Pnu5ofPe9nmh89/1eaH30e7zQ/
+nxW80PzI88fPzQ/ND80PzQ/ND80PzQ/ND80PzQ/Mp/xQ/ND80PzQ/ND80Pz
Q/ND80PzQ/Mj5zt+aH7kezR+aH5ofmh+aH5ofmh+aH5ofuT3OX5ofmh+aH7k
ezx+aH5ofmh+aH5ofmh+5HzHj+rP9XP+u2/+XV/3pV8eP7o3aX70/W2aH5of
mh+aH5ofmh+aH5ofmh/9vl2aH/3+fZofvZ5Dmh+9vmOaH73eU5ofvf5zmh+9
n0uaH72/1fzo/a7mR+//muZHz+OW5kfPZzU/el6r+dHzu6f50fN8pPnR813N
j573M82Pnv8rzY8+j3eaH30+q/mh+ZHnjx+aH5ofmh+aH5ofmh+aH5ofmh+a
H5nP+KH5ofmh+aH5ofmh+aH5ofmh+aH5kfMdPzQ/8j0aPzQ/ND80PzQ/ND80
PzQ/ND/y+xw/ND80PzQ/8j0ePzQ/ND80PzQ/ND80P3K+40f15/pTP33/3r/8
85Yf3Zs0P/r+Ns0PzQ/ND80PzQ/ND80PzQ/Nj37fLs2Pfv8+zY9ezyHNj17f
Mc2PXu8pzY9e/znNj97PJc2P3t9qfvR+V/Oj939N86PncUvzo+ezmh89r9X8
6Pnd0/zoeT7S/Oj5ruZHz/uZ5kfP/5XmR5/HO82PPp/V/ND8yPPHD80PzQ/N
D80PzQ/ND80PzQ/ND82PzGf80PzQ/ND80PzQ/ND80PzQ/ND80PzI+Y4fmh/5
Ho0fmh+aH5ofmh+aH5ofmh+aH/l9jh+aH5ofmh/5Ho8fmh+aH5ofmh+aH5of
Od/xo/pzfdu3/+Hv/w2/cPnRvUnzo+9v0/zQ/ND80PzQ/ND80PzQ/ND86Pft
0vzo9+/T/Oj1HNL86PUd0/zo9Z7S/Oj1n9P86P1c0vzo/a3mR+93NT96/9c0
P3oetzQ/ej6r+dHzWs2Pnt89zY+e5yPNj57van70vJ9pfvT8X2l+9Hm80/zo
81nND82PPH/80PzQ/ND80PzQ/ND80PzQ/ND80PzIfMYPzQ/ND80PzQ/ND80P
zQ/ND80PzY+c7/ih+ZHv0fih+aH5ofmh+aH5ofmh+aH5kd/n+KH5ofmh+ZHv
8fih+aH5ofmh+aH5ofmR8x0/qj/Xl/6lv/OnvuQblx/dmzQ/+v42zQ/ND80P
zQ/ND80PzQ/ND82Pft8uzY9+/z7Nj17PIc2PXt8xzY9e7ynNj17/Oc2P3s8l
zY/e32p+9H5X86P3f03zo+dxS/Oj57OaHz2v1fzo+d3T/Oh5PtL86Pmu5kfP
+5nmR8//leZHn8c7zY8+n9X80PzI88cPzQ/ND80PzQ/ND80PzQ/ND80PzY/M
Z/zQ/ND80PzQ/ND80PzQ/ND80PzQ/Mj5jh+aH/kejR+aH5ofmh+aH5ofmh+a
H5of+X2OH5ofmh+aH/kejx+aH5ofmh+aH5ofmh853/Gj+nP90a/70v/1f/wP
lx/dmzQ/+v42zQ/ND80PzQ/ND80PzQ/ND82Pft8uzY9+/z7Nj17PIc2PXt8x
zY9e7ynNj17/Oc2P3s8lzY/e32p+9H5X86P3f03zo+dxS/Oj57OaHz2v1fzo
+d3T/Oh5PtL86Pmu5kfP+5nmR8//leZHn8c7zY8+n9X80PzI88cPzQ/ND80P
zQ/ND80PzQ/ND80PzY/MZ/zQ/ND80PzQ/ND80PzQ/ND80PzQ/Mj5jh+aH/ke
jR+aH5ofmh+aH5ofmh+aH5of+X2OH5ofmh+aH/kejx+aH5ofmh+aH5ofmh85
3/Gj+nP9+7/nF//db/iO5Uf3Js2Pvr9N80PzQ/ND80PzQ/ND80PzQ/Oj37dL
86Pfv0/zo9dzSPOj13dM86PXe0rzo9d/TvOj93NJ86P3t5ofvd/V/Oj9X9P8
6Hnc0vzo+azmR89rNT96fvc0P3qejzQ/er6r+dHzfqb50fN/pfnR5/FO86PP
ZzU/ND/y/PFD80PzQ/ND80PzQ/ND80PzQ/ND8yPzGT80PzQ/ND80PzQ/ND80
PzQ/ND80P3K+44fmR75H44fmh+aH5ofmh+aH5ofmh+ZHfp/jh+aH5ofmR77H
44fmh+aH5ofmh+aH5kfOd/yo/lw/9cU/zvtdy4/uTZoffX+b5ofmh+aH5ofm
h+aH5ofmh+ZHv2+X5ke/f5/mR6/nkOZHr++Y5kev95TmR6//nOZH7+eS5kfv
bzU/er+r+dH7v6b50fO4pfnR81nNj57Xan70/O5pfvQ8H2l+9HxX86Pn/Uzz
o+f/SvOjz+Od5kefz2p+aH7k+eOH5ofmh+aH5ofmh+aH5ofmh+aH5kfmM35o
fmh+aH5ofmh+aH5ofmh+aH5ofuR8xw/Nj3yPxg/ND80PzQ/ND80PzQ/ND82P
/D7HD80PzQ/Nj3yPxw/ND80PzQ/ND80PzY+c7/hR/bm+71t+70/fv3f50b1J
86Pvb9P80PzQ/ND80PzQ/ND80PzQ/Oj37dL86Pfv0/zo9RzS/Oj1HdP86PWe
0vzo9Z/T/Oj9XNL86P2t5kfvdzU/ev/XND96Hrc0P3o+q/nR81rNj57fPc2P
nucjzY+e72p+9LyfaX70/F9pfvR5vNP86PNZzQ/Njzx//ND80PzQ/ND80PzQ
/ND80PzQ/ND8yHzGD80PzQ/ND80PzQ/ND80PzQ/ND82PnO/4ofmR79H4ofmh
+aH5ofmh+aH5ofmh+ZHf5/ih+aH5ofmR7/H4ofmh+aH5ofmh+aH5kfMdP6o/
16/6wT//5V/1A8uP7k2aH31/m+aH5ofmh+aH5ofmh+aH5ofmR79vl+ZHv3+f
5kev55DmR6/vmOZHr/eU5kev/5zmR+/nkuZH7281P3q/q/nR+7+m+dHzuKX5
0fNZzY+e12p+9PzuaX70PB9pfvR8V/Oj5/1M86Pn/0rzo8/jneZHn89qfmh+
5Pnjh+aH5ofmh+aH5ofmh+aH5ofmh+ZH5jN+aH5ofmh+aH5ofmh+aH5ofmh+
aH7kfMcPzY98j8YPzQ/ND80PzQ/ND80PzQ/Nj/w+xw/ND80PzY98j8cPzQ/N
D80PzQ/ND82PnO/4Uf25/p+f98//QPT40b1J86Pvb9P80PzQ/ND80PzQ/ND8
0PzQ/Oj37dL86Pfv0/zo9RzS/Oj1HdP86PWe0vzo9Z/T/Oj9XNL86P2t5kfv
dzU/ev/XND96Hrc0P3o+q/nR81rNj57fPc2PnucjzY+e72p+9LyfaX70/F9p
fvR5vNP86PNZzQ/Njzx//ND80PzQ/ND80PzQ/ND80PzQ/ND8yHzGD80PzQ/N
D80PzQ/ND80PzQ/ND82PnO/4ofmR79H4ofmh+aH5ofmh+aH5ofmh+ZHf5/ih
+aH5ofmR7/H4ofmh+aH5ofmh+aH5kfMdP6o/13/7/Opf9K1/a/nRvUnzo+9v
0/zQ/ND80PzQ/ND80PzQ/ND86Pft0vzo9+/T/Oj1HNL86PUd0/zo9Z7S/Oj1
n9P86P1c0vzo/a3mR+93NT96/9c0P3oetzQ/ej6r+dHzWs2Pnt89zY+e5yPN
j57van70vJ9pfvT8X2l+9Hm80/zo81nND82PPH/80PzQ/ND80PzQ/ND80PzQ
/ND80PzIfMYPzQ/ND80PzQ/ND80PzQ/ND80PzY+c7/ih+ZHv0fih+aH5ofmh
+aH5ofmh+aH5kd/n+KH5ofmh+ZHv8fih+aH5ofmh+aH5ofmR8x0/qj/XN/yf
v/pX/tN/tPzo3qT50fe3aX5ofmh+aH5ofmh+aH5ofmh+9Pt2aX70+/dpfvR6
Dml+9PqOaX70ek9pfvT6z2l+9H4uaX70/lbzo/e7mh+9/2uaHz2PW5ofPZ/V
/Oh5reZHz++e5kfP85HmR893NT963s80P3r+rzQ/+jzeaX70+azmh+ZHnj9+
aH5ofmh+aH5ofmh+aH5ofmh+aH5kPuOH5ofmh+aH5ofmh+aH5ofmh+aH5kfO
d/zQ/Mj3aPzQ/ND80PzQ/ND80PzQ/ND8yO9z/ND80PzQ/Mj3ePzQ/ND80PzQ
/ND80PzI+Y4f1Z/rH25/x7f83p9efnRv0vzo+9s0PzQ/ND80PzQ/ND80PzQ/
ND/6fbs0P/r9+zQ/ej2HND96fcc0P3q9pzQ/ev3nND96P5c0P3p/q/nR+13N
j97/Nc2PnsctzY+ez2p+9LxW86Pnd0/zo+f5SPOj57uaHz3vZ5ofPf9Xmh99
Hu80P/p8VvND8yPPHz80PzQ/ND80PzQ/ND80PzQ/ND80PzKf8UPzQ/ND80Pz
Q/ND80PzQ/ND80PzI+c7fmh+5Hs0fmh+aH5ofmh+aH5ofmh+aH7k9zl+aH5o
fmh+5Hs8fmh+aH5ofmh+aH5ofuR8x4/qz/V7vvjX0b/yX4of3Zs0P/r+Ns0P
zQ/ND80PzQ/ND80PzQ/Nj37fLs2Pfv8+zY9ezyHNj17fMc2PXu8pzY9e/znN
j97PJc2P3t9qfvR+V/Oj939N86PncUvzo+ezmh89r9X86Pnd0/zoeT7S/Oj5
ruZHz/uZ5kfP/5XmR5/HO82PPp/V/ND8yPPHD80PzQ/ND80PzQ/ND80PzQ/N
D82PzGf80PzQ/ND80PzQ/ND80PzQ/ND80PzI+Y4fmh/5Ho0fmh+aH5ofmh+a
H5ofmh+aH/l9jh+aH5ofmh/5Ho8fmh+aH5ofmh+aH5ofOd/xo/pz/Vtf9rev
f/Vrlx/dmzQ/+v42zQ/ND80PzQ/ND80PzQ/ND82Pft8uzY9+/z7Nj17PIc2P
Xt8xzY9e7ynNj17/Oc2P3s8lzY/e32p+9H5X86P3f03zo+dxS/Oj57OaHz2v
1fzo+d3T/Oh5PtL86Pmu5kfP+5nmR8//leZHn8c7zY8+n9X80PzI88cPzQ/N
D80PzQ/ND80PzQ/ND80PzY/MZ/zQ/ND80PzQ/ND80PzQ/ND80PzQ/Mj5jh+a
H/kejR+aH5ofmh+aH5ofmh+aH5of+X2OH5ofmh+aH/kejx+aH5ofmh+aH5of
mh853/Gj+nP9H7/1X/jPf8u/s/zo3qT50fe3aX5ofmh+aH5ofmh+aH5ofmh+
9Pt2aX70+/dpfvR6Dml+9PqOaX70ek9pfvT6z2l+9H4uaX70/lbzo/e7mh+9
/2uaHz2PW5ofPZ/V/Oh5reZHz++e5kfP85HmR893NT963s80P3r+rzQ/+jze
aX70+azmh+ZHnj9+aH5ofmh+aH5ofmh+aH5ofmh+aH5kPuOH5ofmh+aH5ofm
h+aH5ofmh+aH5kfOd/zQ/Mj3aPzQ/ND80PzQ/ND80PzQ/ND8yO9z/ND80PzQ
/Mj3ePzQ/ND80PzQ/ND80PzI+Y4f1Z/ru/7W1/++n/lrlx/dmzQ/+v42zQ/N
D80PzQ/ND80PzQ/ND82Pft8uzY9+/z7Nj17PIc2PXt8xzY9e7ynNj17/Oc2P
3s8lzY/e32p+9H5X86P3f03zo+dxS/Oj57OaHz2v1fzo+d3T/Oh5PtL86Pmu
5kfP+5nmR8//leZHn8c7zY8+n9X80PzI88cPzQ/ND80PzQ/ND80PzQ/ND80P
zY/MZ/zQ/ND80PzQ/ND80PzQ/ND80PzQ/Mj5jh+aH/kejR+aH5ofmh+aH5of
mh+aH5of+X2OH5ofmh+aH/kejx+aH5ofmh+aH5ofmh853/Gj+nN93b/9xX+Q
d/nRvUnzo+9v0/zQ/ND80PzQ/ND80PzQ/ND86Pft0vzo9+/T/Oj1HNL86PUd
0/zo9Z7S/Oj1n9P86P1c0vzo/a3mR+93NT96/9c0P3oetzQ/ej6r+dHzWs2P
nt89zY+e5yPNj57van70vJ9pfvT8X2l+9Hm80/zo81nND82PPH/80PzQ/ND8
0PzQ/ND80PzQ/ND80PzIfMYPzQ/ND80PzQ/ND80PzQ/ND80PzY+c7/ih+ZHv
0fih+aH5ofmh+aH5ofmh+aH5kd/n+KH5ofmh+ZHv8fih+aH5ofmh+aH5ofmR
8x0/qj/XX/8D//Wf2f6O5Uf3Js2Pvr9N80PzQ/ND80PzQ/ND80PzQ/Oj37dL
86Pfv0/zo9dzSPOj13dM86PXe0rzo9d/TvOj93NJ86P3t5ofvd/V/Oj9X9P8
6Hnc0vzo+azmR89rNT96fvc0P3qejzQ/er6r+dHzfqb50fN/pfnR5/FO86PP
ZzU/ND/y/PFD80PzQ/ND80PzQ/ND80PzQ/ND8yPzGT80PzQ/ND80PzQ/ND80
PzQ/ND80P3K+44fmR75H44fmh+aH5ofmh+aH5ofmh+ZHfp/jh+aH5ofmR77H
44fmh+aH5ofmh+aH5kfOd/yo/ly3/+/P/W//4LuXH92bND/6/jbND80PzQ/N
D80PzQ/ND80PzY9+3y7Nj37/Ps2PXs8hzY9e3zHNj17vKc2PXv85zY/ezyXN
j97fan70flfzo/d/TfOj53FL86Pns5ofPa/V/Oj53dP86Hk+0vzo+a7mR8/7
meZHz/+V5kefxzvNjz6f1fzQ/Mjzxw/ND80PzQ/ND80PzQ/ND80PzQ/Nj8xn
/ND80PzQ/ND80PzQ/ND80PzQ/ND8yPmOH5of+R6NH5ofmh+aH5ofmh+aH5of
mh/5fY4fmh+aH5of+R6PH5ofmh+aH5ofmh+aHznf8aP6c/3L/+mP/eh3fd/y
o3uT5kff36b5ofmh+aH5ofmh+aH5ofmh+dHv26X50e/fp/nR6zmk+dHrO6b5
0es9pfnR6z+n+dH7uaT50ftbzY/e72p+9P6vaX70PG5pfvR8VvOj57WaHz2/
e5ofPc9Hmh8939X86Hk/0/zo+b/S/OjzeKf50eezmh+aH3n++KH5ofmh+aH5
ofmh+aH5ofmh+aH5kfmMH5ofmh+aH5ofmh+aH5ofmh+aH5ofOd/xQ/Mj36Px
Q/ND80PzQ/ND80PzQ/ND8yO/z/FD80PzQ/Mj3+PxQ/ND80PzQ/ND80PzI+c7
flR/rh/+y1/8B02WH92bND/6/jbND80PzQ/ND80PzQ/ND80PzY9+3y7Nj37/
Ps2PXs8hzY9e3zHNj17vKc2PXv85zY/ezyXNj97fan70flfzo/d/TfOj53FL
86Pns5ofPa/V/Oj53dP86Hk+0vzo+a7mR8/7meZHz/+V5kefxzvNjz6f1fzQ
/Mjzxw/ND80PzQ/ND80PzQ/ND80PzQ/Nj8xn/ND80PzQ/ND80PzQ/ND80PzQ
/ND8yPmOH5of+R6NH5ofmh+aH5ofmh+aH5ofmh/5fY4fmh+aH5of+R6PH5of
mh+aH5ofmh+aHznf8aP6c/2Wf/1Xff6OZPnRvUnzo+9v0/zQ/ND80PzQ/ND8
0PzQ/ND86Pft0vzo9+/T/Oj1HNL86PUd0/zo9Z7S/Oj1n9P86P1c0vzo/a3m
R+93NT96/9c0P3oetzQ/ej6r+dHzWs2Pnt89zY+e5yPNj57van70vJ9pfvT8
X2l+9Hm80/zo81nND82PPH/80PzQ/ND80PzQ/ND80PzQ/ND80PzIfMYPzQ/N
D80PzQ/ND80PzQ/ND80PzY+c7/ih+ZHv0fih+aH5ofmh+aH5ofmh+aH5kd/n
+KH5ofmh+ZHv8fih+aH5ofmh+aH5ofmR8x0/qj/XV/5Xv/0rfv3fX350b9L8
6PvbND80PzQ/ND80PzQ/ND80PzQ/+n27ND/6/fs0P3o9hzQ/en3HND96vac0
P3r95zQ/ej+XND96f6v50ftdzY/e/zXNj57HLc2Pns9qfvS8VvOj53dP86Pn
+Ujzo+e7mh8972eaHz3/V5offR7vND/6fFbzQ/Mjzx8/ND80PzQ/ND80PzQ/
ND80PzQ/ND8yn/FD80PzQ/ND80PzQ/ND80PzQ/ND8yPnO35ofuR7NH5ofmh+
aH5ofmh+aH5ofmh+5Pc5fmh+aH5ofuR7PH5ofmh+aH5ofmh+aH7kfMeP6s/1
p3/iD33NT/6z5Uf3Js2Pvr9N80PzQ/ND80PzQ/ND80PzQ/Oj37dL86Pfv0/z
o9dzSPOj13dM86PXe0rzo9d/TvOj93NJ86P3t5ofvd/V/Oj9X9P86Hnc0vzo
+azmR89rNT96fvc0P3qejzQ/er6r+dHzfqb50fN/pfnR5/FO86PPZzU/ND/y
/PFD80PzQ/ND80PzQ/ND80PzQ/ND8yPzGT80PzQ/ND80PzQ/ND80PzQ/ND80
P3K+44fmR75H44fmh+aH5ofmh+aH5ofmh+ZHfp/jh+aH5ofmR77H44fmh+aH
5ofmh+aH5kfOd/yo/lz/ybd+8S+EfEX86N6k+dH3t2l+aH5ofmh+aH5ofmh+
aH5ofvT7dml+9Pv3aX70eg5pfvT6jml+9HpPaX70+s9pfvR+Lml+9P5W86P3
u5ofvf9rmh89j1uaHz2f1fzoea3mR8/vnuZHz/OR5kfPdzU/et7PND96/q80
P/o83ml+9Pms5ofmR54/fmh+aH5ofmh+aH5ofmh+aH5ofmh+ZD7jh+aH5ofm
h+aH5ofmh+aH5ofmh+ZHznf80PzI92j80PzQ/ND80PzQ/ND80PzQ/Mjvc/zQ
/ND80PzI93j80PzQ/ND80PzQ/ND8yPmOH9Wf62f86S/5xl/yC5Yf3Zs0P/r+
Ns0PzQ/ND80PzQ/ND80PzQ/Nj37fLs2Pfv8+zY9ezyHNj17fMc2PXu8pzY9e
/znNj97PJc2P3t9qfvR+V/Oj939N86PncUvzo+ezmh89r9X86Pnd0/zoeT7S
/Oj5ruZHz/uZ5kfP/5XmR5/HO82PPp/V/ND8yPPHD80PzQ/ND80PzQ/ND80P
zQ/ND82PzGf80PzQ/ND80PzQ/ND80PzQ/ND80PzI+Y4fmh/5Ho0fmh+aH5of
mh+aH5ofmh+aH/l9jh+aH5ofmh/5Ho8fmh+aH5ofmh+aH5ofOd/xo/pz/bEv
/jiQr19+dG/S/Oj72zQ/ND80PzQ/ND80PzQ/ND80P/p9uzQ/+v37ND96PYc0
P3p9xzQ/er2nND96/ec0P3o/lzQ/en+r+dH7Xc2P3v81zY+exy3Nj57Pan70
vFbzo+d3T/Oj5/lI86Pnu5ofPe9nmh89/1eaH30e7zQ/+nxW80PzI88fPzQ/
ND80PzQ/ND80PzQ/ND80PzQ/Mp/xQ/ND80PzQ/ND80PzQ/ND80PzQ/Mj5zt+
aH7kezR+aH5ofmh+aH5ofmh+aH5ofuT3OX5ofmh+aH7kezx+aH5ofmh+aH5o
fmh+5HzHj+rP9a3vb/uN3/lNy4/uTZoffX+b5ofmh+aH5ofmh+aH5ofmh+ZH
v2+X5ke/f5/mR6/nkOZHr++Y5kev95TmR6//nOZH7+eS5kfvbzU/er+r+dH7
v6b50fO4pfnR81nNj57Xan70/O5pfvQ8H2l+9HxX86Pn/Uzzo+f/SvOjz+Od
5kefz2p+aH7k+eOH5ofmh+aH5ofmh+aH5ofmh+aH5kfmM35ofmh+aH5ofmh+
aH5ofmh+aH5ofuR8xw/Nj3yPxg/ND80PzQ/ND80PzQ/ND82P/D7HD80PzQ/N
j3yPxw/ND80PzQ/ND80PzY+c7/hR/bn+33/w3b/9K3798qN7k+ZH39+m+aH5
ofmh+aH5ofmh+aH5ofnR79ul+dHv36f50es5pPnR6zum+dHrPaX50es/p/nR
+7mk+dH7W82P3u9qfvT+r2l+9DxuaX70fFbzo+e1mh89v3uaHz3PR5ofPd/V
/Oh5P9P86Pm/0vzo83in+dHns5ofmh95/vih+aH5ofmh+aH5ofmh+aH5ofmh
+ZH5jB+aH5ofmh+aH5ofmh+aH5ofmh+aHznf8UPzI9+j8UPzQ/ND80PzQ/ND
80PzQ/Mjv8/xQ/ND80PzI9/j8UPzQ/ND80PzQ/ND8yPnO35Uf67/+Zv+7H/x
x37r8qN7k+ZH39+m+aH5ofmh+aH5ofmh+aH5ofnR79ul+dHv36f50es5pPnR
6zum+dHrPaX50es/p/nR+7mk+dH7W82P3u9qfvT+r2l+9DxuaX70fFbzo+e1
mh89v3uaHz3PR5ofPd/V/Oh5P9P86Pm/0vzo83in+dHns5ofmh95/vih+aH5
ofmh+aH5ofmh+aH5ofmh+ZH5jB+aH5ofmh+aH5ofmh+aH5ofmh+aHznf8UPz
I9+j8UPzQ/ND80PzQ/ND80PzQ/Mjv8/xQ/ND80PzI9/j8UPzQ/ND80PzQ/ND
8yPnO35Uf65f/QP/+Pd/8+9afnRv0vzo+9s0PzQ/ND80PzQ/ND80PzQ/ND/6
fbs0P/r9+zQ/ej2HND96fcc0P3q9pzQ/ev3nND96P5c0P3p/q/nR+13Nj97/
Nc2PnsctzY+ez2p+9LxW86Pnd0/zo+f5SPOj57uaHz3vZ5ofPf9Xmh99Hu80
P/p8VvND8yPPHz80PzQ/ND80PzQ/ND80PzQ/ND80PzKf8UPzQ/ND80PzQ/ND
80PzQ/ND80PzI+c7fmh+5Hs0fmh+aH5ofmh+aH5ofmh+aH7k9zl+aH5ofmh+
5Hs8fmh+aH5ofmh+aH5ofuR8x4/qz/UTX/5Vn7+y/OjepPnR97dpfmh+aH5o
fmh+aH5ofmh+aH70+3ZpfvT792l+9HoOaX70+o5pfvR6T2l+9PrPaX70fi5p
fvT+VvOj97uaH73/a5ofPY9bmh89n9X86Hmt5kfP757mR8/zkeZHz3c1P3re
zzQ/ev6vND/6PN5pfvT5rOaH5keeP35ofmh+aH5ofmh+aH5ofmh+aH5ofmQ+
44fmh+aH5ofmh+aH5ofmh+aH5ofmR853/ND8yPdo/ND80PzQ/ND80PzQ/ND8
0PzI73P80PzQ/ND8yPd4/ND80PzQ/ND80PzQ/Mj5jh/Vn+v3fecXf0Oy/Oje
pPnR97dpfmh+aH5ofmh+aH5ofmh+aH70+3ZpfvT792l+9HoOaX70+o5pfvR6
T2l+9PrPaX70fi5pfvT+VvOj97uaH73/a5ofPY9bmh89n9X86Hmt5kfP757m
R8/zkeZHz3c1P3rezzQ/ev6vND/6PN5pfvT5rOaH5keeP35ofmh+aH5ofmh+
aH5ofmh+aH5ofmQ+44fmh+aH5ofmh+aH5ofmh+aH5ofmR853/ND8yPdo/ND8
0PzQ/ND80PzQ/ND80PzI73P80PzQ/ND8yPd4/ND80PzQ/ND80PzQ/Mj5jh/V
n+vf/eKPs/2h5Uf3Js2Pvr9N80PzQ/ND80PzQ/ND80PzQ/Oj37dL86Pfv0/z
o9dzSPOj13dM86PXe0rzo9d/TvOj93NJ86P3t5ofvd/V/Oj9X9P86Hnc0vzo
+azmR89rNT96fvc0P3qejzQ/er6r+dHzfqb50fN/pfnR5/FO86PPZzU/ND/y
/PFD80PzQ/ND80PzQ/ND80PzQ/ND8yPzGT80PzQ/ND80PzQ/ND80PzQ/ND80
P3K+44fmR75H44fmh+aH5ofmh+aH5ofmh+ZHfp/jh+aH5ofmR77H44fmh+aH
5ofmh+aH5kfOd/yo/lz/9y/7g3/vh//O8qN7k+ZH39+m+aH5ofmh+aH5ofmh
+aH5ofnR79ul+dHv36f50es5pPnR6zum+dHrPaX50es/p/nR+7mk+dH7W82P
3u9qfvT+r2l+9DxuaX70fFbzo+e1mh89v3uaHz3PR5ofPd/V/Oh5P9P86Pm/
0vzo83in+dHns5ofmh95/vih+aH5ofmh+aH5ofmh+aH5ofmh+ZH5jB+aH5of
mh+aH5ofmh+aH5ofmh+aHznf8UPzI9+j8UPzQ/ND80PzQ/ND80PzQ/Mjv8/x
Q/ND80PzI9/j8UPzQ/ND80PzQ/ND8yPnO35Uf67v/u//5o/vfmz50b1J86Pv
b9P80PzQ/ND80PzQ/ND80PzQ/Oj37dL86Pfv0/zo9RzS/Oj1HdP86PWe0vzo
9Z/T/Oj9XNL86P2t5kfvdzU/ev/XND96Hrc0P3o+q/nR81rNj57fPc2Pnucj
zY+e72p+9LyfaX70/F9pfvR5vNP86PNZzQ/Njzx//ND80PzQ/ND80PzQ/ND8
0PzQ/ND8yHzGD80PzQ/ND80PzQ/ND80PzQ/ND82PnO/4ofmR79H4ofmh+aH5
ofmh+aH5ofmh+ZHf5/ih+aH5ofmR7/H4ofmh+aH5ofmh+aH5kfMdP6pz/Zz4
0b1J86Pvb9P80PzQ/ND80PzQ/ND80PzQ/Oj37dL86Pfv0/zo9RzS/Oj1HdP8
6PWe0vzo9Z/T/Oj9XNL86P2t5kfvdzU/ev/XND96Hrc0P3o+q/nR81rNj57f
Pc2PnucjzY+e72p+9LyfaX70/F9pfvR5vNP80PzQ/ND8yPPHD80PzQ/ND80P
zQ/ND80PzQ/ND82PzGf80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND8
0PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND80PzQ/ND//H8+fuj/HxL2
VHs=
     "], {{{
        EdgeForm[], 
        GrayLevel[0.8], 
        GraphicsGroupBox[{
          PolygonBox[CompressedData["
1:eJws3WMULMm2hdGTrsysVNu2bdu2bdu2bdu2bdu23X2bN7+x1o8YcWJH7B2J
ilnVp+/rN+FG26+0XThixIj5dh4xIur7zfoW9I3Y1n1L+5b1bau+JR5v7nnW
b+P5Qd+2cCzu27aO5X07oG9j922cvm3ft6JvZd+28zzjHRwb9m1H91XfXu/b
Tn3rL2/Elq6deFz3renbrn1r+9b1bc++jdK3Ufu2m2Mj9W0vx0Zzvcr5+/Rt
9L6N0bf9+jZm38bq2y6uTd29nce6fb2Wdft7Lfd2oO9v3L4d3Lfx+jZ+307t
2wx9m7FvR/Rt4r5N0rfD+zaRx4d47QR9O9Lzk/btUMcm7NtRjk3Wt4O8D3sc
07fJ+zZF3472PONjHZuyb8e5n6pvh7keex/v2NR9O8H9NH07zdc7U99O7tt0
fZu+b6e4535O6tu0njvda2fu25l9m6Vvs/btnL7N3rc5+naia5Ozu9/JyH07
w3nknN232Zxzlmsw3sNrea/nut6cfTvP/Vx9u6Zvi/dtib5d0rf5+7ZA3y7s
2zx9m7dvlzq2YN8ucmy+vl3et4X6tnDfruzbIn1btG939W3Vvq3Wt8ucx7or
vJZ1V3ntYn272PXY+2rHuKZrfV1L9u2mvi3bt+X6dn3flurb0n27wf0yfbvO
a5m72WuX79utfVuhbyv27Y6+rdy3Vfp2p3uu9W5f7+p9u8V55Nzet5Wcc5tr
MH5jhM4Sn/d7nLdG354bofPGuX+ob+v2bb2+Pdi3dTx+oG9re/yw59fv272u
sWbfHu/bRn3buG+P9W1Dj8/3e5u7b4/2bQPPPeIajC/wPO/vPtdbq2/3u2fv
J1x7k749M0I24dALI+QXPj3rGPfzomP49PIIGYRJr42QO9jw6gh5xPipvm06
Qi4+7+dB3acdY79XXIOcl1ybujf6ffK+3/QzxqrJAj1Hnut7I2QWPr09QmZx
Pt5xz2f/fc/j0LuOkfOBYxj26Qg5i0MfjZBTePbJCDnF3C8jdOY56x86j3Uf
ey3rPnMNjPlihCzDp29HyC98+mqEbMKSr93j2Zdey9znrkH+d87DsJ9HyCOu
43vHcOvHEbIMt35yz7ofPM/cSIHOEufjV98Hrvw+Qh5h1V8j5Bcm/eEYbv3P
PR7/7Xns+dMxcv5xDMPCQNZgzH8j5BE+BYFcY+4378/e/zqPdVGgPD7jcaD+
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
ex6f7ox1Blbt28OxDMXUh2LZxPgO12bdg7GMY+4B12D8Uqzzxtm6y/Ww8273
7P2Ia+Pf47GMwIanY5mFYU84xtl7xjFMei6WO3jzYqwzz34vxHKN8aOujUMv
+1ow5jHH2O951yDnWdem7lOxzjrX8WosW7Hks1hnHgPejmUT9rwVyxTGb8Zy
jfE7nseq11wDsz+I9TsAy9+P9RuL8etJP9+3nfv2XizvmHvXNRi/4vvgml53
Pbx8wz17f+jaGPZJLINw4otYNuHQp45xP186hj1fx/IIe76L5QKufBvLIMYf
uTbmfe7nQd2PHWO/b1yDnK9c+zB/FvCV79HvXRtXfnCPW7/H8gWHfovlFOOf
Y50TPvt/eB57fnEM5/7nGG4NE51hztlfsWzC3T89z/hvx7DqH/dYsnGf+2/f
/9e3X137RI+xDJ+CRB7hR5LIKUwKE8XwLE0Uw6F/XZv8QSKnMKlI5BH28H9Y
Rm3qZonyWJcnWsu6MtFa7q1KdH/Y0ySyCZMmSnTmMWCURKbg0MiJbGLcJlqL
x6P1f74xljFdohjmjZ4ohkN1on3YY8xElmHPGInmGY+VKMZ31NiJekwaKVE9
9h4nUQxLxk3UY8/Eia4XkyZI5AVWTZio537GT2QKc5MkWos9kyXyCKumTOQL
BoyXqDY5UaJ3wnfOpInyyJkikXfkTJ6oBuM40Vre61SJ6uHH1Il63Joz0ZnE
iRkTOYUl0yX63YAlMyWK4db0iWI4N0sig3BrtkSWYefiic4Y52nmRHmsmzXR
WtbNnmgtts2QqB57z5EoxjXNlei6sGf+RE7h1jyJ7MCMeRP1uDV3orXMLZBo
LYYtlMggTFo0kV8Ys1iinmtdItH14s2CifLIWSSRceQsbNcY/xTrtwjneclE
eZi0VqLzxrlfPpEdmLRcIqcYL5vIMsYrJJrHm6US1cDpVRL5gisrJ7KM8TSJ
3hvfLSslco25FRPVYDxtonne39KJ6uHcMol69l41Ue0f+7ZGIptwaJ1EfuHT
moli3M+6iWL4tH4igzBpo0TuYMOGiTxivFqi2jyntRM9D+qunijGfhskqkHO
eolqU3eTRE5hyWaJnMKkmxI9O57lNol8waGtEznFeKtEljHe1vPYs7lrcIZ2
TGQr9uyQyCPGmybak/22T+Qac9u5BuMDE51/zv0Wrsc529I9e+/k2nizayKn
MGmvvo2ayKrdHMOVvR3Dqn0TeYRPByQyiP32T2QT451dGy8P8rXgxC6Osd9+
rkHOPq5N3d29J44eksgjrDo10TnEgKMS+YJJRyZyivERiYxjfLTn8eZQ18C5
4xNZgzHHJbJsKn8WjvGZOTaRWcwd4xqMD/Z9cE2HuR7fA4e7Z+8TXJtzcHIi
pzDp9ERO4c0pjnE/ZziGVWclMgirzk1kDf6dk8gjxie6NmfoND8P6p7kGPud
7RrknOna1OWfw/g7Lf5Oag8/Y767zk9kGT5dm8gazLg0kVN4c1Eiy+br22WO
4dbFjuHfFYkMwqSrElmGYXcnOm+crcudx7orvZZ1V3stNl/ieux9jWNc03W+
Lhy6OdE5w7AbEjmCHze65xxe77XM3eK1eHZbIo/w6c5EluHNXe651nt8vdhz
q/PIuSORd+Tc7hqMz/O74jne6zx8ei7R2ePcP5zIEXx6KJFZjB9M5BrjRzyP
Pfe5BmY/keg3E/Y8nsg1xhf4vfGd81gi45h71DUYX+h53t/9rod5D7hn7ydd
G2OeSeQRfryQyC88e9Yx7udFxzDs5UQGYdJrifzCmFcT+cX4KdfGy+f9PKj7
tGPs94prkPOSa1OXf0/O/w6I/w3QG4l8wZI26z83af8Z6duHiRzBpw8SmcX4
/USuMf7I89jzdiLj8OazRG5i1aeJXGO8TF/3877/om+fJDKOuY9dg/Gvic48
5/I395zFd1ybc/a5a+PH94n8wqevEtmEJd8lsoy5HxO5g0Pv9W1P38Mvifxi
v588f5yvj9p4+aV76v7gfaj1s9eS/0cim3CoSHXOOdN5qrPH+N9EdmDSP4mc
Yvx3IssY/+d5vPmf6+F0lOo84EqYyjLGy6a6Vq4xSOUac/wHJ6jB+Hc/P67v
T9fDub/cs3ecqjaf/SyVTThUproPjBmkinE/w1QxfKpTuYNPXSpfMK9NZRDj
JFVtzs3Xfj8Yn6aKsV+TqgY5Vara1P3Ga/ku+tY973WkVPtg2FipTMGhCVNZ
gxljpnKKuXFS+YI3o6Vyjd8X46dyClPHTTWPYTOkOkuc3elTnTfGY6fah1rj
pVpL/uip6uHoGKl69p4gVW2uaeJUBmHG5KnMwrBJUsXwY4pUMdyaKpU7ODRt
KrNwZZpUZjGeKNW9UnfGVNeLK9OlWst1T52qBjlTpqpN3eVSfXY4N4ukOtuc
9YX6P7+b6KzMkcojLJk9lSOMZ0tlFuN5Uv1dAJbMmso45kZN9V3Cs54zVQ0M
GznVe+P7ZJRUPevmSjWPeXOn6qk7U6p7wv6ZU/WYN0uqnv0Ws1mYtEAqjzBj
0VT3xNwSqazBnqVTOYUlS6VyivGSqeYZz5vqnt7s28KpngfPaL5Usbf6tniq
Pak7f6oYe0+a6n3yXbR8qmfMZ/+sVM+I57dKKr9wZeVUZjFeIdVaPvurpprH
sBVTxTgHq6WK4daWqc4w52yNVDZh2+qp5hmvmSqGr2ul6vH18FSfIT6bK6Wq
zXWsk8oObFsvlUf4sVEqv/Bs/VQxLNk4VQzD1k5Vm/xNU3mET5un8gvP1k1V
m7qbpMpj3WZey7otvJZ728r3hxnbpHIKk/ZLdc4xYMdUNuHHDqn8Yryt1+Lx
Tp7Hre0cw+ydHcOhrb0Pe+yayjJs28XzjHdzDId2d8/nenvXY+89HOMzvqd7
zsT+vl4s2SeVHZixr3vuZ+9UTjF3gNdi2EGpnMKeQ1P5gnl7uTY5G6R6J3y3
HOg8cg5J5R05B7sG4w1TreW9HuZ6fCaO8OcCn45P5RGWHJfKEcbHpjKL8Qme
x6ejUp2Byfp2SipDMfXkVDYxPtK1WXdSKuOYO9E1GF+c6rxxto52Pew8xj17
n+ra+HdGKiOw4ZxUZmHYmY5x9s51DJPOT+UO3lyU6syz34WpXGN8mmvj0CW+
Fow53TH2u8A1yDnPtal7dqqzznVcnspWLLkj1ZnHgGtT2YQ9/PZa3GN+iy3m
8XWex6orXAOzb0r1OwDLb0z1G4sxPvGbjn8evSGVd8xd7xqML+vbgr6mK10P
L69yz943uzaG3ZbKIJy4K5VNOHS7Y9zP3Y5hz72pPMKeB1K5gCv3pzKI8S2u
jXl3+nlQ91bH2O8+1yDnHtdew58FfOV79EHXxpWH3OPWk6l8waEnUjnF+NFU
54TP/lOex57HHMO5px3DrfdSnWHO2bOpbMLdZzzP+DnHsOp591gya/+7+oW+
f7Fvj7v2xh5jGT69nMoj/Hg9lVOY9IpjePaGYzj0gmuT/1YqpzDpnVQeYc9L
rk3dN53Hure9lnXvei339r7vD3s+TGUTJv2c6sxjwGepTMGhT1PZxPgjr8Xj
zz2PMR87hnlfOIZDH3gf9vgqlWXY86XnGX/tGN9R37jHpE9cj72/dQxLvnOP
Pb/4ejHpx1ReYNVP7rmfH1KZwtyvXos9v6fyCKv+TOULBnzv2uS86nfCd85v
ziPnf6m8I+cP12D8mtfyXv9yPfz42z1ulZnOJE6EmZzCkv9S/W7AkihTDLf4
j8gRw7kkk0G4lWWyDDvHzHTGOE9xpjzWpZnWsm6QaS22BZnqsXfR//nSVNc0
zHRd2NNlcgq36kx2YEaTqcetKtNa5kbKtBbDRslkECaNnskvjBkjU8+1jpXp
evFm5Ex55IyWyThyRs1Ug/EjqX6LcJ7HzpSHSdNkOm+c+wkz2YFJE2RyivH4
mSxjPFGmebwZJ1MNnJ4sky+4Mmkmyxj/4/fGd8skmVxjbuJMNRj/63ne37iZ
6uHceJl69p48U+2H+zZVJptwaLpMfuHT1Jli3M/0mWL4NGMmgzBplkzuYMPM
mTxiPEWm2jynaTM9D+pOmSnGfjNlqkHODJlqU3e2TE5hyRyZnMKkQzI9O57l
fJl8waF5MznFeJ5MljGeP9M89syZqQZnaOFMtmLPQpk8Yjx7pj3Zb8FMrjG3
QKYajFfKdP4593Nlqsc5mztTz978b82ojTeLZ3IKk5bOZBlWLZEphivLZIph
1XKZPMKnFTMZxH4rZLKJMf87Nmrj5cqZrgUnFssUY7/lM9UgZ9lMtam7ZKY9
cXTVTB5h1WaZziEGrJ3JF0xaK5NTjNfMZBzjdTLN481qmWrg3AaZrMGY9TNZ
9pc/Z3w3cmbWy2QWc+tmqsF4lUz3wTWtnqke3wNrZOrZe8NMtTkHm2RyCpO2
yOQU3myaKcb9bOkYVm2dySCs2j6TNfi3Xd9yjzfKVJsztLmfB3U3zhRjv21c
A8O2cm3qvuXfPvyd1FKZnjHve8dMluHT/pmswYzdMzmFN7tksoy/D9vDMdza
1TH82yuTQZi0TybLMOzYTOeNs7Wn81i3t9eybl+vxebdXI+993OMazrA14VD
h/qcYdhBmRzBj4Pdcw4P9FrmDvNaPDsik0f4dHQmy/DmGPdc63G+Xuw53Hnk
HJXJO3KOdA3GO/hd8RyPdx4+XZDp7HHuT83kCD6dksksxidnco3xaZ7HnhNc
A7PPyvSbCXvOzOQa45383vjOOSOTccyd7hqMd/Y87+9E18O8k9yz99mujTHn
ZfIIPy7K5Beene8Y93OxYxh2aSaDMOmKTH5hzOWZ/GJ8jmvj5YV+HtQ91zH2
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
zZnLAs70NLk8wp6pc5nFeIpcxmHbtLnmsWrKXDGcmy5XDJ8my1Ub52bIZRNW
TZ9rnvGMuWJYNVOuHqumylWPvWfOFcOtWXL1nIm5cl0v3syeyyx8miNXz/3M
lss15ubOtRZ75s1lEyYtkMsgnJs1V21yJs917dzzPLnyyJk/l3fkzJerBmO+
0/jNzu/1BXPVw7OFc3mEYUvk8gh7Fs1lGYYtlqvHsBVymcK5WTxXjJwlc+Vh
2HK5fMStpXLFcGuZXE7h1rK5etYtnWueueVz5bHHirn2waR1cxmBDSvn8gg/
VsnVY9iquXpsWy1Xj2Er5apBzuq5Yhi2Zi6ncGuNXDHG6+XaByfWyjWPYevk
8ovrWDtXjPFCuZ4lz3H9XHmYtHOu848Hm+WyCWM2zeUa44369s9Anm3uedza
OFcMs7dwDIcWyfWueDdb5XIK27b0POOtHeP3yzbusWqTXPXYe1vHOKPbucew
XXy9+LRjLpuwZCf33M8OuSxjblevxa3dc9mEVXvl8gh7tndtcjbI9WywfDfn
kbNnLsvI2cM1GC9T9p+Lov+s9G3ZUv2Xfdsvl024dXAumzDmoFyuMd7f83h2
iOdx6wDH8OZQx3DojFznmXN8eC6nsO0wzzM+wjFsPtI9Vn3ft6P6dnTfDnTt
cT3GGs7rsbmcwqQTc1mGVcc5hisnOTad603q/FNy2YRVp+WyCZOOcW3qnuw8
1p3qtaw73Wu5tzN9f1hydi6D8OnaXOefc3xBLo9w5fxcljE+x2sx7ELPY9W5
juH0RY5hz1nehz0uyWUTnl3secaXOoZJl7nnPJ3neux9uWNYdYV7zsF1vl6M
uTqXU5h0jXvu56pcljF3vdfizY25PMKhW3K5g21XujY5x/ud8D1zg/PIuTmX
ceTc5BqMT/Ba3uutrodht7nHoUdyGcE5uCeXR9hzZy7LMOxex/DpLsfw7P5c
HmHPg7k8wsWXc51hztl9zmPdA17Luoe8Ftvudj32ftgxrumxvm2Yy6Snc5mF
SU/k8gg/nnSPYY97LXPPeC1WPZfLI3x6MZdBePOSe671FV8vljzrPHJeyOUX
Oc+7BuMfcp0lPu+vOg+fPst13jj3b+cyBYfeymUT4zdzucb4Hc9jzGuugW0f
5Pr7nX369n4uvxjf7vfGd857uZxi7l3XYHyH53l/r7se9r/hnr0/dO19+/ZJ
Lptw6ItcfuHTp45xP186hk9f5zIIk77L5Q42fJvLI8YfuTYufu7nQd2PHWO/
b1yDnK9cm7pP+X3yvn/0M8aq+Qs9R57rb7nMwqefc5nF+fjFPZ/93z2PQ786
Rs4fjmHYP7mcxaE/czmFZ3/ncoq5YaEzz1n/n/NY95fXsu5f18AY/h8zYhk+
JYX8wqewkE1YEhXq8SwotJa5/1yD/LRQHoaVhTziOrJCMdzKC1mGW0WhnnWD
QvPMTV3oLHE+qkL3gStNIY+wauRCfmFSWyiGW12hHo9HKTSPPSMVipEzaqEY
ho1VyBqMGb2QR/g0ZiHXmKsL7c/eoxXKY93YhfL4jI9TqOezPG6hHpPGL2QQ
ZkxQqMetCQv1WDVRoR57xiuUR87EhWK4NWkhj3BrkkIxxnGhd8I7m6zQPFZN
UcgmvJy8UIzxVP2fH831fKcp9Izxic8+/+zBb4KZCpmCQzMWsonxdIX84vM+
c6F5jJm+UAzzZikUw6HFC50rztBshSzDsFkLzTOevVAMg+co1GPbDIXqsfec
hWK4NVehHnsWKHS2MGneQl5g1XyFes7ePIVMYW7BQmuxZ+FCHmHVYoV84Vrn
LlSbnGkLPRvueaFCeeQsWsg7chYpVIPxT7nOPWd7iUL3jVXrFDrbnOPlC9mB
ScsVcorx0oUsxp4VCs3jzTKFYji3YqEYbi1ZqDbmrVzINX5DrVRonvEqhWLY
v2qhHp+WLVSPvVcrFOPaVy/U49O6ha4XP9Yq5BGGrV2o537WLOQXc+sVWotJ
GxSyBpM2LmQNTqxRqDY5SxW6du55/UJ55GxUyDhyNixUg/EmhWpg1aaFehza
zD1WbV3IILzZopBZnI8t3WPbNp7Hm60cI2dbx/Bpp0LucO63L+QUnu1YyFbm
Dix05jnr2zmPdTt4Let2dg3c2rWQU/i0VyGDsGT3Qjbh2R7ucWs3r2VuF9cg
f2/nYdUBhQziOvZxbIy+7VfIL2zb3z3r9vU8c2/4+qh9kO8Dew4pZBZWHVHI
ILw51DHcOsw9bh3peXw63DFyjnIMk04oZDreHFPII3w6vpBHzB3s/dn7aOex
7kTncRZPco9DJ7vHnlMLeYFVp7nHsNPdY9UZ7vHpFOeRc6ZjmHR2Iacw6SzH
GO/pd8I7O8fzWHVeIZsw6VzHGJ/vGJZc4B6HLnSPVZcV8ghXLi5kFr8XLnGP
bdcVOueclUsdI+dy52HYNYWcxZsrHMOkqwo5hW1Xu2fdlZ5n7lrnscf13geH
7i7kAh7cWMggzLjJPW7d7B7PbnGPWze4Bjm3OoZbtxeyCatuc4zxPd4HG+7w
PG7dVcgsruNOxxgf17cpC31u7nUeDr1Q6Pxzvh8u5BGuPFTIMsb3F7IMwx7x
PFY94BhOP+oY9lzkd8W7ebyQTXj2mOcZP+EYPj3pHp8edD32fsoxrHra/eZ9
e9HXiz3PFXIKk553z/08W8gy5l7yWrx5pZBNePN6IbM4z8+4Njn3+dlwzy87
j5zXCllGzquusaPzcBQ33yxkA269XcgjrPqgkEF4834hyxi/43kM+9DzePOu
Y5yhjxzDp98KnW3O9CeFnMKzjz3P+FPHsPYz91j1nuux9+eO4ccX7jHsu0I2
4dDXhczCp2/cY9tXhVxj7nuvxZ6f+nZsoc/ar4X84lq/dG1y3vKz4bn84Dxs
+6WQa+T87BqMv/WeXNPvvm8MK0tZwJn+t5BH2PNPIbMY/1nIOGz7z/NY9Zdj
OMf/U3Vi+PSHa+NcWMomrApKzTOOSsWwKi7VY9XfrsfeSakYbqWles7EsNT1
4k1eyix8Kkr13M+glGvMVaXWYk9TyiZMGqmUQTiXlapNzv987dxzXSqPnK6U
d+S0pWow5p8LR/fv15FL1cOzUUt5hGFjlfIIe0YvZRmGjVGqx7CJSpnCuRmz
VIycsUvlYdgEpXzErXFKxXBrvFJO4db4pXrWjVtqnrkJS+Wxx8Sl9sGk6UsZ
gQ2TlvIIPyYr1WPY5KV6bJuiVI9hk5SqQc6UpWIYNnUpp3BrqlIxxjOU2gcn
pik1j2HTlfKL65i2VIzxKKWeJc9xxlJ5mLRIqfOPB7OXsgljZivlGuOZS7mG
Z3OUmsetWUrFMHvOUjEcGq3Uu+LdzF3KKWybq9Q843lKxfj9Mm+pHqtmLVWP
vecrFeOMzl+qx7BFS10vPi1UyiYsWbhUz/0sWMoy5hYrtRa3lihlE1YtXcoj
7FmgVG1yZir1bLjnxUvlkbNUKcvIWbJUDcb8NzP4bwLx3wxarpQvmHRP1X8n
9m2Nvq1SyiaMWbmUa4xXKOUanq3W//nHQm6tWCqGN6uXiuHQVqXOM+d4zVJO
YdsapeYZr1Uqhs1rl+qx6sH+z+v0bd2+rVSqNtfBGGs4r+uXcgqTNi5lGVZt
UCqGK5uUio1wPWqTv1kpm7Bqi1I2YdJ6pWpTd9NSeazb3GtZt6XXcm9b+/6w
ZNtSBuHT/qXOP+d4p1Ie4cqOpSxjvJ3XYtjOnseq7R3D6V0cw55tvA977FbK
Jjzb1fOMd3cMk/Zwz3nawfXYe0/HsGov95yDA3y9GLNvKacwaT/33M8+pSxj
7kCvxZuDS3mEQ4eVcgfb9nZtcjYs9U74njnIeeQcWso4cg5xDcYblVrLez3c
9TDsCPc4dFopIzgHx5XyCHuOLmUZhh3vGD4d4xienVjKI+w5uZRHuHhJqTPM
OTvBeaw7yWtZd4rXYtuxrsfepzrGNZ3u68Kkc0qZhUlnlvIIP85yj2FneC1z
53otVp1fyiN8uqiUQXhzsXuu9VJfL5ac5zxyLizlFzkXuAbjh0qdJT7vlzkP
n24vdd4499eUMgWHri5lE+OrSrnG+FrPY8zlroFtN5b690D8+58bSvnF+Ei/
N75zri/lFHPXuQbjozzP+7vC9bD/SvfsfZNrY9itpWzCobv6tmopn25zjPu5
2zF8ureUQZj0QCl3sOH+Uh4xvtm1l+/bHX4euHiLY+x3n2uQc49rU/dsv0/e
98N+xljVDvUcea5PlDILnx4tZRbn4zH3fPaf9DwOPe4YOU85hmHPl3IWh54p
5RSePVfKKebeK3XmOetPO491z3ot615wDYx5qZRl+PR6Kb/w6ZVSNmHJq+7x
7GWvZe5F1yD/Dedh2LulPOI63nQMt94uZRluveOedW95nrm/S50lzsf7vg9c
+bCUR1j1aSm/MOkjx3DrY/d4/JnnsecTx8j53DEM+6aUNRjzZSmP8OnrUq4x
94H3Z+8vnMe6b53HZ/w793yWv3ePST+WMggzfnKPWz+7x6pf3GPPD84j51fH
cOv3Uh7h1m+OMX7N74R39ofnserPUjbh5f8cY/yXYzzff/yM8Wm8/nfAnf3n
9a6+RUOZgkPhUDYx/q+UX3ze46HmMWbEUDHMS4aK4dAYQ50rzlA2lGUYlg41
z3gwVAyD86F6bAuGqsfexVAx3CqH6rGnG+psYVI9lBdY1QzVc/aqoUxhbqSh
1mLPKEN5hFWjD+UL1zocqjY5//rZcM8jD5VHzmhDeUfOqEPVYPxIqXPP2R5z
qPvGqumGOtuc4wmHsgOTJhjKKcbjDGUx9kw01DzejNf/+c5Szk08VAy3xhqq
NuZNOpRr/IaaZKh5xpMNFcP+yYfq8Wn8oeqx9xRDxbj2KYfq8Wn6oa4XP6YZ
yiMMm3aonvuZeii/mJthqLWYNNNQ1mDSrENZgxNTDVWbnLGHunbuecah8siZ
ZSjjyJl5qBqMZxuqBlbNPlSPQ3MM1WPVvEMZhDdzDWUW52PuoXpsm2+oebyZ
Z6gYOfMPFcOnRYZyh3O/4FBO4dnCQ9nK3MpDnXnO+gJD5bFuoaHWsm7RoWrg
1uJDOYVPywxlEJYsOZRNeLbUUD1uLTHUWuYWG6oG+csOlYdVKw1lENex3FCx
r/q2wlB+YduKQ/WsW36oeeauGur6qL3KUPeBPasNZRZWrTWUQXiz+lAx3Fpj
qB631h5qHp/WHCpGzjpDxTBpw6FMx5v1hvIInzYYyiPmVh1qf/Zed6g81m00
VB5nceOhehzaZKgeezYbygus2tw9hm3hHqu2dI9Pmw6VR85WjmHSNkM5hUlb
O8Z46aHeCe9sW89j1fZD2YRJ2znGeAfHsGRH9zi0k3us2n0oj3Bll6HM4vfC
ru6xbf+hzjlnZTfHyNnDeRi271DO4s2ejmHS3kM5hW37uGfdXp5nbj/nsccB
3geHjh3KBTw4eCiDMOMQ97h1qHs8O8w9bh3Ut3Gdc7hjuHXkUDZh1RGOMT7O
+2DDUZ7HrWOGMovrONoxxusP9dnhc3O883DooqHOP+f71KE8wpVThrKM8YlD
WYZhp3keq05yDKdPdwx7dva74t2cOZRNeHaG5xmf5Rg+ne0en052PfY+xzGs
Otf9nH272NeLPRcM5RQmXeie+zl/KMuYu8Rr8eayoWzCmyuHMovzfJ5rk3OC
nw33fKnzyLliKMvIudw1FnYejuLm1UPZgFvXDuURVt00lEF4c+NQljG+zvMY
drPn8eZ6xzhDtziGT48PdbY507cN5RSe3ep5xrc7hrV3uMeqG1yPve90DD/u
co9hDwxlEw7dO5RZ+HSfe2y7ZyjXmHvQa7Hn4aGc4rP22FB+ca13uzY51/jZ
8Fwech45jw7lGjmPuAbj+70n1/SE7xvD3hnKAs7080N5hD3PDWUW46eHMg7b
XvA8Vj3jGM696Bg+PenaOPfyUDZh1UueZ/yKY1j1qnusetb12Ps1x3Drdfec
iXd9vXjz1lBm4dPb7rmfN4dyjbn3vBZ7PhjKJkz6eCiDcO4N1ybnKV879/y+
88j5aCjvyPnQNRjzncZvdn6vf+J6ePb5UB5h2DdDeYQ9Xw5lGYZ95R7DfhnK
FM7N146R863zMOynoXzEre8cw60fhnIKt350z7rvPc/cz85jj1+9DyYFlYzA
ht+H8gg//nCPYf9zj21/usew31yDnL8cw7B/hnIKt/52jHFYaR+c+NfzGDai
kl9cx3+OMf6sbwf6OUaV8jBptErnHw/ySjZhzKCSa4yTSq7hWVFpHrfSSjHM
LivFcOgLvyveTVXJKWwbVppnXFeK8fulqdRjVVapHnu3lWKc0a5Sj2GjV7pe
fBqlkk1YMmqlnvsZuZJlzI1RaS1ujVXJJqwat5JH2DNSpdrkxJWeDfc8ZqU8
csapZBk5Y1eqwZj/O13+Gwb89wv4Owb+Xpa/b52wkk24NVklmzBm0kquMZ6o
0jyeTV5pHrcmrhTDmykqxXBo7krnmXM8VSWnsG3KSvOMp64Uw+ZpKvVYdVL/
52n7Nl3fJqlUm+tgjDWc1xkqOYVJs1SyDKtmrBTDlVkrxbCKetQmf/ZKNmHV
nJVswqTpK9Wm7myV8lg3R6W1rJur0lrubZ5K94cl81UyCJ9WrHT+OccLV/II
VxaqZBnj+SutxbBFKs1j1QKVYji9aKUY9sxbaR/2WLySTXi2WKV5xktUimHS
Uv2fPx3qPC1YqR57L10phlXLVOo5BytVul6MWb6SU5i0QqWe+1mukmXMrVxp
Ld6sWskjHOLv93EH25atVJucmSq9E75nVqmURw7/TgDjyFmtUg3GM1day3td
s1I9DFurUo9DW1QygnOwQSWPsGfdSpZh2IaVYvi0XqUYnm1cySPs2bSSR7i4
W6UzzDnbqFIe6zaptJZ1m3kttq1fqR57b+4Y17SlrwuTtqtkFiZtXckj/NjG
PYZt5bXMbe+1WLVjJY/waZdKBuHNru651t19vViyg/PI2bmSX+Ts5BqMT/bZ
4vO+h/Pw6UifN879fpVMwaF9K9nEeJ9KrjHe3/MYs6drYNvBlf5+Z/y+HVTJ
L8ZrV3pvfOccWMkp5g5wDcbrVJrn/e3leti/t3v2PsS1J+jb4ZVswqGjK/mF
T0c4xv0c4xg+HVfJIEw6sZI72HBCJY8YH+rauHiUnwd1D3OM/Y53DXKOdW3q
buv3yfs+xc8Yqz7yc+S5nlnJLHw6rZJZnI/T3fPZP8vzOHSGY+Sc7RiGXVDJ
WRw6t5JTeHZ+JaeYu6HSmeesn+M81p3ntay70DUw5uJKluHTFZX8wqdLK9mE
JZe5x7NLvJa5i1yD/Cudh2HXV/KI67jKMdy6ppJluHVd35b0uqs9z9xzlc4S
5+NG3weu3FzJI6y6vZJfmHSLY7h1q3s8vsPz2HObY+Tc6RiG3VfJGoy5u5JH
+HRvJdeYu8n7s/ddzmPd/c7jM/6Aez7LD7rHpIcrGYQZj7jHrUfdY9Vj7rHn
IeeR87hjuPVkJY9w6wnHGF/ud8I7e8rzWPVMJZvw8mnHGD/rGM/3eT9jfOKz
zz978Jvg1Uqm4NArlWxi/GIlv/i8v+Z5jHnJMcx73TEc+qrSueIMvVnJMgx7
w/OM33IMg992j20vux57v+MYbr3rHns+rnS2MOmDSl5g1YfuOXvvVzKFuU+8
Fns+q+QRVn1ZyReu9T3XJucFPxvu+VPnkfNFJe/I+dw1GJ9a6dxztr/2fWPV
f5XONuf4p0p2YNKPlZxi/F0li7HnZ8/jzfeO4dwvjuHWN66Neb9Vco3fUL96
nvHvjmH/H+7x6QfXY+//Oca1/+ken0bUul78+KeSRxj2r3vu5+9KfjEX1FqL
SVEtazAprWUNTvzl2uR862vnnsNaeeQktYwjJ65Vg3FWqwZWDWr1OJTX6rGq
rmUQ3pS1zOJ8DGv12NbUmsebqlaMnLZWDJ9Gq+UO537kWk7h2ai1bGVu0lpn
nrM+Uv/nayutG6XWWtaNXqsGbo1Zyyl8Gq+WQVgydi2b8GycWj1ujVVrLXNj
1KpB/vi18rBqkloGcR0T1Irxv7mYqJZf2DZxrZ51E9aaZ26fWtdH7clq3Qf2
TFHLLKyappZBeDNlrRhuTVWrx61pa83j09S1YuRMVyuGSTPXMh1vZqjlET7N
VMsj5iavtT97T18rj3Wz1MrjLM5aq8eh2Wr12DNHLS+was5aPYbNVavHqrlr
9fg0e608cuapFcOk+Wo5hUnz1ooxHrfWO+GdzV9rHqsWrGUTJi1QK8Z4oVox
LFm4Vo9Di9TqsWrJWh7hymK1zOL3wuK1emxbsdY556wsUStGzlK18jBs+VrO
4s3StWKYtGwtp7BtuVo965apNc/cCrXy2GOlWvvg0Hq1XMCDVWoZhBmr1upx
a7VaPZ6tXqvHrZVr1SBnjVox3Fqrlk1YtWatGOP1a+2DDWvXmsetdWuZxXWs
UyvGeMZanx0+NxvUysOhnWudf873ZrU8wpVNa1nGeKNalmHY5p7Hqo1rxXB6
C8ewZ9Fa74p3s1Utm/BsS88z3toxfNrGPT5tUqsee2/rGFZt577o2y6+XuzZ
sZZTmLSTe+5nh1qWMbdb37pa3uxRyya82buWWZzn7V2bnA1rPRvueXfnkbNX
LcvI2dM1RnUejuLmvrVswK39a3mEVYfUMghvDq5lGeMDPI9hh3oebw50jDN0
mGP4dGats82ZPqKWU3h2uOcZH+kY1h7lHqsOcj32Ptox/DjGPYadVMsmHDq+
lln4dIJ7bDuulmvMney12HNqLaf4rJ1Ryy+u9VjXJmc/PxueyynOI+f0Wq6R
c5prMD7Re3JNZ/m+Mey6WhZwpi+s5RH2XFDLLMbn1jIO2y7yPFad5xjOXewY
Pp3t2jh3aS2bsOoSzzO+zDGsutw9Vp3veux9hWO4daV7zsT1vl68uaaWWfh0
rXvu5+parjF3g9diz021bMKkW2sZhHNXuTY55/jauecbnUfOLbW8I+dm12DM
Pxfy9/L8fr3N9fDsjloeYdi9tTzCnrtqWYZhd7vHsEdrmcK5uccxcu5zHoY9
XMtH3LrfMdx6sJZTuPWQe9Y94HnmHnEeezzmfTDppVpGYMMTtTzCjyfdY9hT
7rHtafcY9rhrkPOMYxj2XC2ncOtZxxi/7H1w4nnPY9iLtfziOl5wjPHtfpY8
x1ech0lf1Dr/ePB2LZsw5q2+7erxa7Vcw7N3PI9brzuG2e86hkN3+l3xbt6v
5RS2ved5xh84xu+XD91j1Ruuh6kfOcYZ/dg9hn3p68Wnz2rZhCWfu+d+Pq1l
GXNfeS1ufVPLJqz6vpZH2POJa5Pzqp8N9/y188j5rpZl5HzrGox/cA3c+qmW
L5i077i9vX0bs2//q+ULJv1RyynGv9cyjvGfnsebX2p5h3P/1nIWb/6pZRnj
TZr+u6nvR/T937XMYu4v12BcNTr/nPu6Uc8Z/dW18ew/18abrJFNOBQ2Mguf
0kauMZc3MgiTfnMN7mHYyCD2KxrNX+brozYeBI166g4a7UOtstFa8ttG7mDS
RI3OPGd3wkbnmfFojUzBoVEb2cR4lEauMR690TzGdI3qYdvYjXzhTIzVyC/G
mza6Vq5xzEZOMTdGoxqMm0bPj+sbqVE97B+5Uc/e4zSqjVvjN3IKnyZudB94
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
p9rUXa5THutW6LSWdSt1Wsu9rdLp/jBjtU5OYdIWnc45BqzdySb8WKuTX4xX
77QWj9fpNI9ba3SKYfa6nWI4tGqnfdhj/U6WYdt6neYZb9AphkMbdur5XK/Z
qR57b9Qpxmd84049Z2JLXy+WbNbJDszY3D33s2knp5jbymsxbJtOTmHP9p18
wbxNOtUmZ6lO74Tvlq2dR852nbwjZ1vXYLx0p7W81x1cj8/ETv5c4NOenTzC
kj06OcJ4905mMd7L8/i0S6cz0PZtv06GYuq+nWxivLNrs26fTsYxt7drMD62
03njbO3qeti5m3v23t+18e+gTkZgw2GdzMKwgx3j7B3uGCYd2ckdvDmm05ln
v6M7ucb4ANfGoeN8LRhzoGPsd5RrkHOEa1P30E5nnes4oZOtWHJRpzOPAad3
sgl7+O01o8endHINY87wPFad6BqYfU6n3wFYfnan31iM8YnfdPzz6FmdvGPu
TNdgfLzvg2s6yfXw8mT37H2ua2PYBZ0MwolLOtmEQxc6xv1c6hj2XN7JI+y5
qpMLuHJlJ4MYn+famHexnwd1z3eM/a5wDXIuc+2F/FnAV75Hr3ZtXLnGPW7d
3MkXHLqpk1OMr+90Tvjs3+J57LnBMZy71THceqLTGeac3d7JJty9zfOM73AM
q+50jyXj9/98eFff3923G117WY+xDJ/u7eQRfjzYySlMus8xPHvIMRy6y7XJ
f6STU5j0WCePsOce16buw85j3aNey7rHvZZ7e9L3hz1Pd7IJk97tdOYx4IVO
puDQ851sYvyM1+Lxi57HmGcdw7yXHMOhp7wPe7zSyTLsednzjF91jO+o19xj
0nOux96vO4Ylb7jHnvd8vZj0dicvsOod99zPW51MYe59r8WeDzt5hFWfdPIF
A950bXLu9zvhO+cD55HzcSfvyPnINRg/4LW8109dDz8+c49bv3Q6kzjxTSen
sOTLTr8bsORbx3DrK8dw7vtOBuHWj50sw85oJJ0xztN3zmPdD17Lup+8Ftu+
dj32/tkxrulXXxf2/NXJKdz6vZMdmPGHe9z6zWuZ+9trMezfTgZhUjCS/MKY
cCT1XGs8kq4Xb/5xHjkjRpJx5PznGoyv6/RbhPOcjKS8/7Nsj2GMLFsUho/N
NtNJ59i2bdu2Nce2bdu2bdu2bdz+7lo/8tTsXVW7ujvZbzJzz8WkJFC/0ffj
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
DGUQ8faujXm7+HlQdwfnOG8P12DPCNcO/VnAV75H93ZtXNnHI24dHMoXHDoo
lFPE+4fqEz77h3geew5wDucOdQ63zgzVw/TZ4aFswt3DPE98ZPeaNJRVR3nE
kh+619Hd65judaBr9xxjGT4dF8oj/DgplFOYdLxzeHayczO43uTef2oopzDp
9FAeYc+xrk3dU7yPdad5LevO8Fru7SzfH/acE8omTLouVM9jwIWhTMGhC0LZ
RHyu1+LxRZ7HmPOcw7yLncOhs30OZ1wayjLsucTzxJc5x3fU5R4x6XzX4+wr
nMOSKz1iz/W+Xky6JpQXWHWtR+7n6lCmMHeD12LPTaE8wqpbQ/mCAVe5NntO
8HvCd86N3seeW0J5x56bXYP4RK/lfb3N9fDjdo+49WionsSJe0M5hSV3hfrd
gCX3OYdbdzuHcw+EMgi3HgplGXa+HKrH6Kf7vY91D3ot6x72Wmy7x/U4+xHn
uKbHfF3Y83Qop3DriVB2YMaTHnHrca9l7hmvxbDnQhmESS+G8gtjXvLItb7i
68WbZ72PPS+EMo49z7sG8X6hfovQz696HyZ9Fqrf6Pu3Q9mBSW+Fcor4zVCW
Eb/jebx5zTVw+oNQvuDK+6EsI77D7xvfLe+Fco25d12D+E7P8/697no494ZH
zv7QtfftXp+EsgmHvgjlFz596hz386Vz+PR1KIMw6ftQ7mDDd6E8Iv7ItXlO
n/t5UPdj5zjv2+51hPd85drU/TGUU1jycyinMGn+SM+OZ/lnKF9w6I9QThH/
Hsoy4r88jz2/uAY99F8oW7Hn31AeEf/kMznvn1CuMfe3axBPEKn/6ftfXY8+
+80jZ/MdSG28GTWSU5g0ZiTLsGq0SDlcGStSDqvGieQRPo0fySDOGy+STcR8
v1IbLyeMdC04MUqkHOeNG6kGe8aOVJu6o0c6E0cnjuQRVrWR+hAD0ki+YFIS
ySniOJJxxFmkebwJItXAuSqSNRhTRrLsNn8W+G6kZ4pIZjGXR6pBPFGk++Ca
wkj1+B6IIo2cXUeqTR/0IzmFSZNEcgpvBpFy3M+kkXJYNXkkg7BqqkjW4N+U
kTwi7kWqTQ8NIz0P6jaRcpw3RaQa7JksUm3q8vcw/i2ef5MaI9Iz5v2eJpJl
+DRXJGswY6ZITuHN9JEse6p7zRwph1szRMrh36yRDMKk2SNZhmFLROo3emuW
SPtYN1uktaybI9JabJ4xUj3OnjNSjmuaO9J14dACkfoMw+aN5Ah+zBdppA/n
ibSWuQUjrcWzhSN5hE+LRbIMbxaPNHKtS0a6XuxZKNI+9iwayTv2LBKpBvHU
kd4rnuNSkfbh0zqReo++XyGSI/i0fCSziJeL5BrxSt2fvwllz9KRamD2apF+
M2HPqpFcI5420vvGd84qkYxjbuVINYinizTP+7dMpHqYt2ykkbNXj1QbY9aK
5BF+rBfJLzxbO1KO+1k/Ug7DNoxkECZtEskvjNk4kl/Ea0SqjZfrRnoe1F0z
Uo7zNopUgz0bRKpNXf5dYQZ/djfz7/f/WxJ3n5vuNWf32i6SI/i0bSSziLeJ
5Brx9p7Hni0jGYc3O0dyE6t2iuQa8Rvda5futWv32jGScczt4BrEB0bqefry
II/04lauPYZrUBs/9o7kFz6NiGQTluwVyTLm9o3kDg5t7RrcwwGR/OK8/Txf
+vqojZe7eaTuPj6HWvt7LfsPiWQTDp0Wqc/p6VMj9R7xUZHswKQjIzlFfEQk
y4iP9jzeHOp6OH18pH7AleMiWUb8pq+Vazw2kmvMHeMaxAf7+XF9h7kezh3u
kbNPcG0++ydHsgmHTvd9YMwpznE/ZziHT2dFcgefzo3kC+adE8kg4hNdm77Z
3e8Pxp/kHOed7RrsOdO1qbuH1/JdtKdH3tfzfA6GXRbJFBy6NpI1mHFpJKeY
uyKSL3hzUSTX+H1xdSSnMPVKz2PYvZF6id69J1K/EV/uc6h1ldey/2LXw9FL
PHL2Na7NNV0fySDMuDmSWRh2g3P4cWv3WjGSW7dHcgeH7opkFq7cGcks4ut8
r9S9z9eLK3d7Ldd9h2uw5zbXpu5bkT479M0LkXqbXn8uUr/RK49G8ghLHonk
CPHDkcwifjLSvwVgyUORjGPuwkjfJTzrx1wDw873+8b3yQUeWfe45zHvCY/U
vd/3hP0PeMS8Bz1y3kuRzMKkZyN5xD286Hti7pVI1mDP65GcwpLXIjlF/Krn
iZ/yPW3evZ738+AZPe3cFt3rZZ9J3Wec4+wb/X7yXfS2nzGf/SliPSOe3weR
/MKV9yOZRfyO1/LZ/9DzGPauc/TBR87h1q+Repg++ySSTdj2seeJP3UOXz/z
iK9RrM8Qn833XJvr+CKSHdj2VSSP8OO7SH7h2dfOYcn3zmHY567N/h8jeYRP
P0fyC8++dG3q/uB9rPvJa1n3i9dyb7/5/jDjj0hOYdK4sfocA/6NZBN+/BPJ
L+I/vRaP//M8bv3lHGaPFCuHQ7/7HM4YJZZl2DZyrHniUWPlcGi0WCOf679d
j7NHj5XjMz5GrJGeGC/W9WLJ2LHswIxxYo3cz1ixnGJu/FhrMWzCWE5hTxDL
F8wbM1Zt9nzj94Tvlgli7WPPxLG8Y89EsWoQf+u1vK9hrHp8JuJYnwt8qmN5
hCVVLEeIy1hmEfdizeNTGqsHbupebSxDMXUQyybiJFZt1vVjGcdcE6sG8Yyx
+o3eymLVw86i+/Mtkc4exqqNf5PFMgIbpoplFoZNHitH700dK4dJ08ZyB29m
iNXznDd9LNeIJ4lVG4dminUtGDNprBznTRerBnumiVWbulPG6nWuY5ZYtmLJ
orF6HgPmimUT9vDbC1OI+S2Ga8Rzx5rHqllj1cDs+WP9DsDy+WL9xiLGJ37T
8ffReWN5x9w8sWoQzxzrPrim2WLVw8vZY42cvUCs2hi2cCyDcGLxWDbh0CKx
ctzPErFy2LNULI+wZ9lYLuDKMrEMIl4wVm3MWyzW86DuQrFynLd0rBrsWTJW
7U/82cJXvkeXi1UbV5aPNeLWarF8waFVYzlFvFKsPuGzv3qseexZOVYO59aI
lcOtrWP1MH22ViybcHfNWPPEa8fKYdU6sUYsebD787rda73utUqs2lwHMZbh
0waxPMKPTWI5hUkbxsrh2aaxciO7HrXZv3kspzBpy1geYc/6sWpTdzPvY90W
Xsu6rbyWe9vG94c928WyCZMOiNXzGLBzLFNwaKdYNhFv77V4vIvnMWYH5zBv
V+dwaFufwxkjYlmGPbt5nnh35/iO2sMjJu3oepy9p3NYspdH7DnQ14tJ+8Xy
Aqv298j97Nu9cs8d5LXYc0gsj7Dq8Fi+YMDero1DG8V6T/jOOdj72HNYLO/Y
c6hrEG8cay3v6xGuhx9HesSt02P1JE4cH8spLDkm1u8GLDnBOdw61jmcOymW
Qbh1SizLsPPSWD1GP53ofaw72WtZd6rXYttxrsfZpznHNZ3h68Kec2M5hVtn
xbIDM872iFtnei1z53kthl0QyyBMujiWXxhziUeu9TJfL96c733suSiWcey5
0DWIV4z1W4R+vtz7MOmOWP1G318byw5MuiaWU8RXx7KM+DrP480VroHTN8Xy
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
PPZMmiqHc1OlyuHWvKl6mD6bJpVNuDt1qnniaVPlsGq6VCOWnNz9efruNUP3
mixVba6DGMvwaaZUHuHHbKmcwqSZU+XwbPZUORyiHrXZP2cqpzBp7lQeYc+M
qWpTd45U+1g3V6q1rJsn1Vrubb5U94c9C6SyCZNWStXzGLBoKlNwaJFUNhEv
mGotHi+Wah5jFkqVw7zFU+VwaP5U53DGkqksw54lUs0TL5Uqx3fU0qlGTFo4
VT3OXiZVDkuWTTViz8qprheTVkjlBVatmGrkfpZPZQpzq6Raiz2rpfIIq9ZM
5QsGLJeqNntmSfWe8J2zaqp97FkjlXfsWT1VDeJZU63lfV0rVT38WDvViFtb
pupJnNgwlVNYsl6q3w1YslGqHG6tnyqHc5ukMgi3NktlGXbunqrH6KeNU+1j
3aap1rJuc6/Ftg1S1ePsLZzjmrbydWHP9qmcwq1tUtmBGdt6xK2tvZa5HbwW
w3ZOZRAm7ZbKL4wZ4ZFr3cPXizc7da/xvWfXVMaxZxfXIB6m+i1CP+/pfZh0
lPuNvt8/lR2YtF8qp4j3TWUZ8QGex5u9XAOnD0nlC64cnMoy4nVSvW98txyU
yjXmDnQN4nVTzfP+7e16OLePR84+1LXb7nVEKptw6JhUfuHTkc5xP8c6h0/H
pzIIk05K5Q42nJjKI+LDXJvndLSfB3UPd47zTnAN9hzn2tQ9JZVTWHJaKqcw
6SM/O57lOal8waGzUzlFfFYqy4jP9Tz2nO4a9NCFqWzFngtSeUR8qs/kvPNT
ucbcea5BfEOq/qfvz3A9+uxMj5x9kWvjzaWpnMKkK1NZhlWXOYcrVzmHVdek
8gifrk9lEOddl8om4otdGy9v9LXgxCXOcd61rsGeq12bupf7TBy9OZVHWPVI
qj7EgDtT+YJJd6Ryivj2VMYR3+V5vLnFNXDuvlTWYMy9qSwj5rPAdyM9c08q
s5i72zWIb/J9cE23uh7fA7d55Oz7XZs+eCiVU5j0WCqn8OZh57ifx53DqidT
GYRVz6SyBv+eTuUR8QOuTQ896udB3Qed47ynXIM9T7g2dd/KO1+614judYWf
Me/3c6ksw6d3U1mDGa92rx1TefNiKsu2616vOYdbLzmHf2+kMgiT3kplGYZ9
narf6K3XvY91b3ot6972Wmx+2fUw8h3nuKb3fF049HGqPsOwD1I5gh8feqQP
3/da5j7xWjz7LJVH+PRlKsvw5iuPXOs3vl7s+dT72PNFKu/Y87lrED/r94rn
+K334dN/qXqPvv85lSP49FMqs4h/TOUa8S+ex57vXAOz/0j1mwl7fk/lGvHz
ft/4zvktlXHM/eoaxC94nvfve9fDvB88cvafro0x/6TyCD9GzuQXnv3rHPcz
SqYcho2WySBMGjOTXxgzRia/iP9ybbwcKdPzoO7fznHe6JlqsGfUTLWpy+eL
70++X8fO5Mv/Lek+x2918dvda+JMjuDTRJnMIp4wk2vEQaZ57Bkvk3F4k2Ry
E6viTK4R7939Oe1eWfeKMhnHXJipBvGkmXqevpws00gvjp+pNn1GDWrjR5PJ
L3wqMtmEJb1MljE3yOQODk2QqQb3MEkmvzivzTSPYVwftfEyzzRSt5/pHGoN
M61l/xSZbMKhuTP1OT09V/fnV1LF02WyA5OmzeQU8TSZLCOePtM83kyZqR5O
z5ypH3BlpkyWEe/jZ8k1zpjJNeZmyFSDePJMz4/rmypTPZybOtPI2bNkqs1n
f/ZMNuHQPJnuA2PmyJTDknkz5fBp/kzu4NNCmXzBvAUzGUQ8a6ba9E2Z6f3B
+Nky5ThvgUw12DNfptrUrTKt5buozjTyvi6c6RwMWzqTKTi0UiZrMGOpTE4x
t2wmX/Bm8Uyu8ftihUxOYepymeYxbMNMvUTvbpCp34iXyXQOtZbPtJb9S2Sq
h6NLZho5e8VMtbmmVTIZhBlrZDILw1bNlMOPNTPlcGvtTO7g0HqZzMKVdTOZ
Rbxypnul7kaZrhdX1s+0luteJ1MN9qyVqTZ19/Vnh77ZJVNv0+s7Zeo3emXL
TB5hyRaZHCHePJNZxNtm+rcALNksk3HMLZbpu4RnvZVrYNgimd43vk8WzTSy
bmvPY942Hqm7caZ7wv5NMo2Yt2mmkfN2y2QWJu2YySPuYVffE3O7Z7IGe/bK
5BSW7JnJKeI9PE+8ne9pnO61s58Hz2h758btXiN8JnV3cI6zV8v0fvJdtJ+f
MZ/9p/yMeH4HZ/ILVw7KZBbx/l7LZ/8Qz2PYAc7RB4c6h1tnZOph+uzwTDZh
22GeJz7COXw90iO+3p7pM8Rn80DX5jqOzmQHth2bySP8ODGTX3h2nHNYcpJz
GHaUa7P/lEwe4dNpmfzCs2Ncm7onex/rTvVa1p3utdzbmb4/zDg7k1OYdF2m
PseACzPZhB8XZPKL+NzuNWcmjy/yPG6d5xxmX+wcDp3lczjj0kyWYdslnie+
zDkcutwjn+vzXY+zr3COz/iVHumJ6329WHJNJjsw41qP3M/VmZxi7gavxbCb
MjmFPbdm8gXzrnJt9hzv94Tvlhu9jz23ZPKOPTe7BvEJXsv7epvr8Zm4I9Pn
Ap/uz+QRltyXyRHiezOZRfyA5/Hprkw9sHr3eiSToZj6cCabiO90bdY9lMk4
5h50DeKXM/UbvXW362HnPR45+1HXxr8nMhmBDc9kMgvDnnSO3nvWOUx6PpM7
ePNSpp7nvBczuUb8mGvj0Cu+Fox53DnOe8E12POca1P36Uy9znW8lslWLPk8
U89jwDuZbMIefnuNcMxvsd0cv+t5rHrdNTD7w0y/A7D8g0y/sYjxid90/H30
/UzeMfeeaxC/6vvgmt5wPbx80yNnf+TaGPZpJoNw4stMNuHQZ85xP185hz3f
ZPIIe77P5AKufJfJIOKPXRvzvvDzoO4nznHet67Bnq9dm7p8FvCV79EfXBtX
fvSIW39k8gWHfs/kFPEvmfqEz/6fnseeX53Dub+cw60Jc/UwffZPJptw92/P
E//rHFb95xFLNuv2jty9Rulev7k210F8TiafRsvlEX6MlcspTBo9Vw7Pxs6V
w6GRctXGwnFzOYVJ4+fyCHtGzVWbuuPk2se68XKtZd0EudZybxPluj/sCXLZ
hEmT5Op5DEhzmYJDSS6biMNca/E4yzWPMVGuHObluXI4NHGuczijzGUZ9hS5
5omrXDm+o+pcIybFuepxdi9XDkuaXCP2TJrrejGpzeUFVg1zjdzPIJcpzE2W
ay32TJHLI6yaOpcvGNDPVZs9Y+R6T/jOmTzXPvZMlcs79kyZqwbxmLnW8r5O
k6sefkyba8StuXP1JE7MnMspLJkh1+8GLJklVw63ZsyVw7nZchmEW3Pksgw7
l8zVY/TTrLn2sW72XGtZN2eutdg2U656nD1XrhzXNE+u68KeBXM5hVvz5bID
M+bPNeLWvLnWMrdQrrUYtkgugzBp8Vx+YcwSuUaudalc14s3C+fax57FchnH
nkVz1SD+OdNvEfp56Vz7MGkd9xt9v2IuOzBphVxOES+fyzLilXLN480yuWrg
9Gq5fMGVVXNZRjxdrveN75ZVcrnG3Mq5ahBPn2ue92/ZXPVwbrlcI2evnqv2
T91rrVw24dB6ufzCp7Vz5bif9XPl8GnDXAZh0ia53MGGjXN5RLxGrto8p3Vz
PQ/qrpkrx3kb5arBng1y1abu5nYLS7bM5RQm3Zzr2fEst8/lCw5tl8sp4m1z
WUa8g+exZyvXoId2yWUr9uycyyPiLXwm5+2UyzXmdnQN4oNy9T99v7Xr0Wfb
eOTsXV0bb3bP5RQm7Z3LMqzawzlc2cc5rNovl0f4dGAugzjvgFw2Ee/m2nh5
sK8FJ0Y4x3n7uwZ79nVt6u7pM3H00FweYdVpufoQA47O5QsmHZXLKeIjcxlH
fIzn8eYw18C5E3JZgzHH57JsGn8WjnXPHJfLLOaOdQ3iQ3wfXNPhrsf3wBEe
OftE16YPTsnlFCadkcspvDnVOe7nTOew6uxcBmHVebmswb9zc3lEfJJr00On
+3lQ92TnOO8c12DPWa5NXf4exm8f/k1qLz9j3u8LclmGT9flsgYzLsvlFN5c
nMsy/j3scudw6xLn8O/KXAZh0tW5LMOwe3L1G711hfex7iqvZd01XovNl7oe
Z1/rHNd0va8Lh27J1WcYdmMuR/DjJo/04Q1ey9ytXotnt+fyCJ/uymUZ3tzt
kWu919eLPbd5H3vuzOUde+5wDeLz/V7xHO/zPnx6IVfv0feP5HIEnx7OZRbx
Q7lcI37U89hzv2tg9lO5fjNhz5Pda1PHF/p94zvn8VzGYd5jrkF8ked5/x5w
Pcx70CNnP+3aGPNcLo/w46VcfuHZ885xPy87h2Gv5jIIk97I5RfGvJ7LL+Jn
XBsvX/TzoO6zznHea67Bnldcm7r8t1389/38d65vujbG8N+C8d/PMvdRLkfw
6cNcZhF/kMs14o89jz3v5jIObz7P5SZWfZbLNeLliu77qBu/7F6f5jKOuU9c
g/i3XD1PX/7ukV58z7Xpsy9cGz9+yOUXPn2dyyYs+T6XZcz9lMsdHHrfNbiH
X3P5xXk/e/54Xx+18fIrj9T90edQ6xevZf+fuWzCofEK9Tk9PW6h3iMeqZAd
mPRfLqeI/81lGfHIhebx5i/Xw+nRC/UDroxWyDLi5QtdK9c4aiHXmBulUA3i
P/z8uL6/XQ/n/vHI2WMUqs1nf+xCNuHQ+IXuA2PGKZTjfiYolMOniQq5g09h
IV8wLyhkEPGYhWrTN9/4/cH4sQrlOG/iQjXYM2Gh2tT91mv5LvrOI+9rVOgc
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
sefoUt6x5yjXIN7J7xXP8QTvw6cLS/UefX9aKUfw6dRSZhGfUso14tM9jz0n
ugZmn13qNxP2nFXKNeJd/L7xnXNmKeOYO8M1iHf1PO/fSa6HeSd75OxzXBtj
zi/lEX5cXMovPLvAOe7nEucw7LJSBmHSlaX8wpgrSvlFfK5r4+VFfh7UPc85
zrvcNdhzqWtTl39XGOHP7tWlfPm/JVX3Oete+3Wvm0s5gk83lTKL+MZSrhHf
4nnsua6UcXhzRyk3ser2Uq4RN13dO7vxru51WynjmLvVNYifKNXz9OWTHunF
612bPrvTtfHjoVJ+4dO93WvNUpY8WMoy5h4p5Q4O3eAa3MPjpfzivEc9v5Gv
j9p4ebdHzHvY51DrMa9l/9OlbMKhd0v1OT39TqneI36xlB2Y9EIpp4ifL2UZ
8Uuex5tnXA+nXyvVD7jyainLiPuVrpVrfKWUa8y97BrET/n5cX3Puh7OPeeR
s193bT77b5WyCYfe831gzNvOcT/vO4dPH5ZyB58+KeUL5n1cyiDiN1ybvrnP
7w/Gv+kc533kGuz5wLWpe7/X8l30gEfe1099DoZ9W8oUHPqllDWY8U0pp5j7
vpQvePNlKdf4ffFTKacw9QfPY9holXqJ3h21Ur8Rf+dzqPWj17L/K9fD0a89
cvbPrs01/VbKIMz4q5RZGPa7c/jxt3O49W8pd3Bo5Epm4cpIlcwi/tX3St3R
K10vroxSaS3X/Z9rsOcf16Zu2625p1TfpJV6m16PK/UbvTJeJY+wZNxKjhCP
U8ks4okq/VsAloxdyTjmvij1XcKzHr9SDQz7zO8b3yefe2TdBJXmMW/CSiN1
x6h0T9g/ZqUR88aqNHJebrMwKarkEfeQVbon5spK1mBPr5JTWFJXcoq4qjRP
PHGle7qmeyWVngfPKKiUu7Z7FZXOpG5YKcfZf/j95LtoWOkZ89nfrtIz4vlN
UckvXJm8klnEk1Ray2d/ykrzGDZppRx9MFWlHG7NW6mH6bNpKtmEbVNXmiee
tlIOX6erNOLr2pU+Q3w2J6tUm+uYoZId2DZTJY/wY7ZKfuHZzJVyWDJ7pRyG
TV+pNvvnrOQRPs1dyS88m7FSberOUWkf6+aqtJZ181Ray73NV+n+MGOBSk5h
0kqV+hwDFq1kE34sUskv4gUrrcXjxSrN49ZClXKYvXilHA7NX+kczliykmXY
tkSleeKlKuVwaOlKI5/rhSvV4+xlKuX4jC9baaQnVq50vViyQiU7MGPFSiP3
s3wlp5hbpdJaDFutklPYs2YlXzBvuUq12TNLpfeE75ZVK+1jzxqVvGPP6pVq
EM9aaS3v61qV6vGZWKfS5wKfNq7kEZZsVMkR4g0rmUW8SaV5fFqvUg/82b22
qGQopm5eySbidSvVZt1mlYxjbtNKNYhHVOo3emv9SvWwc4NKI2dv6dr4t00l
I7Bhh0pmYdi2ztF7OzqHSTtXcgdvdqvU85y3ayXXiLdybRza3deCMVs7x3m7
uAZ7dnJt6m7vXuc69qxkK5YcXannMWD/SjZhD7+9Csf8FssdH+B5rNrLNTD7
0O41qGT5wZV+Y/G7AJ/4TcffRw+q5B1zB7oG8R6+D65pb9fDy308cvZhro1h
R1YyCCeOrWQTDh3lHPdznHPYc0Ilj7Dn5Eou4MpJlQwiPty1Me8YPw/qHuEc
553oGuw53rWn8WcBX/kePcW1ceVUj7h1TiVfcOjsSk4Rn1GpT/jsn+t57DnT
OZw7zzncurFSD9NnF1SyCXfP9zzxhc5h1UUesWTsuvuO6sZLutdZrj27YyzD
p8sqeYQfV1VyCpMudw7PrnYOhy52bfZfW8kpTLq+kkfYc6lrU/ca72PddV7L
uhu8lnu7yfeHPbdUsgmTHqvU8xhwZyVTcOiOSjYR3+q1eHyX5zHmNucw727n
cOhmn8MZ91ayDHvu8Tzxfc7xHXW/R0y63fU4+wHnsORBj9jzuK8Xkx6p5AVW
PeqR+3m4kinMPeG12PNUJY+w6tlKvmDAQ67Nniv8nvCd86T3seeZSt6x52nX
IL7Sa3lfn3M9/HjeI269W6knceLVSk5hyUuVfjdgyWvO4dbLzuHcG5UMwq23
KlmGnd9U6jH66XXvY92bXsu6t70W215xPc5+xzmu6T1fF/Z8XMkp3Pqgkh2Y
8aFH3Hrfa5n7xGsx7LNKBmHSV5X8wpivPXKt3/p68eZT72PPl93rEO/53DUw
7/RKv0Xo5++8D5NGqtVv9P0vlezApJ8rOUX8UyXLiH/1PN587xo4/WclX3Dl
j0qWEb/g943vlt8rucbcb65B/KLnef9+cD2c+9EjZ//l2qd1r38r2YRDo9Ty
C5/+c477GbVWDp9Gr2UQJo1Vyx1sGLOWR8R/uzbPaeRaz4O6/zjHeWPUqsGe
0WrVpu44tZzCkvFqOYVJa9R6djzLoJYvODRxLaeIJ6plGXFYax57xq9Vgx5K
a9mKPUktj4jHrXUm58W1XGMuqlWDeLJa/U/fT1CrHn02Ya2Rs7NatfGmrOUU
JjW1LMOqqlYOV/q1cljV1vIInyatZRDnTVLLJuK8Vm28nLzWteBEUSvHecNa
NdgzqFWbunWtM3F0yloeYdVctfoQA6av5QsmTVfLKeJpaxlHPEOtebyZqlYN
nJulljUYM3Mty57zZ4HvRnpmplpmMTdjrRrEU9S6D65p6lr1+B6YptbI2bPW
qk0fzFHLKUyap5ZTeDNnrRz3M2+tHFbNX8sgrFqoljX4t2Atj4hnq1WbHpq7
1vOg7uy1cpy3QK0a7JmvVm3qXuvfPvybVK/WM+b9XqSWZfi0ci1rMGOpWk7h
zeK1LOPfw5aulcOtJWrl8G+57s9fVDJphVqWYdiGtfqN3lqm1j6sWr7WWtat
WGstNi9Zqx5nr1QrxzWtUuu6cGjNWn2GYavVcgQ/Vq810oer1lrL3Fq11uLZ
OrU8wqf1a1mGNxvUGrnWjWpdL/asXWsfe9ar5R171q1Vg3jhWu8Vz3HjWvvw
aZdavUffb1nLEXzaopZZxJvXco14K89jzya1amD2drV+M2HPtrVcI1601vvG
d842tYxjbmvXIF6s1jzv36a16mHeZh45e3vXxpidanmEH7vV8gvPdnaO+xnh
HIbtUcsgTNq7ll8Ys1ctv4h3cG283NXPg7o7Osd5e7oGe3Z3berONFfXn93r
1O61by1fsGT/Wn5h1SG1nMKSg2tZRnyA53HlUM9j2IHO0QeHOYdJZ9bqYfrs
iFqu4dzhnic+0jmsPcojzv3QvY7uXsd0r4Ncu3GMHXh2XC2P8OOkWn7h2fHO
YcnJzs3gepN7/6m1PMKn02v5hWfHujZ1T/E+1p3mtaw7w2u5t7N8f5hxTi2n
MOm6Wj1Pf19Yyyb8uKCWX8Tnei0eX+R53DrPOUy62DkcOtvncMaltSzDtks8
T3yZc/TQ5R4x6XzX4+wrnOPzfqVHPtfX+3px5ZpaHuHHtR65n6tr+cXcjd1r
2VpW3VzLIKy6rZY1+HeVa7PnBL8nfLfc5H3subWWWey5xTWIT/Ra3tfbXQ+3
7vCISY/V8gUn7qtlE8bcXcsvfkfc7xxW3eMc5j1Yyx0ceriWX7j1Sq0eo58e
8D7WPeS1rHvEa/H4Xtfj7Eed45oe93VhzzO1nMKtJ2vZgRlPecStJ7yWuWe9
FsOer2UQJr1Uyy+Medkj1/qqrxdvnvM+9rxYyzj2vOAaxD/W6iU+7695HyZ9
Xqvf6Pt3atmBSW/Xcor4rVqWEb/rebx53TVw+sPutU8tYz6oZRnxnX7f+J55
v5ZrzL3nGsR3eZ737w3Xw7k3PXL2R669X/f6tJZNOPRlLb/w6TPnuJ+vnMOn
b2oZhEnf13IHG76r5RHxx66Ni1/4eVD3E+c471vXYM/Xrk3dp/1+8n7/5GeM
VQv29Bx5rr/XMguffqllFv3xq0c++394Hod+c449fzqHYf/VchaH/q7lFJ79
W8sp5iboqefp9b+8j3X/eC3rRuqpBsaM0pNl+DRmT37h02g92YQlo/c04tmo
Pa1lbuSearB/rJ72Ydj4PXnEdYzdUw63xu3JMtwar6eRdeP0NM/ctD31Ev0x
YU/3gSsT9+QRViXdn2+oZVLQUw63wp5GPE57mseeqKcc5mU95TCs7skajCl6
8gifqp5cY26ins7n7Lynfazr9bSPz3jT08hnud/TiEltTwZhxrCnEbcm6WnE
qkl7GrFn0NM+9kzWUw63pujJI9yavKcc8Rg9vSe8Z1P2NI9VU/dkE15O1VOO
eJqecjzf6Xp6xvi0fNP1Uhd/1b1m6ckUHJq5J5uIZ+jJLz7vs/Y0jzEz9pTD
vNl6yuHQkj31FT00R0+WYdjsPc0Tz9lTDoPn6mnEtpl6qsfZc/eUw615ehqx
Z6GeeguT5u/JC6xaoKeR3puvJ1OYW7intdizaE8eYdUSPfnCtc7bU232TN/T
s+GeF+lpH3sW78k79izWUw3in2v1Pb29VE/3jVXr9dTb9PGKPdmBSSv05BTx
sj1ZjD0r9TSPN8v1lMO5lXvK4dbSPdXGvFV7co3fUKv0NE+8Wk857F+9pxGf
lu+pHmev0VOOa1+zpxGf1u/pevFjnZ48wrB1exq5n7V78ou5DXpai0kb9WQN
Jm3akzU4sVZPtdmzTE/Xzj1v2NM+9mzSk3Hs2binGsSbuQZWbe4Rh7bwiFXb
9mQQ3mzVk1n0x9YesW07z+PNNs6xZ3vn8GmXntyh73fsySk827knW5k7uKee
p9d38D7W7eS1rNvVNXBrRE9O4dM+PRmEJXt2r7gnz/byiFu7ey1u7eYa7N/X
+7DqoJ4M4jr2c67sXgf05Be2HeiRdft7nrk3fX3UPsT3gT2H9WQWVh3Vk0F4
c7hzuHWER9w62vP4dKRz7DnGOUw6sSfT8ea4njzCpxN68oi5Q30+Zx/rfaw7
yfvoxZM94tApHrHntJ68wKrTPWLYGR6x6kyP+HSq97HnLOcw6ZyenMKks50j
3tvvCe/ZuZ7HqvN7sgmTznOO+ALnsORCjzh0kUesurwnj3Dlkp7M4vfCpR6x
7fqe+pxeucw59lzhfRh2bU/O4s2VzmHS1T05hW3XeGTdVZ5n7jrv44wbfA4O
3dOTC3hwU08GYcbNHnHrFo94dqtH3LrRNdhzm3O4dUdPNmHV7c4R3+tzsOFO
z+PW3T2ZxXXc5Rzx8T19dvjc3Od9OPRiT/1Pfz/Sk0e48nBPlhE/0JNlGPao
57HqQedw+jHnsOdiv1e8N0/0ZBOePe554iedw6enPOLTQ67H2U87h1XPeNyy
e73k68We53tyCpNe8Mj9PNeTZcy97LV482pPNuHNGz2ZRT8/69rsud/Phnt+
xfvY83pPlrHnNdfY2ftwFDff6skG3Hq3e+3Rk1Uf9WQQ3nzYk2XE73kewz72
PN687xw99Ilz+PR7T71NT3/Wk1N49qnniT93Dmu/8IhVH7geZ3/pHH585RHD
fujJJhz6tiez8Ok7j9j2TU+uMfej12LPzz05xWftt5784lq/dm32vO1ng9M/
eR97fu3JNfb84hrE3/tMrukP3zeGjd/IAnp6pEYeYc9/PZlF/HdPxmHbyI3m
seof53BulEY5fPrTtXFutEY2YdWojeaJR2+Uw6oxGo1Y9a/rcfaYjXK4NVaj
kZ6YoNH14s24jczCp/EajdzPOI1cY27CRmuxZ+JGNmFS1MggnBu7UW32/OVr
554narSPPWEj79gTNKpBzHcav9n5vR43qodnaSOPMKxq5BH25I0sw7Ci0Yhh
kzQyhb4pG+XYUzfah2FtIx9xq9coh1v9Rk7h1qDRyLqm0Txzw0b7OGPSRudg
0oyNjMCGyRt5hB9TNBoxbMpGI7ZN1WjEsMka1WDP1I1yGDZtI6dwa5pGOeKZ
Gp2DE9M1msewGRr5xXVM3yhHnDR6ljzHmRvtw6TFG/U/HszZyCaMmaORa8Sz
NnINz+ZqNI9bszXKYfbcjXI4lDV6r3hv5m3kFLbN02ieeL5GOX6/zN9oxKrZ
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
JTt5H3t2Hcgv9uziGsSnuLf4vO/pffh0lPuNvt9/IFNwaL+BbCLedyDXiA/w
PMbs5RrYdshA/zsQ//vPwQP5RbzuQO8b3zkHDeQUcwe6BvF6A83z/u3teti/
j0fOPtS1MeyIgWzCoWMG8gufjnSO+znWOXw6fiCDMOmkgdzBhhMH8oj4MNce
dq+j/Tyoe7hznHeCa7DnONem7vZ+P3m/T/UzxqqP/Rx5rmcPZBY+nT6QWfTH
md1r1oE+++d4HofOco495zqHYRcN5CwOnT+QU3h24UBOMXfjQD1Pr5/nfay7
wGtZd7FrYMylA1mGT1cN5Bc+XT6QTVhyhUc8u8xrmbvENdh/tfdh2A0DecR1
XOMcbl03kGW4db1H1l3reeaeH6iX6I+bfB+4cstAHmHVHQP5hUm3Oodbt3nE
4zs9jz23O8eeu5zDsPsHsgZj7hnII3y6byDXmLvZ53P23d7Huge8j8/4gx75
LD/kEZMeGcggzHjUI2495hGrHveIPQ97H3uecA63nhrII9x60jniK/2e8J49
7XmsenYgm/DyGeeIn3OO5/uCnzE+/dh2vdS9ju1erw1kCg69OpBNxC8N5Bef
99c9jzEvO4d5bziHQ18P1Ff00FsDWYZhb3qe+G3nMPgdj9j2iutx9rvO4dZ7
HrHnk4F6C5M+HMgLrPrII733wUCmMPep12LP5wN5hFVfDeQL1/q+a7PnRT8b
7vkz72PPlwN5x54vXIP4tIH6nt7+xveNVaO06m36+OeB7MCknwZyivj7gSzG
nl88jzc/OIdzvzqHW9+6Nub9PpBr/Ib6zfPEfziH/X96xKcfXY+z/3KOa//b
Iz6N2up68WOkVh5h2MitRu7nv4H8Ym60VmsxaYxW1mDS2K2swYl/u9cZ3vOd
r517Hr3VPvaM1co49ozZqgbxOK1qYNW4rUYcGq/ViFUTtzIIbyZoZRb9MWGr
EduCVvN4M1GrHHvCVjl8ylq5Q9/HrZzCs7SVrcxN3qrn6fWo1T7WJa3Wsi5v
VQO3ylZO4VO/lUFYUreyCc96rUbcqlqtZa5oVYP9g1b7sGqyVgZxHW2r3L3d
a5JWfmHbpK1G1g1bzTO3b6vro/YUre4De6ZqZRZWTdfKILyZulUOt6ZpNeLW
9K3m8WnaVjn2zNAqh0mztjIdb2Zq5RE+zdLKI+ambHU+Z8/Yah/rZmu1j16c
vdWIQ3O0GrFnrlZeYNXcrUYMm8eWYdW8rUZ8mrPVPvbM1yqHSQu0cgqT5m+V
I25avSe8Zwu2mseqhVvZhEkLtcoRL9IqhyWLthpxaLFWI1Yt3cojXFmilVn8
Xliy1YhtK7fqc3plqVY59izTah+GrdjKWbxZtlUOk5Zv5RS2rdBqZN1yreaZ
W6nVPs5YpdU5OLRBKxfwYLVWBmHG6q1G3Fqj1Yhna7YacWvVVjXYs1arHG6t
08omrFq7VY54o+7P/wxkw7qt5nFr/VZmcR3rtcoRz9zqs8PnZuNW+3Bot1b9
T39v2cojXNmilWXEm7ayDMO28jxWbeYcTm/tHPYs3uq94r3ZtpVNeLaN54m3
cw6ftveIT5u7Hmfv4BxW7ehx/O41wteLPbu0cgqTdvXI/ezcyjLmdvdavNmz
lU14s08rs+jnnVybPZu0ejbc8x7ex569W1nGnr1cI/U+HMXN/VrZgFsHtPII
qw5tZRDeHNLKMuIDPY9hh3kebw5yjh463Dl8OqtVb9PTR7ZyCs+O8DzxUc5h
7dEesepg1+PsY5zDj2M9YtjJrWzCoRNamYVPJ3rEtuNbucbcKV6LPae1corP
2pmt/OJaj3Nt9uzvZ8NzOdX72HNGK9fYc7prEJ/kM7mms33fGHZ9Kwvo6Yta
eYQ9F7Yyi/i8VsZh28Wex6rzncO5S5zDp3NcG+cua2UTVl3qeeLLncOqKzxi
1QWux9lXOodbV3mkJ27w9eLNta3MwqfrPHI/17RyjbkbvRZ7bm5lEybd1sog
nLvatdlzrq+de77J+9hzayvv2HOLaxDzncZvdn6v3+56eHZnK48w7L5WHmHP
3a0sw7B7PGLY461MoW/udY4993sfhj3avTZs5dYDzuHWQ62cwq2HPeLog55n
7jHv44wnfA4mvdLKCGx4qpVH+PG0Rwx7xiO2PesRw550DfY85xyGvdDKKdx6
3jniV30OTrzoeQx7uZVfXMdLzhHf4WfJc3zN+zDpy1b9jwfvtLIJY95u5Rrx
G61cw7N3PY9bbzqH2e85h0N3+b3ivfmglVPY9r7niT90jt8vH3nEqrdcj7M/
do4e/cQjhn3l68Wnz1vZhCVfeOR+PmtlGXNfey1ufdvKJqz6oZVH2POpa7Pn
dT8b7vkb72PP960sY893rkH88CTd56R7bTCJ/o2Bf5fl31t/aWUTbv3ZyiaM
+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
JhzaqCez8GnjniK2bdiTa9Q281zs2aInp/iubd2TX1zrBj2tTc9KPT0bnsvm
7qNnq55co2dLr8F4k5725Jq29X1j2AE9WcCZ3rknj7Bnp57MYvy/nozDtl1c
x6odnMO5XZ3Dp+28Ns7t3pNNWLWb64z3cA6r9nTEqh29Hnvv5Rxu7e3ImTjQ
14s3+/VkFj7t78j97NuTa9QO8lzsOaQnmzDp8J4Mwrl9vDY92/vaueeD3UfP
YT15R8+hXoMx/1x4jH9/PcLr4dlRPXmEYcf35BH2HNOTZRh2rCOGnd6TKZyb
45yj5wT3YdipPfmIWyc6h1sn9+QUbp3iyLyTXKd2mvvY4wzvg0mX9GQENpzV
k0f4cbYjhp3jiG3nOmLYmV6DnvOcw7ALenIKt853jvGl3gcnLnQdwy7uyS+u
4yLnGB/pZ8lzvMx9mHRXT+cfD67pySaMubon1xhf0ZNreHat67h1pXOYfZ1z
OHS03xXv5oaenMK2611nfKNz/P5ykyNWXeX12Ptm5zijtzhi2N2+Xny6Y/hZ
rSdL7nTkfm7ryTLcusdzceu+nmzCqgd78gh7bvXa9FzuZ8M93+s+eh7oyTJ6
7vcajMfLh889G77/4Wf8XPHS4efRnmzCrad6sgljnuzJNcaPuY5nT7uOW487
hzfPOIdD7/d0njnHz/XkFLY96zrj553D5hccsWrOYPizbBhfGn6e8Nqbeow1
nNdXenIKk97oyTKsetU5XHnTOax60WvT/3ZPNmHVuz3ZhEkve23Wfct9zHvH
c5n3nudybx/4/rDko54Mwqdfejr/nOPPe/IIVz7ryTLGH3suhn3hOlZ94hxO
f+kc9nzofdjj655swrOvXGf8jXOY9K0j5+lTr8fe3zmHVd87cg5+9fVizE89
OYVJPztyPz/2ZBm13zwXb/7oySMc+rsnd7DtB69Nz2t+J/yc+d199PzVk3H0
/Ok1GL/uubzXf7wehv3riEMTBjKCczBmII+wZ7RAlmHYWIFy+DR6oByejRPI
I+wZL5BHuDh9oDPMORs7UB/zxg00l3njB5qLbWMEWo+9JwiU45omCnRdmDR5
ILMwaZJAHuHHpIEihk0caC61KQLNxaqpAnmET9MGMghvpgsUudYZAl0vlkwZ
qI+eaQL5Rc/UgdZgPFegs8T3fabhn2/vyacq0Hnj3PcCmYJDI4FsYjxbINcY
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
Q9dx6H3n6PnIOQz7PJazOPRJLKfw7LNYTlH7LdaZ56x/7D7mfeq5zPvCa2DM
V7Esw6fvY/mFT9/EsglLvnXEs689l9qXXoP+H9yHYb/G8ojr+NE53Po5lmW4
9Ysj835yndrUic4S5+N33weu/BnLI6z6N5ZfmPSXc7j1tyMej5Kojj3/OEfP
qIlyGDZ2ImswZvREHuHTWMM/nx+r9of3Z+/REvUxb5xEfXzHx00U+S6Plyhi
0gSJDMKMCRNF3JooUcSqiRNF7Bk/UR89kyTK4dZkiTzCrUkT5Rh/53fCO5s8
UR2rpkxkE15OkSjHeKpEOZ7vNImeMT7NNfw94KXh+OXhZ6ZEpuDQjIlsYjxd
Ir/4vs+cqI4x0yfKYd4siXI41CY6V5yh2RJZhmGzJqozHkmUw+BeoohtMyRa
j72DRDncChNF7MkTnS1MShJ5gVVposjZixOZQq1INBd7qkQeYVWTyBeuNUq0
Nj3TJno23HOZqI+eOpF39PQTrcH4nVjnnrPdJbpvrFoy0dnmHM+TyA5MmjuR
U4znSGQx9sybqI43cybK4dx8iXK4NUi0NuYtkMg1foeaP1Gd8YKJcti/UKKI
T3MlWo+9F06U49oXSRTxaalE14sfiyfyCMOWSBS5n8US+UVt6URzMWnZRNZg
0gqJrMGJRROtTc/sia6de14mUR89yycyjp7lEq3BeMVEa2DVSokiDq2cKGLV
GokMwptVE5nF+VgtUcS2NRPV8Wb1RDl61kqUw6f1E7nDuV8nkVN4tl4iW6lt
m+jMc9bXTtTHvHUTzWXefxKtgVsbJHIKnzZNZBCWbJTIJjzbOFHErQ0TzaX2
30Rr0L+Z+7Bqm0QGcR2bOzfG8LNVIr+wbWtH5m05/Izp2kOJro+1t/N9YM//
EpmFVTsnMghvdnAOt3Z0xK1dXMennZyjZ1fnMGmvRKbjze6JPMKnPRN5RG17
78/eu7mPeXu7j7O4jyMO7euIPfsn8gKrDnDEsAMdseogR3zaz330HOwcJh2a
yClMOsQ5xpskeie8s8Ncx6ojEtmESYc7x/hI57DkKEccOtoRq05I5BGuHJvI
LH5fOM4R285IdM45K8c7R8+J7sOw0xI5izcnOYdJpyRyCttOdWTeya5TO919
7HGm98GhSxO5gAdnJzIIM85xxK1zHfHsPEfcOstr0HO+c7h1YSKbsOoC5xhf
5n2w4SLXceuSRGZxHRc7x3iPRN8dvjeXuw+H7kp0/jnf1ybyCFeuSWQZ4ysT
WYZh17mOVVc5h9PXO4c9x/hd8W5uTGQTnt3gOuObnMOnmx3x6Wqvx963OIdV
tzquMvzc7evFnjsSOYVJdzpyP7cnsozaPZ6LN/clsglvHkxkFuf5Nq9NzxV+
Ntzzve6j54FEltFzv9dYz304ipsPJ7IBtx5N5BFWPZXIILx5MpFljB9zHcOe
GX62SOTN485xhp51Dp8+SHS2OdPPJ3IKz55znfELzmHti45Y9YTXY++XnMOP
lx0x7M1ENuHQa4nMwqfXHbHt1USuUXvLc7HnnURO8V17P5FfXOsrXpueR/xs
eC5vu4+e9xK5Rs+7XoPxG96Ta/rQ941hvyaygDP9RSKPsOfzRGYx/iSRcdj2
petY9alzOPeVc/j0kdfGuW8S2YRVX7vO+FvnsOo7R6z6zOux9/fO4dYPjpyJ
33y9ePNzIrPw6RdH7uenRK5R+91zsefPRDZh0j+JDMK5H702PR/72rnnP9xH
z9+JvKPnL6/BmJ95/M7O30P86/XwbNRUHmHYWKk8wp7RU1mGYWOkihg2USpT
ODdjpsrRM3aqPgybIJWPuDVOqhxujZfKKdwaP1Vk3rip6tQmTNXHHhOn2geT
pk9lBDZMmsoj/JgsVcSwyVNFbJsiVcSwSVKtQc+UqXIYNnUqp3BrqlQ5xjOk
2gcnpklVx7DpUvnFdUybKsd4lFTPkuc4Y6o+TOqnOv94MJLKJoyZLZVrjGdO
5Rqe9VLVcWuWVDnMDlLlcGi0VO+KdxOlcgrbwlR1xnGqHL+/JKkiVs2aaj32
TlPlOKNZqohhzfDPTyfyqUxlE5ZUqSL3U6SyjFqbai5uDVLZhFVzpvIIe/JU
a9MzU6pnwz13qfromSOVZfTMnmoNxo/472X53y/g7xj4e1n+vnXeVDbh1kKp
bMKYBVO5xni+VHU8WzhVHbfmT5XDm0VS5XBo9VTnmXO8WCqnsG3RVHXGi6fK
YfMSqSJWXT3885LDz1LDzwKp1uY6GGMN53WZVE5h0gqpLMOqZVPlcGXFVDms
Yj3Wpn/lVDZh1aqpbMKkpVOtzborpepj3iqp5jJvtVRzubc1Ut0flqyVyiB8
2irV+eccr5/KI1xZL5VljNdONRfD/pOqjlXrpMrh9H9T5bBnzVT7sMeGqWzC
sw1S1RlvlCqHSRunipyndVOtx96bpMph1aaOnIOtfb0Ys0UqpzBpS0fuZ/NU
llHbxnPxZrtUHo3vv9/HHWzbzGvTs1yqd8LPmW3dRw//TmAC92zvNRgvn2ou
73VHr4dhOzni0AGpjOAc7JHKI+zZNZVlGLanc/i0m3N4tncqj7Bn31Qe4eJx
qc4w52wv9zFvH89l3n6ei227ez323t85rulAXxcmHZbKLEw6OJVH+HGII4Yd
5LnUDvdcrDoylUf4dEwqg/DmWEeu9XhfL5Yc4T56jk7lFz1HeQ3G16Q6S3zf
T3AfPl2U6rxx7k9PZQoOnZbKJsanpnKN8RmuY8yJXgPbzkn19ztzDz9np/KL
8c5+b/zMOSuVU9TO9BqMd3Gd93eS18P+U4af2nuf67XnGX4uSGUTDl2Syi98
utA57udS5/Dp8lQGYdJVqdzBhitTecT4PK+Nixf7ebDu+c6x3xVeg57LvDbr
Hur3yfu+1s8Yq/72c+S53pTKLHy6PpVZnI8bHPnu3+w6Dt3oHD23OIdhd6Zy
FoduS+UUnt2RyilqT6Q685z1W93HvNs9l3l3eQ2MuSeVZfj0YCq/8Om+VDZh
yf2OeHav51K722vQ/5D7MOzxVB5xHQ87h1uPprIMtx5zZN4jrlP7LNVZ4nw8
6fvAladTeYRVz6fyC5OecQ63nnXE4xdcx57nnKPnRecw7LVU1mDMy6k8wqdX
U7lG7Snvz94vuY95r7uP7/gbjnyX33TEpLdTGYQZ7zji1ruOWPWeI/a85T56
3ncOtz5M5RFufeAc4wf8TnhnH7mOVZ+ksgkvP3aO8afO8Xw/9zPGJ777/LMH
vxN8m8oUHPomlU2Mv0zlF9/371zHmK+cw7zvncOhMTOdK87Qj6ksw7AfXGf8
k3MY/LMjtn3t9dj7F+dw61dH7Pkn1dnCpD9TeYFVfzly9v4Yfk527V/PxZ5R
M3mEVWNk8oVr/c1r49AXfjbc8yiZ+ugZPZN39IyWaQ3G16U695ztsTLdN1ZN
l+lsc44nzGQHJk2QySnG42ayGHsmylTHm/Ey5XBu4kw53Bo709qYN2km1/gd
apJMdcaTZcph/+SZIj6Nn2k99p4iU45rnzJTxKfpM10vfkyTySMMmzZT5H6m
zuQXtRkyzcWkmTJZg0mzZrIGJ6bKtDY942S6du55xkx99MySyTh6Zs60BuPZ
Mq2BVSOZIg71MkWsSjIZhDdhJrM4H1GmiG1ppjrexJly9GSZcvjUz+QO577I
5BSeVZlspbZApjPPWc8z9TGvzDSXeXWmNXCrzeQUPs2ZySAsGWSyCc9mzxRx
q8s0l1qTaQ3658rUh1XzZzKI65g7U47/5mLeTH5h23yZIvPmyVSndkqm62Pt
BTPdB/YsnMksrFo8k0F4s0imHG4tmini1hKZ6vi0WKYcPUtmymHScplMx5ul
M3mET8tm8ojaQpn2Z++lMvUxb/lMfZzFFTJFHFoxU8SelTN5gVWrZIoYtmqm
iFWrZYr4tFKmPnpWz5TDpDUzOYVJa2TKMZ4j0zvhna2VqY5V62SyCZPWzpRj
vG6mHJasP/zz76kc+k+miFUbZ/IIVzbIZBa/L2yYKWLb1pnOOWdlo0w5ejbJ
1IdhW2ZyFm82dQ6TNs/kFLZt4ci8zVyntpX72GMb74NDu2dyAQ+2y2QQZmzv
iFv/c8SzHRxxa1uvQc+OzuHWzplswqqdnGO8h/fBhl1cx63dMpnFdezqHONl
Mn13+N7s6T4cOibT+ed875/JI1zZL5NljPfOZBmGHeA6Vu3jHE4f6Bz2/DfT
u+LdHJzJJjw7yHXGhziHT4c64tO+Xo+9D3MOqw53DIafY3292HNUJqcw6WhH
7ufITJZRO85z8eaETDbhzcmZzOI8H+G16dnLz4Z7Pt599JyUyTJ6TvQalftw
FDdPzWQDbp2eySOsOieTQXhzdibLGJ/hOoad6zrenOkcZ+g85/DpxkxnmzN9
QSan8Ox81xlf6BzWXuSIVWd5Pfa+2Dn8uMQRw67KZBMOXZ7JLHy6whHbLsvk
GrWrPRd7rs3kFN+1GzL5xbVe6rXpOc3PhudyjfvouT6Ta/Rc5zUYX+k9uaab
fN8Y9ngmCzjTd2byCHvuyGQW41szGYdtd7mOVbc5h3N3O4dPN3ttnLs3k01Y
dY/rjO9zDqseGH7Wy2TV7V6PvR90DrcecuRMPOHrxZtHM5mFT485cj+PZHKN
2pOeiz1PZ7IJk57LZBDOPey16bnF1849P+U+ep7N5B09z3gNxvxzIX8vz++v
z3s9PHsxk0cY9lomj7Dn5UyWYdgrjhj2XiZTODevOkfP6+7DsHcy+YhbbziH
W29lcgq33nZk3puuU3vXfezxvvfBpK8zGYENH2byCD8+csSwjx2x7RNHDPvA
a9DzqXMY9nkmp3DrM+cYf+N9cOIL1zHsq0x+cR1fOsf4BT9LnuO37sOk0XKd
fzz4OZNNGPNTJtcYf5/JNTz7xXXc+sE5zP7VORx6ye+Kd/N7Jqew7TfXGf/h
HL+//OmIVT96Pfb+yznO6N+OGDZ6ruvFp1Fy2YQlo+aK3M+/mSyjNkauubg1
Vi6bsGrcXB5hzz9em57v/Gy45zFz9dEzTi7L6Bk71xqMn5x8eC6Gn82Gnwly
+YJJ9w2GZ3P4WXf4mSyXTRgzaS7XGE+UyzU8mzxXHbcmzpXDmyly5XAoznWe
OcdT5XIK26bMVWc8da4cNk+TK2LVPsM/Tzv8TDf8TJJrba6DMdZwXmfI5RQm
zZLLMqyaMVcOV2bNlcMq1mNt+kdy2YRV4fDP92cyafpca7PubLn6mNfLNRfD
olxzubck1/1hSZbLIHyaL9f55xz3c3mEK1UuyxjnueZiWJ2rjlVFrhxON7ly
2JPm2oc9ulw24Vmbq854kCuHSbPnipynMtd67D1HrhxWzZkrcg7mz3W9GDNP
Lqcwad5ckfuZO5dl1BbINRdvFsrlEQ4tmssdbJsr19r0zJTrnfBzZsFcffQs
kss4ehbOtQbjmXPN5b0ulms9DFs8V8ShVXMZwTlYNpdH2LNULsswbLlcOXxa
OlcOz1bI5RH2rJTLI1zcMNcZ5pwtn6uPeSvmmsu8lXPNxbZlcq3H3qvkynFN
q+W6LkxaO5dZmLRGLo/wY81cEcNWzzWX2jq55mLVerk8wqf/5jIIbzbIFbnW
jXJdL5asm6uPnv/k8oue9XOtwXhfny2+7xvn6sOnnX3eOPdb5jIFh7bIZRPj
zXO5xngr1zFmk1xrYNt2uf63rfnftN42l1+Ml8j13viZs00up6ht7TUYL5mr
zvvb1Oth/2aO7L2918awHXPZhEO75vILn3ZyjvvZzTl82iOXQZi0dy53sGGv
XB4x/p/XnnD42cXPg3V3cI799vQa9OzutVl3rVzvk/e9n58xVj3j58hzPTiX
Wfh0QC6zOB8HOvLdP8R1HDrIOXoOdQ7Djs7lLA4dMfwEuTw7KpdT1M7KdeY5
64e5D8+O9FzmHeM1MOa4XJbh08m5/MKnE3LZhCUnOuLZ8Z5L7VivQf8p7sOw
M3N5xHWc6hxunZ7LMtw6w5F5p7lO7Y5cZ4nzcbbvA1fOzeURVl2Yyy9MOs85
3DrfEY8vch17LnCOnoudw7ArclmDMZfm8gifLs/lGrVzvD97X+I+5l3pPr7j
VznyXb7aEZOuzWUQZlzniFvXO2LVDY7Yc4376LnROdy6OZdHuHWTc4xP8jvh
nd3iOlbdlssmvLzVOca3O8fzvdPPGJ/eKoZnafjZbfi5P5cpOHRfLpsY353L
L77vD7iOMfc4h3kPOodDr+Q6V5yhh3NZhmEPuc74Eecw+FFHbLvX67H3Y87h
1uOO2PNsrrOFSU/l8gKrnnbk7D2ZyxRqz3ku9ryQyyOsejmXL1zrE16bnrv8
bLjn591Hz0u5vKPnRa/BeP9c556z/arvG6u+zHW2Ocfv5LIDk97O5RTjN3JZ
jD3vuo43bzqHc+85h1uveW3M+yCXa/wO9b7rjD90Dvs/csSnt7wee3/sHNf+
iSM+feXrxY/Pc3mEYV84cj+f5fKL2jfDz+G5TPoulzWY9GMua3DiU69Nz+u+
du75W/fR80Mu4+j53msw/slrYNXPjjj0iyNW/ZnLILz5LZdZnI/fHbHtL9fx
5g/n6PnbOXwarZA7nPt/czmFZ6MWspXapIXOPGf9H/cxb5RCc5k3eqE1cGvM
Qk7h03iFDMKSsQvZhGfjFIq4NVahudTGKLQG/eMX6sOqSQoZxHVMUCh32fAz
USG/sG3iQpF5ExaqU9u80PWx9mSF7gN7pihkFlZNU8ggvJmyUA63pioUcWva
QnV8mrpQjp7pCuUwaeZCpuPNDIU8wqeZCnlEbfJC+7P39IX6mDdLoT7O4qyF
Ig7NVihiT6+QF1gVFIoYFtoyrIoKRXwaKdRHT1woh0lpIacwKSmUYzxuoXfC
O8sK1bGqKGQTJuWFcozLQjksqQpFHOoXilg1KOQRrjSFzOL3hbZQxLb5Cp1z
zkpXKEfP7IX6MGyeQs7izRyFcpg0VyGnsG3uQpF5cxaqU5u3UB97zF9oHxxa
upALeLBgIYMwY6FCEbcWLhTxbJFCEbcWKLQGPYsWyuHW4oVswqrFCuUYL1No
H2xYolAdt5YqZBbXsWShHOMZC313+N4sW6gPh/5b6Pxzvlcp5BGurDz889e5
xssXsgzDVi1Ux6oVCuVwerVCOeypC70r3s0ahWzCs9UL1RmvWSiHT2sVivi0
YqH1cHTtQjmsWqdQ/HX42aDQ9WLP+oWcwqT/FIrcz3qFLKO2YaG5eLNxIZvw
ZrNCZnGe1y20Nj3LFXo23PNGhfro2bSQZfRsUmiNUd2Ho7i5hW3Ara0KeYRV
2xcyCG+2K2QZ461dx7D/uY432zjHGdrBOXw6uNDZ5kzvVMgpPNvRdcY7O4e1
uzhi1bZej713dQ4/dnPEsH0K2YRDexYyC5/2csS2PQq5Rm1fz8We/Qs5xXft
oEJ+ca27e216tvSz4bns5z56DizkGj0HeA3Ge3tPrukQ3zeGnVHIAs700YU8
wp6jCpnF+PBCxmHbMa5j1RHO4dyxzuHToV4b544vZBNWHec64xOcw6oTHbHq
SK/H3ic5h1snO3ImzvT14s1phczCp9MduZ9TC7lG7SzPxZ5zCtmESecXMgjn
TvHa9Bzma+eez3YfPecV8o6ec70GY36m8Ts7v69f4PXw7KJCHmHY5YU8wp5L
ClmGYZc6Ytj1hUzh3FzmHD1XuA/Dri3kI25d6RxuXV3IKdy6xpF5V7lO7Tr3
sccN3geT7i1kBDbcVMgj/Lhl+FmpkGG3OmLbbY4YdqPXoOd25zDszkJO4dYd
zjG+z/vgxF2uY9g9hfziOu52jvGFfpY8x/vdh0kvFTr/ePBoIZsw5pFCrjF+
sJBrePaY67j1kHOY/bhzOHSx3xXv5slCTmHbE64zfso5fn952hGrHvZ67P2M
c5zRZx0x7GVfLz69UMgmLHnRkft5vpBl1F7xXNx6rZBNWPVmIY+w5zmvTc8D
fjbc86vuo+eNQpbR87rXYHxNNfyeDD9LDz/XOi4z/LxbyCbc+qiQTRjzYSHX
GL/nOp597Dpuve8c3nziHA79Xug8c44/K+QUtn3qOuPPncPmLxyxasVy+LNs
GL8afj7w2vt4jDWc128KOYVJPxSyDKu+dQ5XfnQOq7702vT/XMgmrPq1kE2Y
9LXXZt2f3Me8XzyXeb95Lvf2h+8PS/4qZBA+TVTq/HOORy3lEa6MUsoyxn97
LoaNVqqOVf84h9Ojl8phz5/ehz3GLGUTno1Rqs54rFI5TBq7VOQ8/ev12Huc
UjmsGrdU5BxMXOp6MWaCUk5h0oSlIvczfinLqE1Sai7eTFbKIxyaspQ72DZe
qbXp+c7vhJ8zk5bqo2eKUsbRM3mpNRh/77m816lKrYdhU5eKOBSWMoJzMFMp
j7Bn+lKWYdjMpXL4NEOpHJ7NWsoj7Bkp5REudqXOMOdsllJ9zJut1Fzm9UrN
xbYZS63H3kGpHNcUlbouTMpLmYVJSSmP8CMtFTEsLjWXWlFqLlZVpTzCp6aU
QXjTlopc66DU9WJJWaqPnrqUX/T0S63BeKVSZ4nv++yl+vBpiVLnjXM/bylT
cGieUjYxnruUa4znK1XHmDlKrYFtC5X6+523h58FS/nFeJpS742fOQuUcora
/KXWYDzd8M83F3p/c5ZaD/vnKhXZe+FSa78z/CxWyiYcWqqUX/i0eKkc97N0
qRw+LVvKIExaoZQ72LB8KY8YL1JqbVxcstTzYN1FS+XYb7lSa9CzTKm1WTcr
9T553yuXesZYdV6p58hzXaOUWfi0aimzOB+rlYp899csVceh1Uvl6FmrVA7D
1i/lLA6tU8opPFuvlFPUtil15jnra5fqY966peYy7z+l1sCYDUpZhk+blvIL
nzYqZROWbFwq4tmGpeZS+2+pNejfzH0YtnUpj7iOzZ3DrS1LWYZbWzkybwvX
qR1V6ixxPrb1feDK9qU8wqqdSvmFSf9zDrd2cMTjnV3Hnh2do2cX5zBsz1LW
YMxupTzCpz1KuUZtO+/P3ru6j3l7uY/v+D7Dz7Slvsv7OmLS/qUMwowDHHHr
QEesOsgRe/ZzHz0HO4dbh5byCLcOcY7xJqXeCe/sMNex6ohSNuHl4c4xPtI5
nu/Rfsb4xHeff/bgd4ITS5mCQyeUsonxsaX84vt+kusYc5xzmHeyczh0Walz
xRk6tZRlGHaK64xPcw6DT3fEtuO9Hnuf4RxunemIPeeXOluYdE4pL7DqXEfO
3tmlTKF2gediz0WlPMKqS0v5wrWe5bXpOcbPhnu+0H30XFLKO3ou9hqMVyl1
7jnbl/u+seruUmebc3xdKTsw6dpSTjG+qpTF2HO963hztXM4d4NzuHWF18a8
m0q5xu9QN7rO+GbnsP8WR3y6xuux963Oce23OeLTPb5e/LizlEcYdpcj93NH
Kb+o3eu5mHR/KWsw6aFS1uDE7V6bnit97dzzfe6j58FSxtHzgNdg/LDXwKpH
HHHoUUeseqqUQXjzeCmzOB9POGLb067jzZPO0fOMc/j0Yil3OPfPlXIKz14o
ZSu1D0udec76s+5j3vOey7yXvAZuvVLKKXx6s5RBWPJaKZvw7HVH3HrVc6m9
7DXof8t9WPXB8LO3r+Nt53Yfft4t5Re2veeIVe+4Tm2uStfH2h/5PrDnk1Jm
YdUXpQzCm0+dw63PHHHrS9fx6XPn6PnKOUz6vpTpePNNKY/w6btSHlH72Puz
99fuY94P7uMs/uiIQz85Ys8vpbzAql8dMew3R6z63RGffnYfPX84h0l/lXIK
k/50jvEbfie8s79dx6p/S9mESf84x3iUSjksGbVSxKHRKkWsGruSR7gyRiWz
+H1hzEoR2yaudM45K2NVytEzTqU+DJuwkrN4M26lHCaNX8kpbJugUmTeeJXq
1Caq1Mcek1TaB4dmqOQCHkxWySDMmLxSxK0pKkU8m7JSxK1JK61Bz1SVcrg1
TSWbsGrqSjnGM1baBxumrVTHrekrmcV1TFcpx/hbf3f43sxUqQ+H6krnn/Pd
q+QRroxUsozxLJUsw7CgUh2rZq2Uw+mwUg57Rq/0rng3cSWb8CyqVGecVMrh
U1op4tNsldZj76xSDqvySvGx4aepdL3YU1VyCpP6lSL3U1ayjFpbaS7eDCrZ
hDdzVjKL81xUWpuemSs9G+65q9RHzxyVLKNn9kprvOBrwlHcnLuSDbg1byWP
sGqhSgbhzYKVLGM8X6U6hi1cqY4381fKcYYWqZTDpzUqnW3O9OLDP79fyrNF
K9Vxa4lKOaxdslLEqgUqrcfe/N0GOfzg7zaIGLZiJZtwaLlKZuHT8pUiti1b
yTVqK1Waiz2rVHKK79rqlfziWvl7E9amZ55Kz4bnsnKlPnpWq+QaPatWWoPx
CpX25JrWrHTfGLZ1JQs40/+p5BH2rF/JLMbrVDIO2/5bqY5V61bK4dwGlXL4
tFaltXFuo0o2YdWGleqMN66Uw6pNKkWsWq/Seuy9qXO4tZkjZ2IbXy/ebFnJ
LHzaypH72aKSa9S29Vzs2b6STZi0YyWDcG5zr03P2pWunXvezn307FDJO3r+
5zUY88+Fu/n31528Hp7tUskjDNuzkkfYs1slyzBsd0cMO7CSKZybPZyjZy/3
Ydj+lXzErb2dw619KzmFW/s5Mm8f16kd4D72OMj7YNJxlYzAhkMqeYQfhzpi
2GGO2Ha4I4Yd7DXoOcI5DDuqklO4daRzjI/3PjhxtOsYdmwlv7iOY5xjvLOf
Jc/xBPdh0sWVzj8enFbJJow5tZJrjE+q5Bqene46bp3sHGaf4RwO7ep3xbs5
q5JT2Ham64zPdo7fX85xxKpTvB57n+scZ/Q8Rwy7xNeLTxdWsglLLnLkfi6o
ZBm1Sz0Xt64YfharZNXVlTzCnvO9Nj0n+tlwz5e5D8+uqmQZPVd6Dcb8LsY/
a/7/359V8gWTZmyGPxPr4c+24eeWSjZhzM2VXGN8QyXX8OxW13HrRufw5jbn
cOjJSueZc3xHJaew7XbXGd/pHDbf5YhVs/WHP8uG8Z7h5yavvaLHWMN5va+S
U5j0UCXLsOp+53DlYeew6m6vTf+jlWzCqscr2YRJ93pt1n3Efcx7zHOZ94Tn
cm9P+f6w5JlKBuHTe5XOP+f4xUoe4coLlSxj/KznYthLrmPVc87h9MvOYc/T
3oc9Xq1kE5694jrj15zDpNcdOU/Pez32fsM5rHrTkXPwvq8XY96p5BQmvevI
/bxdyTJqH3gu3nxUySMc+rSSO9j2ltem5wG/E37OfOg+ej6pZBw9H3sNxg96
Lu/1M6+HYZ874tCvlYzgHHxbySPs+aqSZRj2nXP49LVzePZDJY+w56dKHuHi
mH2dYc7Z9+5j3o+ey7yfPRfbvvF67P2Lc1zTb74uTPq7klmY9Eclj/DjT0cM
+91zqf3juVg1Sl8e4dPofRmEN2P0FbnWsfq6Xiz51330jNaXX/SM2tcajEf6
Okt838fuqw+fpu3rvHHuJxr++fJKDk3Ql00YM35frjGeuK86xozT1xrYNnlf
/x6If/8zWV9+Mf7C742fOZP25RS1Sfpag/GXrvP+xu1rPewfr6/I3lP0tTaG
Td2XTTg0fV9+4dM0feW4nxn6yuHTTH0ZhEmz9uUONszSl0eMp+xr7euHn+n6
eh6sO1VfOfabua816Jmxr7VZ9y+/T953r69njFU7DP88YV/PNenLLHwK+zKL
8xH1Ffnup33VcSjuK0dP1lcOw/p9OYtDRV9O4VnVl1PUFujrzHPW8776mFf2
NZd5dV9rYEzbl2X4NGdffuHToC+bsGT2viKedX3Npdb0tQb9c/XVh2Hz9+UR
1zF3Xzncmrcvy3Brvr4i8+bpq05tvb7OEudjwb7uA1cW7ssjrFq8L78waZG+
cri1aF8Rj5foq449i/WVo2fJvnIYtlxf1mDM0n15hE/L9uUatYX62p+9l+qr
j3nL99XHd3yFviLf5RX7ipi0cl8GYcYqfUXcWrWviFWr9RWxZ6W++uhZva8c
bq3Zl0e4tUZfOcZz9PVOeGdr9VXHqnX6sgkv1+4rx3jdvnI83/X7esb4tO/w
94Dphp/ph5+N+zIFhzbqyybG/+3LL77vm/RVx5gN+sph3qbO4dAefZ0rztDm
fVmGYZu5zngL5zB4S0ds27Cv9dh7K+dwa2tH7NnRZwuTtuvLC6za3hHDtu3L
FGo7eS727NKXR1i1e1++cK3beG16/tPXs+Ged3YfPbv15R09u3oNxkFf556z
vafvG6uO7etsc44P6MsOTNq/L6cY79OXxdhzoOt4s69zOHeQc7i1l9fGvEP6
co3foQ52nfGhzmH/YY74tJ/XY+/DnePaj3DEp+N8vfhxdF8eYdgxjtzPUX35
Re14z8WkE/uyBpNO6csanDjSa9Ozt6+dez7BffSc3Jdx9JzkNRif6jWw6jRH
HDrdEavO6csgvDmzL7M4H2c5Ytu5ruPN2c7Rc55z+HRxX+5w7i/oyyk8u6gv
W6nd1NeZ56yf7z7mXei5zLvEa+DWZX05hU9X92UQllzRl014dqUjbl3uudQu
9Rr0X+M+rLqxL4O4jmudW2b4ub4vv7DtBkfmXec6tfFrXR9r3+z7wJ5b+zIL
q+7syyC8uc053LrdEbfuch2f7nCOnrudw6QH+jIdb+7tyyN8ur8vj6jd4v3Z
+x73Me9B93EWH3LEoYcdsefRvrzAqsccMexxR6x6whGfHnEfPU86h0lP9+UU
Jj3lHOOr/E54Z8+4jlXP9WUTJj3rHOPnncOSFxxx6EVHrHq9L49w5ZXh5399
/b7wqiO2vd/XOeesvOYcPW+4D8Pe7ctZvHnTOUx6uy+nsO0dR+a95Tq199zH
Hh94Hxz6pi8X8OCjvgzCjI8dcesTRzz71BG3PvQa9HzmHG590ZdNWPW5c4y/
9T7Y8KXruPV1X2ZxHV85x/i+vr47fG++cx8OjV7r/HO+f+nLI1z5uS/LGP/Q
l2UY9qvrWPWjczj9m3PY85LfFT9P/ujLJjz73XXGfzqHT3854tNPXo+9/3YO
q/5xPGP4GaPW9WLPqLWcwqTRakXuZ5RallEbs9ZcvBm7lk14M14tszjP/3pt
er73s+Gex6rVR8+4tSyjZ5xaa1zkPhzFzQlq2YBbE9XyCKsmr2UQ3kxWyzLG
E9eqY9gUtep4M0mtHGdoylo5fIprnW3O9NS1nMKzqWrVGU9TK4e109aKWDVp
rfXYm99ZyOEHv7sQMWzWWjbh0Ey1zMKnmWtFbJuxlmvUZqs1F3t6tZziuxbV
8otrnaHW2vRMWOvZ8FxGavXRE9ZyjZ6g1hqMZ6m1J9eU1LpvDJu/lgWc6X4t
j7CnqmUW47yWcdhW16pjVVErh3NNrRw+pbXWxrmulk1Y1daqMx7UymHV7LUi
VpW11mPvOWrlcGvOWpEzsUCt68WbeWuZhU/z1Yrczzy1XKO2YK252LNwLZsw
abFaBuHc3MM/v9xXT1br2rnnhWr10bNoLe/oWaTWGoz5mcbv7Py+vnit9fBs
yVoeYdhytTzCnqVrWYZhy9SKGLZaLVM4N8vWytGzfK0+DFullo+4tUKtHG6t
VMsp3Fq5VmTeirXq1Fat1cceq9faB5M2rGUENqxZyyP8WKtWxLC1a0VsW6dW
xLA1aq1Bz7q1chi2fi2ncGu9WjnGG9XaByf+U6uOYRvU8ovr+G+tHOMlaj1L
nuPGtfowadda5x8PtqxlE8ZsUcs1xpvWcg3PtnIdtzZzDrO3dg6Hlqr1rng3
29ZyCtu2cZ3xds7x+8v2jli1uddj7/85xxndwRHDdvP14tPOtWzCkl0cuZ+d
allGbXfPxa09a9mEVfvU8gh7dvTa9GxS69lwz3u4j569a1lGz15eg/FK7fB7
0Qy/K43+joG/l+XvWw+oZRNuHVrLJow5pJZrjA90Hc8Ocx23DnIObw53DofO
qnWeOcdH1nIK245wnfFRzmHz0Y5Y9ePwc8zwc+zwc7DXntVjrOG8Hl/LKUw6
uZZlWHWCc7hyinON10vcf1otm7DqjFo2YdJxXpt1T3Uf8073XOad6bnc2znD
z1y1LDmvlkH4dEOt8885vriWR7hyUS3LGJ/vuRh2ietYdYFzOH2pc9hzrvdh
j8tr2YRnl7nO+ArnMOlKR87ThV6Pva9yDquuduQc3OjrxZjrajmFSdc7cj/X
1rKM2k2eize31PIIh/j7fdzBtmu8Nj0n+p3wc+Zm99HDvxNYxT23eg3GJ3ku
7/UOr4dhdzri0OO1jOAc3F/LI+y5p5ZlGPaAc/h0r3N49lAtj7DnkVoe4eKr
tc4w5+xB9zHvYc9l3qOei233eT32fsw5rukJXxcmPVvLLEx6qpZH+PG0I4Y9
6bnUnvNcrHqhlkf49HItg/DmFUeu9TVfL5Y87z56XqrlFz0veg3GP9U6S3zf
X3cfPn1R67xx7t+tZQoOvVPLJsZv13KN8XuuY8wbXgPbPqr19zv7DT8f1vKL
8V1+b/zM+aCWU9Te9xqM73ad9/em18P+txzZ+2Ovvf/w81ktm3Doq1p+4dPn
znE/XzuHT9/WMgiTfqjlDjZ8X8sjxp94bVz80s+DdT91jv2+8xr0fOO1WfcZ
v0/e989+xli1SKPnyHP9o5ZZ+PRrLbM4H7858t3/03Uc+t05ev5yDsNGG655
di2H/qnlFJ6N0sgpDJ600ZnnrP/tPub967nMG73RGhgzZiPL8Gm8Rn7h09iN
bMKScRpFPBur0VxqYzRag/7xG/Vh2CSNPOI6JmiUw62JGlmGWxM3isybsFGd
WtXoLHE+Jmt0H7gyRSOPsGqaRn5h0pSNcrg1VaOIx9M2qmPP1I1y9EzXKIdh
MzeyBmNmaOQRPs3UyDVqkzfan72nb9THvFka9fEdn7VR5Ls8W6OISb1GBmFG
0CjiVtgoYlXUKGLPSKM+euJGOdxKG3mEW0mjHONxG70T3lnWqI5VRSOb8DJv
lGNcNsrxfPuNnjE+8d3nnz34nWD2Rqbg0KCRTYybRn7xfZ+jUR1j2kY5zJuz
UQ6Hlml0rjhDczeyDMPmalRnPE+jHAbP2yhiW9doPfaer1EOt+ZvFLFn0UZn
C5MWauQFVi3cKHL2FmxkCrXFGs3FniUaeYRVSzfyhWtdoNHa9NSNng33vHij
PnqWauQdPUs2WoPxL7XOPWd72Ub3jVX/bXS2OcerNLIDk1Zu5BTjFRpZjD2r
NqrjzYqNcji3WqMcbi3XaG3MW6ORa/wOtXqjOuM1G+Wwf61GEZ9WarQee6/d
KMe1r9Mo4tMGja4XP9Zv5BGG/adR5H7Wa+QXtQ0bzcWkjRtZg0mbN7IGJ9Zt
tDY9yze6du55o0Z99GzWyDh6Nh1+RvV4C6+BVVs64tBWjli1fSOD8GabRmZx
PrZ1xLb/uY432zlHzw7O4dOujdzh3O/UyCk826WRrdQOaXTmOes7uo95O3su
83bzGri1RyOn8GnfRgZhyV6NbMKzvR1xa0/Ppba716B/P/dh1cGNDOI69neO
/+biwEZ+YdtBjsw7wHVqb/v6WPtQ3wf2HN7ILKw6upFBeHOEc7h1pCNuHeM6
Ph3lHD3HOodJJzUyHW+Ob+QRPp3YyCNqh3l/9j7Ofcw72X2cxVMccehUR+w5
vZEXWHWGI4ad6YhVZzni02nuo+ds5zDp3EZOYdI5zjHex++Ed3ae61h1QSOb
MOl85xhf6ByWXOSIQxc7YtUVjTzClUsbmcXvC5c5YtsNjc45Z+Vy5+i50n0Y
dl0jZ/HmKucw6ZpGTmHbtY7Mu9p1ate7jz1u9D44dG8jF/Dg5kYGYcYtjrh1
qyOe3eaIWzd5DXpudw637mxkE1bd4Rzj+7wPNtzlOm7d08gsruNu5xif0Oi7
w/fmfvfh0MuNzj/n+9FGHuHKI40sY/xgI8sw7DHXseoh53D6ieFnk0b2XOJ3
xbt5qpFNePak64yfdg6fnnHEp4e9Hns/6xxWPee49fDziq8Xe15s5BQmveTI
/bzQyDJqr3ou3rzeyCa8eauRWZzn5702PQ/42XDPr7mPnjcbWUbPG15jF/fh
KG6+08gG3HqvkUdY9XEjg/Dmo0aWMX7fdQz7xHW8+cA5ztCnzuHTH43ONmf6
80ZO4dlnrjP+wjms/dIRqz70euz9lXP48bUjhv3YyCYc+q6RWfj0vSO2fdvI
NWo/eS72/NLIKb5rvzfyi2v9xmvT866fDc/lZ/fR81sj1+j51Wsw/sF7ck1/
+r4xbOJWFnCmR2vlEfaM2sosxv80Mg7bRm9Vx6p/ncO5MVrl8Okvr41zY7Wy
CavGbFVnPHarHFaN0ypi1Sit1mPvcVvlcGu8VpEzMUmr68WbCVuZhU8TtYrc
zwStXKM2aau52DN5K5swaapWBuHc+K3WpudvXzv3PFmrPnqmbOUdPVO0WoMx
/1w4vX9/nbrVeng2bSuPMGymVh5hz/StLMOwGVpFDAtbmcK5mbFVjp6ZW/Vh
WK+Vj7g1S6scbs3WyincGmkVmTdrqzq1oFUfe0St9sGkrpUR2JC08gg/0lYR
w7JWEdvyVhHD4lZr0FMO//x4I8P6rZzCrapVjvGg1T44UbeqY1jbyi+uo2mV
YzxNq2fJc5y9VR8mLdXq/OPBvK1swph5WrnGeM5WruHZfK3quDVXqxxmz98q
h0PTtXpXvJsFWzmFbQu0qjNeqFWO318WbhWxau5W67H3Iq1ynNFFW0UMW7rV
9eLTEq1swpIlW0XuZ/FWllFbptVc3FqulU1YtWIrj7BnsVZr0zNHq2fDPS/b
qo+eFVpZRs/yrdZgvO+Mw3sefqafUf+7ifxvzfK/IbtqK5twa61WNmHMmq1c
Y7xaqzqerd2qjlurt8rhzTqtcji0bavzzDler5VT2LZuqzrj9VvlsPk/rSJW
PTz883+Hnw2GnzVarc11MMYazutGrZzCpM1aWYZVG7fK4crmzo3h9Vib/i1b
2YRVW7eyCZM2bLU2627hPuZt5bnM28ZzubftfH9Y8r9WBuHTga3OP+d4l1Ye
4crOrSxjvIPnYtiurmPVjs7h9G7OYc/23oc99mhlE57t7jrjPZ3DpL0cOU87
eT323ts5rNrHkXNwkK8XY/Zv5RQmHeDI/ezXyjJqB3su3hzayiMcOqKVO9i2
r9emZ5NW74SfM4e4j57DWxlHz2Feg/Gmnst7PdLrYdhRjjh0ZisjOAcntvII
e45tZRmGneQcPh3nHJ6d0soj7DmtlUe4eHmrM8w5O9l9zDvVc5l3uudi2wnD
T+G9z3COazrL14VJ57cyC5POaeURfpzriGFney61CzwXqy5q5RE+XdrKILy5
zJFrvcLXiyUXuo+eS1r5Rc/FXoPxI63OEt/3K92HT3e1Om+c++tbmYJD17Wy
ifG1rVxjfIPrGHOV18C2W1r9e6CVh5+bW/nF+Gi/N37m3NTKKWo3eg3Gx7jO
+7va62H/NY7sfavXXmX4uaOVTTh0Tyu/8OlO57ife53Dp/tbGYRJD7VyBxse
bOUR49u8Ni7e7efBurc7x34PeA167vParHue3yfv+1E/Y6yastNz5Lk+1cos
fHq8lVmcjycc+e4/7ToOPekcPc84h2EvtnIWh55r5RSevdDKKWoftDrznPVn
3ce85z2XeS95DYx5pZVl+PRmK7/w6bVWNmHJ64549qrnUnvZa9D/lvsw7P1W
HnEdbzuHW++2sgy33nNk3juuUxu101nifHzo+8CVj1t5hFWft/ILkz5xDrc+
dcTjL1zHns+co+dL5zDsu1bWYMzXrTzCp29buUbtI+/P3l+5j3nfu4/v+A+O
fJd/dMSkX4af41uZ8asjbv3miFW/O2LPT+7DrT+cw62/WnmEW386x/gNvxPe
2d+uY9W/rWzCy3+cYzxKpxzPd7ROzxifRgbDszQc3zv8jNPJFBwau5NNjMfo
5Bff93E71TFmzE45zBuvUw6HZux0rjhDE3SyDMPG71RnPGGnHAZP1Cli21id
1mPviTvlcGuSThF7pup0tjBp8k5eYNUUnSJnb7JOplCbutNc7Jm2k0dYNUMn
X7jWSTutTc/onZ4N9zxNpz56pu/kHT3TdVqD8WOtzj1ne6ZO941VTaezzTkO
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
zcc7j5wTM/GOnCmuwZpvGj+z8/P6NNeDZydn4hEMOz0Tj2DPqZlYBsNOs8Kw
szMxhbmZ7j1yZjgPhp2ZiY9wa6b34NasTJyCW7OtxJ1hP76znEePc9wHJl2Z
iRGw4bxMPIIf51th2AVW2HahFYad6xrkXOQ9GHZJJk7BrYu9x/oq94ETl4Wt
m4lhV2TiF+e43HusT/K95D5e7TyYdF+m+YcHN2ZiE4y5IRPXWF+biWvw7Cb7
4dZ13oPZN3sPDp3iZ8WzuTUTp2DbLfazvs17/PxyuxVWXe969L7De8zonVYY
dr/PC5/uycQmWHKvleu5OxPL8D3gWLj1UCY2wapHM/EI9tzl2uRc43vDNT/o
PHIeycQych52Ddb873T5c1n+/wv4Mwb+XJY/b30yE5vg1nOZ2ARjns3ENdZP
2Q/Pnrcfbj3tPXjzgvfg0MeZ5pk5fikTp2Dbi/azftl7sPkVK6xq5/EtC30t
7BnXHuw1rGFe38jEKZj0TiaWwao3vQdX3vUerHrVtcl/PxObYNWHmdgEk153
beq+5zziPnAscR85lmv7xNcHSz7LxCD49Eem+WeOv87EI7jyVSaWsf7csTDs
G/th1Rfeg9Pfeg/2fOo+9Pg+E5vg2Xf2s/7BezDpRyvz9KXr0fsn78Gqn63M
wZ8+L4z5LROnYNLvVq7n10wsw/eXY+HNP5l4BIf48324A9t+cW1y3vIz4Tvz
t/PI4e8EznTOv67B+m3H8ly75KoHwwq5FA7Nk4sRzEEtF49gTzkXy2BYPdce
fKrk2oNnrVw8gj1dc/EILi6Za4aZs2b8+tJMcR25YombK1csbKvmqkfvuXPt
caZ5c50LJi2Ui1kwaf5cPIIfC+RSGDZfrlh83XLFwqpFcvEIPi2ei0HwZolc
ylmXynVeWLJwrjxyFsvFL3IWzVWD9Zq5Zon3vXuuPPi0aq55Y+6Xy8UUONQz
F5tYL5uLa6yXz+WHMUvnqgHb+uT6853Hw1bIxS/WxVzPjW9O71ycwtcrVw3W
pVx+nl+PXPVg/zK5lN4r5qr9RNjKudgEh1bPxS/4tEquPa5njVx78CnJxSCY
lOfiDmzIcvGI9Uq5asPF1XLdD+r2zbVHvzRXDXI6c9Wm7oK5nifPe61c9xhW
nZjrPnJf183FLPi0di5mMR/r5FLe/fVy+eFQ/1x75Kyfaw+GbZyLs3BoQC5O
wbONcnEK3065Zp5Z3yBXHnEb5oolbpNcNWDMZrlYBp+2zsUv+LRFLjbBki1z
KTzbPFcsvk1z1SB/m1x5MGzHXDziHNvm2oNb2+diGdzaIZcSt10uP77RuWaJ
+dg513XAlV1z8QhW7ZGLXzBpt1x7cGv3XAqP98zlhz0Dc+2Rs1euPRi2Xy7W
wJhBuXgEn/bNxTV8u+TqT++9c+URt7/zeMcPsPIuD7bCpINyMQhmDLHCraFW
WDUsrJGLPQc6j5zh3oNbh+biEdw6xHust8r1THhmI+yHVSNzsQleHuY91qO8
x/093Pd4fr/7/N6DnwmOzsUUOHRULjaxHpOLX7zvx9gPY470Hswb5z04ND3X
XDFDx+ZiGQwbbz/rCd6DwcdZYdtY16P3RO/BrUlW2DM112zBpBNy8QJWTbEy
e8fnYgq+aY6FPSfn4hGsOi0XXzjrZNcm5wjfG675JOeRc2ou3pFzimuw7pdr
7pnt033dsOryXLPNHJ+Vix0w6cxcnGJ9Ri4Ww56z7Yc3s7wH587xHtya4dow
77xcXONnqHPtZ32+92D/BVb4NNv16H2h9zj7RVb4dIXPCz8uzcUjGHaZleu5
JBe/8F3pWJh0dS7WwKTrcrEGTlzs2uTM9Nm55qucR861uRhHzjWuwfp614BV
N1jh0I1WWHVbLgbBm5tzMYv5uMUK2263H97c6j1y7vAefLo3F3eY+7tycQqe
3ZOLrfieyTXzzPqdziPubscSd59rwK0HcnEKPj2ai0Gw5KFcbIJnD1vh1oOO
xXe/a5D/mPNg1dO5GMQ5Hvce/+biyVz8gm1PWYl7wn58y7R1Pmo/6+uAPc/n
YhaseiUXg+DNC96DWy+FHZyLW6/aD59e9h45r3kPJr2di+nw5o1cPIJPb+Xi
Eb7n3J/erzuPuHecxyy+a4VD71lhzwe5eAGrPrTCsI+ssOpjK3x633nkfOI9
mPRZLk7BpE+9x/oRPxOe2ef2w6ovc7EJJn3hPdZfeQ+WfG2FQ99YYdWPuXgE
V77LxSx+XvjeCtv+zDXnzMoP3iPnJ+fBsN9zcRbe/Ow9mPRrLk7Btt+sxP1i
P74/nEePv9wHDlXb4gI8+CcXg2DGv1a49Z8Vns2xwq2/XYOcLm3twa1iW2yC
VYW29ljX2uoDG0pt+eFWpS1mcY5yW3us38z17vDe1NvKg0OLtTX/zPdcbfEI
rnRti2Wsm22xDIbN3ZYfVrXa2oPT87S1B3u+9bPi2czXFpvg2bxt+VnP39Ye
fFqgLYVPHW3Vo/eCbe3BqoXa0pvCFm/rvLBnkbY4BZMWbUu5noXbYhm+JdqK
hTdLtcUmeNOjLWYxz93aqk1Oo617wzUv2VYeOUu3xTJyurdV4x6fCY7CzWXb
YgPcWq4tHsGqPm0xCN6s0BbLWC/flh+GrdiWH970amuPGVqprT34tG5bs81M
r9wWp+BZ37b8rFdpaw/WrtqWwqrebdWj92pt7cGP1dtSGNZui01wKG2LWfAp
a0thWxK/fjGXb822YmFPv7Y4xbvWvy1+cdY12qoNC3u2dW+4L2u1lUfOOm1x
jZy126rBOm+rJ2dar63rhmE7tsUCZnqTtngEezZui1msB7TFONi2aVt+WLVh
W3twbrO29uDT+m3VhnNbtMUmWLV5W37WW7a1B6u2akth1UZt1aP31m3twa1t
2lJmYqe2zgtvtm+LWfBph7aU69muLa7h27mtWNiza1tsgkkD22IQnNu2rdrk
bNDW2bnmXdrKI2f3tnhHzm5t1WDN7wsH+efXPdqqB8/2aotHMGy/tngEewa1
xTIYtk9bCsMObospzM2+be2Rs7/zYNiQtvgItw7wHtw6sC1Owa2DrMQNth/f
UOfRY5j7wKQj22IEbDikLR7Bj0OtMGyEFbYdZoVhw12DnJHeg2Gj2+IU3Brl
PdZj3QdOHG4/DBvTFr84xxHeY71nW/eS+3iU82DSKW3NPzyY0BabYMyxbXGN
9TFtcQ2eHWc/3BrnPZg90XtwaO+2nhXPZnJbnIJtk+xnfbz3+PnlBCusGu96
9J7iPWb0RCsMO9XnhU8ntcUmWHKyleuZ1hbL8J3mWLh1eltsglVntMUj2DPV
tck52veGa57uPHJmtsUycma4ButZrgG3ZlthTCFeu/3D9gurhx0cNjSsZh0S
VrUeFNYIG+a4UtjgsAPCuoaNCDs0rMN6SNhhYW+EvR7W8t7wsKaVWouHHRs2
PmyJsAlel8MOdI+5XIseC4WNDTsybN6w0WGjwhb03piwhcOODjsqrOKzU2sx
9xkXtkjYMY6bO2yke8zjeqy7uQb9FnUeOUuFTQw7Tv9Jti5nhM3Uf7L6fzoj
rGfYiWFTwpa1nhC2jPX4sOXCpjque9gk110h7JSwk8N6W0/ymd70Pe3lvWlh
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
+Trsq6r49JXj4NA39sGgb70e757UhR3f2QdLvvcaBv3qc8OJn8J+rIpVP3s9
zXs/VMWa35wDh/4I+72qmf877K+quPODe/Btec3PZrpjyZ/p2D+r4tyfrjXC
z5McePGP68KPf71mFjviHWnVxI5SaLEmdvB/LDenKq6Ua/LBlUJNPthTDa3U
xLB6aK2m+Vk0dJGa2ISffNiGnxxY1gxt1MREelIXLnAWfLCma03ng0/z1fR7
RRgxd+hcNTGD3zuyhiPskQOz5q8pB/YsGLpATUxZOLRbTfPPGVkz94vVdG44
RSz5sI3YhWriGUotvnPM8SNVMWjxmvKZs5VCV6yJGT1Cl66JHWj3mjiFLlUT
X5apKQ6eLVFTLTiyfOhyNfEF7VnTt+Q/Pz94xt6yNbEKpRbfnDmOg2tL1lQX
ztGTNazqVVMPuNMndIWaeLRyaN+aeMF14INHq9Tkgz2rha5aEwtgzBo1cQdd
vab70rumHvCPetwX7hl98MEsYqkFy6hHD9iR1sQvGJSHZr53k8Im1sSVdULX
rokvaL+aOIWuVRNr+tcUx8y0a6oFazYIXb8mDqHr1cQt+tAbNrG3bk3cQqnF
nG8Xum1Nc7VmTXWZM3qyhi/8mzN6wKCNQzeqiU2bh25WE0c2qckHm7aoyQeH
tgrdsia+0GebmhiEbl0TwzasqQdc2L6mM8FB+uCDX8RSC65Rjx4wbNOaesOh
HUN3qGn+Dgjbvyau7B66W018QXetiVPoLjXxZWBNcXBtp5pqwZS9Q/eqiTXo
njX9vM478bBZxd4eNbEKpRac4yxcD7zcuaa68JSerHnvB9XUAwbtF7ZvTXw5
MGxwTRzZ3z7Yc5B9sGdo2JCaGHNI2PCaWIMOq2lm9qmpR8n1uC/ME33wNRx7
cE0sG+Ie/Dn72/4ZiG8Uz5l7DY9GhB1aEyPGh42riS9HhB1eE8NGhY2siT1j
7IN3o+2DPWPDjqyJWUeHHVXTLJ0cdlJNbDrS+d3sJwfOHeOc+dyTuov6LPjg
zrE+H6yaXNO8wYvjwibUxI+JXi/hPXLg1/HOgUNTwk6oiS/TwqbWxIKTvIYB
p/jcyziW/OUce2JNbDvRtTp8/3hm8OhU5zNzF4ZdUBM/zgibWRNH0Bk1MQs9
vSbWzHIcbDvNtWDN2WFn1cQz9MyavieH+fmt4b3ZNXFrtmvN7edGHIyb7rp9
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
mHRo2CFNsekQx8GmEfbBjsO8Hsn7x7vZFB+HuAc8GmU/vDg8bHRTDBobdmRT
LDnCPrhzlH1zO48eMOiYsKObYs34sHFNcW20eyxsP/mL2k/O4r4mcuDHcb5O
GDQpbGJTsz47bFZTLDkxbEpTTEFPaIpbk50DU6Y6DsYdbx+8mWbfUq5NP1hz
StjJTbEMPakpDp1qHww6zetl3JO6sGO6fbDkdK9h0Jk+N5w4I2xmU6ya5fUq
3pvRFGvOcg4cOifs7KZm/vyw85rizgz34Nsyxs8mcSz5uWPPbYpz57rWgn6e
5MCLC1wXflzoNbN4fdh1TbHj8rDLmmLHJWEXN8WVK+yDK5faB3uuCruyKYZd
E3Z1U/Nzb9g9TbHpSudvaD85sOxa56zrntTdxGfBB2tu8Png061N/V4RRtwU
dmNTzLjZ6829Rw7Mus05sOeOsNubYsrdYXc1Nf/3eM3c3+dzb+tY8ndw7J1N
8exO1+I7xxwf0BSD7nc+c/ZC2PNNMePRsEeaYgf6cFOcQh9qii+POQ6ePeBa
cOSpsCeb4gv6RFPfkov8/Pbx3uNNsepx11rbz404uPag6w50T9aw6mn3gDvP
hT3bFI9eCnuxKV48bx88etk+2PNq2CtNsQDGvN4Ud9DXfF+ecY+hrveC79mz
9h3qWGoNdz16wI63muIXDHon7G3fs16tmOmWuPJR2IdN8QX9oClOoe83xZqP
HcfMvOtasObzsM+a4hD6aVPcetu9x3vvk6a49YlrMee/h/3W1Fy957pHuidr
+PKFe8Cgr8O+aopN34d91xRHvrEPNv1gHxz6OeynpvhCn1+bYhD6S1MM+9I9
4MIfPtMk98F3imOpdZLr/dgUw751bzj0V9ifTc1fK+5rsyWu8B9On9MUX9D/
muIU+m9TfCm0FAfX/nYtmFKJvXJLrEFLLf28zjvBewer/rfXEqtQas3wWbge
ePmP6852T9a899WWesCgRmi9Jb50De1oiSNcBz7YM1dLPtgzT+jcLTFm/tD5
WmINOm9LM1NrqQe8ox73hXmiDz6YRSy1YBn16MGfs4/zz0BT/Jy51/BowfAv
0BIjlgnt0RJfFiOvJYYtHNqtJfYs3pIP3i3Skg/2LBm6REvM6h66VEuztGro
Ki2xCT/5cAs/OXBu6ZZyYCI9qQvvOAs+uLNsS+eDVb1bmjd4sVxoz5b4wfyx
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
Qf3C+6bFCM79iLS4xTGuDcYcE350WuyAQ/3T4hN+bFpMwsmDg4endW0wg3vD
fYGRvdKKwSzq0Rv20ZMY34Fd03quvOsDfK+5N3eG7kiLI4NDJ6fFKvyktN71
gd4Db4Y4j/d+kGNw6hTHmKszQpPTYtKpoaFpsWmo8+DcMMfg6Wle8+5cFro0
rdk6yT1gxojQ8LR4MSo0Mi1ujQ2NSYsdox2DWeMcS3sfPeDQhND4tLg1KTQx
La6NdI+K4+yvOc6ehq+JPTDiTF8nDJoampLWfC8MnZ8WL2aEzk6LTfhZaXFr
mvfAlXOcB5unOwZ3Zjq2vmvTD4bNDs1Ki0+znAd35jjGezzX69buSV3e6XMd
4x2f5zXsWOTzhhHnhRakxYzzve7gY/PT4s0F3gNrLgpdmBZXLgldnNaczXcP
uH66n01H57J/B+cuTotbi12r6OfJHjhyqevCoytCl6fFjutC16bFD/yatDiC
X50WY653Hu/+VaEr02LnzaGb0mISfmNas3Gle3TzsRvSYtsNrsUsPRhamhYr
l7huF/dkDe9ucQ9YcHvotrRYdXforrQ4cYdjMOgex+DLfaF705pn+jyQ1szj
96fFnVvdg/l+yOfU3X2I9XQutQ5xPXoc5P7MPOx4JPRwWrP+SujltFjzZOiJ
tFiCP54WU/BlaTHpKefBoUddC3Y/F3o2rd8B+DOhPpn4NocezYhzHHs6Lc49
7Vq9fS5cD3x8zHX7uidrmPW8e8CFl0IvpsWd10KvpsWMlx2DNa87BmveDL2R
Fg/eCb2dFhfwt9Ji3AvuMdj1uC8D3YfYMOdSa6jr0YPf+LwTvGtw5F33gCvv
eQ1XPg19khZf8I/Tetc/DH2QFms+cx5z8JFjcOhzx5irlaEVaTHpy9AXabHp
C+fBpq8cgx1fe/1N6IB4DvtnxMeP3QMefes4vPgutDwtBv0U+jEtlnzvGNz5
2bEp3kcPGPRr6Je0WPN76Le0uLbcPWY5zv45jrPnXF8Te+DHH75OGPRX6M+0
Zj0Z557IiCWrQv+lxRT837S49bf3wJRmGeXBuH8cgzfNM4otcG36wZrV49hq
GfEJJw8OrZFRDAatFb5mRhz813Vhx9oZxWDJOhmtYVAqo/OGE+uFt8iIVVwH
a9jBsXUzYk06oz1wKBueyWjmC+H5jLhDLj34tvzgZwOryGU/DCI3lxHncGrN
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
40Pj8mLQD97PnK0K/ZcTM34L/ZoTO/BfcuIU/nNOfPndefDsR9eCK3+G/siJ
L/jKnL4hr/j5zfOxFTmxaoVrDfZzIw+u/eS6M92TNZz6yz3gzr+hf3LiUfO4
pmZ58eI/x+DRannFYM8a4avnxQIYs1Ze3MHXzIuFf7sH/KMe92Wh+xCDWeRS
C5ZRjx4T/Jx5rnBk3bxYxj07PPywvJiSCU/nxSY8lddsJMLXy4s92bzymIFk
XjEYlMsrxtxuHL5RXjwqhOfzYhVOHqwq5hWDU6W81nCuRV7nx5zRnx53+P0o
58WgWng1Lza1DG/KiyP1vGKwaf28YrCJffSASa3CN8iLQa3DN8yLd9SjB8wi
zn6YRZw9sKlNXntgR9u8rhP2tAvfJK957hS+U14c2SJ887x4hG+WF7Pa57UH
3nTIKw+ebZpXDNZsmVcMVlGbfjBp6/Ct8mISTh4M2iavGAzaNq813KQndXm/
O+YV4z3eLq81HNk5r/OGFzuG75AXP7gO1rCJY9vnxZ5d8toDe3YN75wXY3YP
75LXrJBLDxjfyOvZwCly2Q+PyN0tL2bh1OJbxPNkD5zaI6+6MGjPvNZwoUf4
wXkxZd/wffJ6v7uFd82LN/vlFePd3zuvGLzZP7x7Xpw6MPyAvObn6PB+efGI
OPthFXH2wLaD8toDB+lJXRjHuRCDNYfkdX7wqVdeMwYjeoYfmhczmDnWcIRj
7IFZR+S1B/YcGd47L6b0De+T1/xzjqyZ+2PyOm84RS77YRu5R+XFM5xa/P5g
jpkxGHRsXvuZs9NCw/JixoDQiXmxAz8hL07hx+fFl4HOg2f986oFUwaHTs6L
YfhJeX1D9srr+a3lY4PyYtUg1+J7w3MjD64dl1fdZu7JGi4McQ+4c2poaF48
GhEanhcvhjkGj0Y6BntGh0blxYKxoTF5cQc/3fflFPdIux73ZT33IVZwLrVy
rkcPGDPOdWHJhLy+Z80Kcf6h4wri0ZmhM/Kah0mhiXm965O9hjtTnNfkXGIw
aapjcOec0Iy8+DQ9NC0v5nLs7Lxm+8LQBXnxa5r3w6+zvAemzHQteDQ7NCsv
Hs0PzcuLHXNDc/Jiyblet/cx9mzifdSCWQu8f1v3X5QXp85zDE4tDJ2fF6cW
eb2Vj53nWj+HfsqLIxf5euDQxaHFeTHo8tBleXHqEsfg1qVew5ornNfJucTg
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
kjg0znnM0JzQ7JJmCZ9VEpvGuF/F+9gDN0e6bs49Wdd8LvSAEWeEJpfEqmmh
qSXx4kzH4NR0x+DN2aGzSuLIzNA5JbEKn1ESyyb7muHIXJ/3Jj5f9mzkXGq1
dj168F7fVNI7xExfEbq8pNm4LHRpSexYGDq/JH7g55XEEXxBSf/+/UWhC0vi
F8fml/TN4B6fVhKHFrkW349hfn4px1nDtguc19H1WMPIc31tMG6e11u4D2sY
dFXoypIYwblfUhK3rvS1wZirQ0tKYgccuq4kPl0buqYkJl3jPJi42Ne2s+8N
9wVeXuzYbq5H7x3dkxjfgSl+rrzrN/tec2/+DP1REkfuCN1eEqvw20p612/x
Hnhzp/N47291DE7d5Rhz9XToqZKYdE/o7pLYdLfz4Ny9jsHT+7zm3fky9EVJ
s3Wbe8CMB0L3l8SLB0NLS+LWo6FHSmLHQ47BrMcc6+l99IBDj4eWlcStJ0NP
lMS1pe7R13H2H+04e471NbEHRjzj64RBz4WeLWm+Pwi9XxIvXg69VBKb8BdL
4tbz3gNXXnEebH7BMbjzqmPHuzb9YNjroddK4tNrzoM7bzjGe/ym1wPdk7q8
0285xjv+ttew40OfN4x4L/RuScx43+sRPvZOSbz5yHtgzSehj0viyuehz0qa
s3fcA64/7Gcz1rnsn+DcT0vi1qeudaSfJ3vgyBeuC4++Kun9gB0/hL4viR/4
dyVxBF9eEmN+dB7v/jehr0ti56+hX0piEv5zSbPxtXvM9LGfSmLbT67FLK1W
ju9SWaz81nWnuSdrePebe8CClaEVJbHq79BfJXHiD8dg0D+OwZf/Qv+WNM/0
aVbWzOOrSuLO7+7BfK9e1jmd6z7EYNUq11rkevQ4z/2ZedixZuxbo6xZL4eX
ymLNeuEtymIJvm5ZTMHXKYtJibLy4NBaZdWC3dnwTFm/A/B06Er2VeJbWhHn
OJYqi3d4sixGci5cD3xcu6y68JKerGFWrqwecKEYXiiLO9XwSlnM4DqIwZpa
WTFY0wivl8WD9cNblsUFvKksxuXL6gHjqMd9gXH0IQanyKUWPKMePfiNP9Xv
GhzZoKwecKVVWWu4skl427L4gm9c1rveJrx1WaxpV1Yec7BRWTE41L6sGHO1
S/jOZTFps/BNy2ITTh5s2rysGOzYoqx1h9CC0Pyy+Eh/esCjLR2HF1uHb1UW
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
E+Pudo/DXI/70sN9iB3pXGod4Xr04Dc+7wTvGhxZ5h5w5XGv4cpzoWdr4gv+
TE3v+lOhJ2tizfPOYw6edgwOveAYc/Vx6KOamPRS6MWa2PSi82DTy47Bjle8
fjW0fTyH7eri4zPuAY9ecxxevBF6vSYGvRN6uyaWvOkY3HnXscHeRw8Y9H7o
vZpY82Hog5q49rp7jHSc/aMdZ88YXxN74Mcnvk4Y9Fno05pmfkXo95pY8nXo
q5qYgn9ZE7c+9x6Y8o3zYNwXjsGbbx0b79r0gzXfhZbXxKflzoND3zsGg37w
erJ7Uhd2/OgYLPnJaxi00ucNJ34N/VITq37zepaP/VwTa/7wHjj0V+jPmmb+
39A/NXHnZ/fg2/KWn80C57J/oXP/rolzf7vWaX6e7IEX/7ku/FjlNbOYjHck
URc71gxfoy52rBbevC6urFVXDK6sXlcM9qwTvnZdDGsRvm5d81MPr9XFJuLs
h23E2QPL1qtrD0ykJ3XhAudCDNak6jo/+JSv679jCSMy4em6mMF/55I1HOEY
e2BWoa49sKcUXqyLKdXwSl3zzzmyZu4bdZ03nCKX/bCN3HJdPMOpxXeOOX6i
JgY11bWfOdsifPO6mNE6fMO62IG3qotT+AZ18aVNXXnwrGVdteDIJuFt6+IL
vnFd35JmdT0/eMaxjepiFU4tvjk8N/Lg2vp11YVz9GQNq9rV1QPubBa+aV08
2jK8Q1284DqIwaOt6orBnm3Ct66LBTCmY13cwbet6760r6sH/KMe94V7Rh9i
MItcasEy6tEDduxQF79g0E7hO/reTQtNrYsru4XvWhdf8M51cQrfpS7WdKkr
j5npVFctWLNX+J51cQjfoy5u0YfesIlju9fFLZxazPmh4YfUNVc711WXOaMn
a/jCt5AeMGif8L3rYtP+4d3r4si+dcVg0wF1xeDQQeEH1sUX+vSoi0H4wXUx
rFtdPeBCz7rOCQ7Shxj8IpdacI169IBh+9XVGw4dHn5YXfM3MDSgLq70De9T
F1/wo+riFH5kXXzpV1ceXOtVVy2Y0j/82LpYgx9T1+913onHzar/HauLVTi1
4BznwvXA/d7hR9TFU3r29nt/XF09YNCJoRPq4stJoUF1cWSAY7DnZMdgz5DQ
4LoYc2poaF2swU+pa2aOr6vHmq7HfWnuPsRaOJda67gePfh7dv48xp/V+Ebx
nLnX8Oi00LC6GDE5NKkuvpzOvroYNjI0oi72jHEM3o1yDPaMC42ti1kTQuPr
mqU5odl1sWms91ccZw+cm+g9efekbt3nQgzunOHzg1XT65o3eDEldGZd/Jjq
dUsfYw/8Ost74NCM0Nl18WVWaGZdLJjtNQyY6/Nu41z2t3XuOXWx7RzXSvr+
8czg0bnez8xdEbq8Ln4sDJ1fF0fw8+piFr6gLtYsch5sm+dasGZx6KK6eIZf
WNf3ZLifX0cfu6Aubl3gWhk/N/Jg3HzX7eCerGHKxe4BLy4LXVoXt64KXVkX
Oy53DGYtcQz2XBO6ui6m8Pv6urq4hV9bF7cucY/Orsd92cl9iO3hXGp1cT16
jPI7y989wI4b6/odP6ERTAl92hA/7gzdURdH8NvrYhZ+W12suct58OWW0M11
sem+0L118Qy/J3R/aP2o3bIhtnHs7rq4dbdrMYfPhJ6ua/ae9Zq5utU9eroW
PeDRstBjdbHjodCDdTGMY4/WxZsnQo/XNaO3uVZ/93mqLj496TyY9IB7wLil
XvdzDfod633sgTvPh56ra4Y/DH1Q18zh79fFjFdDr9TFDvzlujiFv1QXX15z
Hjx7wXWZg7dCb9Y1D/gbPqcNGrqnQ33s9bpY9bprneDz4j7CtRddd5B7suZd
f9s94M57oXfrYspHvp5Rvg5i8OZjx+DNp6FP6uLKF6HP6+IL/lldc/KOe8D0
h/2cRrgPsQnOpdY416MH34FHvOcoP0/WMOtL94MlP4S+r4sRv4d+q4svHPuu
Lq78FPqxLp59G/qmLj79GvqlLg797DxmaI24r6s3NEv4ag2x6Uf3m+V97IGb
y113unuynuNzoQeMWBlaURer/g79VRcv/nAMTv3jGLz5L/RvXRxpHv2bNcQq
fFVdLFvha4YjazZ03nCB82UPDFvlWotcjx7MyYYRb9XQTJfDSw3NRjG80BA7
EuHrNcQPvEVDHMHXbYgdmfB0Q/zi2DoNfTO4x1/XxaFkQ7X4fnzl53em46xh
W6qhPJhHPdYwcq2Grg3Grd3QGubRhzUMqoZXGmIE555viFsc49pgTD281hA7
4FBTQ3zCGw0xCScPLmYbujaYwb3hvtwU/znXUAxmUY/esI+exPgO/Onnyrve
uqF7zb0ZEhrcEEc2CW/bEKvwjRt619s0tAfetGsoj/d+o4ZicKp9QzHmapfw
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
GMMsclAPzrGONXDn6PCjqurhQaGBVfUcPqAqZvQKP74qduDHVcUp/Niq+NK7
qnnwrGdVeemDk8JPrKof8BO8p6V+pvCMa32qYhVOLhjGvniOcO2YqvLCOWoe
47Pet6oacOfkUP+qmDLY97O274MYvBniGLwZFhpaFVdOCY2oii/48Kr6pJ9r
wPSDqnpPTVyH2IaeS66mzkcNvgNdq1rDt4j3yRhmjXQ9WHJGaGxVjJgcmlQV
X7h2elVcGR8aVxXPxoRGV8WniaEJVXHoTM+jh84Nzauql/C5VbFpnOu18DrW
wM3TnHdL12S8vfdCDRgxNTSlKlbNDM2oihfTHINTsxyDN2eHzqqKI3NCs6ti
FX5OVSyb4nuGI/O976r3y5qS55Kr4HzU4FzfUtUZoqevCV1dVW9cFbqyKnZc
GFpcFT/wRVVxBL+gKnZcGrqkKn5x7fyqvhk841FVcegi5+L7carf36aOM4Zt
F3veLs7HGEYu8L3BuIUet3Gd86pi0LWhJVUxgr1fURW3lvjeYMz1oeuqYgcc
urEqPuE3VMWkGzwPLl7me+voZ8NzaR+63LHOzkft3V2TGN+B6X6vnPVb/ax5
Nv+E/q6KI3eF7qyKVfgdVZ3127wG3tzteZz72x2DU/c4Rl89G3qmKibdF7q3
Kjbd63lw7n7H4OkDHnN2vgx9UVVv3eEaMOPB0LKqePFQaHlV3Hos9GhV7HjY
MZj1uGNHeh014NCToSeq4tbToaeq4tpy1+jtOOtPcJw1J/meWAMjnvN9wqAX
Qs9X1d8fhj6oihcrQq9UxSb85aq49aLXwJVXPQ82v+QY3HnNsf7OTT0Y9kbo
9ar49LrnwZ03HeMcv+XxINckL2f6bcc44+94DDs+8r5hxPuh96pixgcej/G1
d6vizUqvgTWfhD6uiiufhz6rqs/edQ24/ojfzXjPZf1Ez/20Km596lzH+X2y
Bo584bzw6Kuqzgfs+CH0fVX8wL+riiP4t1Ux5kfP4+x/HVpVFTt/Df1SFZPw
n6vqjVWuMcfXfqqKbT85F720TvweWbsmVn7jvDNdkzG8+801YMFfoT+rYtV/
oX+r4sTfjsGg1Y7BlzUj9xo19TN11qqp5/EmNXHnd9egv9etaU8w6A/HYBVz
yQW/yEeNRa5Pz8OO9eP6ejX1evPwbWtizcbhzWpiCc5vMZiCb1gTkzapaR4c
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
z+0X2jcTP3YO7ZSJI/iOmZiF75CJNbt4Hmzb3rlgzR6h3TPxDN8t0/dkpUzv
b2Jf2zUTt3Z1Lr49vDfmwbghzjuuazKGKXu6BrzYJ7R3Jm4NDe2fiR37Ogaz
DnAM9hwUOjATU/h9fUgmbuEHZ+LWXq4xjfPxXKZwHWIzei65pnc+aqzqM8vf
PcCOwzL9jl8nD6aEbs3Fj2NCIzJxBD86E7Pw4ZlYc6znwZcjQ0dkYtOJoRMy
8Qw/PnRS6CfOUSa2ce24TNw6zrnow3NCZ2fqvfNC52bqq6NcYyHnogY8GhMa
nYkdo0IjMzGMa6dl4s0ZodMz9ehw56pd56xMfDrT82DSya6xiPMxzp2DepXX
sQbuXBA6P1MP3xi6IVPP4ddnYsZloUszsQO/JBOn8Isz8eVyz4NnFzovfXB1
6KpM/YBf6T397Gc6yNeuyMSqK5yr733xHOHaRc470DUZc9avcQ2487/QdZmY
cpPvZ1XfBzF4c7Nj8ObW0C2ZuHJH6PZMfMFvy9Qn17oGTD/F72ll1yG2jueS
ay3nowbfgVO9JvH7ZAyz7nQ9WPJg6IFMjHgi9HgmvnDt/kxceTj0UCae3Ru6
JxOfHgs9molDj3gePfR66LVMvYS/molND7neYK9jDdy8z3k3dU3G23gv1IAR
T4WezMSq50LPZuLF047Bqecdgzcvhl7IxJFXQi9nYhX+UiaWPel7hiNveN97
er+s2c1zybWL81GDc/1LpjNET38V+jJTb3wR+jwTO94PvZeJH/i7mTiCv5OJ
HR+HPsrEL669nembwTO+OxOHPnAuvh93+f1t6Dhj2Pah5w1zPsYw8k3fG4x7
y+P9XYcxDPom9HUmRrD3zzJx62vfG4z5LvRtJnbAoR8y8Qn/PhOTvvc8uPiJ
7224nw3P5fDQp44d63zUPsI1ifEdeMbvlbP+q581z2bZ4OsyuTjyV+jPTKzC
/8h01n/zGnjzt+dx7n93DE794xh9NXXkmyoXk/4L/ZuJTf96HpwbK1cMno4T
/z12rrOThPdy9dYfrgEzxotr4+bixQTh4+fi1iThE+dix4S5YjBr0lwxWMM6
asChycMny8WtKcOnyMU18lEDThFnPQwjzhp4xD2xBkZMk+s+YdB04dPm6u/5
w+fLxYuZw2fKxSZ8xlzcmj7XGrgyS655sHmGXDG4M2uuGEwiN/Vg2Ozhs+Xi
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
oyZjzvqARjXgzrzh8zRiyoKN7gd2cB/E4M1CjWLwZpHwhRtxpRe+WCO+4Is2
6pO5G9WA6RM2ek/0EHWIwSnmkgt+kY8afAcmarSGbxHvkzHMShrVgyVNeN2I
EQPDl2zEF65VjbjShbeNeFaE5434tET44o041G80jx5aPXy1Rr2Er9qITeSg
HlxjHWvgZtkoL0ykJmN4x16oASOWDl+qEasGhS/XiBfLNIrBqeUbxeDNiuEr
NOLIKuErN2IVvlIjlpGPe4YjazTaN1xgv6yBYcwlF/wiHzU41zv5DNHTW4Vv
2ag3tgjfvBE71g9frxE/8HUbcQRfpxE/Ng7fqBG/uLZ2o28GzzhrxKENGuXi
+5E2en98T4gzhm0bNpoHj8jHGEau2ejeYNxajcYwjzqMYdDW4YMbMYK9b9aI
W1zj3mDMtuHbNGIHHNq+EZ/w7RoxCWce/3fXTRrdG8zg2fBcfo3/3rRRDGaR
j9qwj5rE+A4s2+i9ctZ39rPm2dwWurURR/YI7d6IVfhujc76Ll4Db/b0PM79
ro7Bqb0co6+ODg1vxKR9Qns3YtPengfn9nUMnu7nMWfnktDFjXprN9eAGUND
+zfixUGhAxtx69DQsEbsONgxmHWYY9N4HTXg0BGhwxtx66jQkY24Rr4DGnHq
cK+fw3HWzOV7Yg2MGOH7hEHHho5p1N9nh85qxIuTQic2YhN+QiNuHec1cOVk
z4PNxzsGd0Y6No9zUw+GnRIa1YhPozwP7pzqGOf4NI8XcE3ycqZHO8YZH+Mx
7DjH+4YRZ4bOaMSMszwufO30Rrw512tgzfmh8xpx5aLQhY367HTXgOuH+N10
nsv6JTz3gkbcusC5Zvb7ZA0cudh54dGljc4H7LgmdHUjfuBXNeIIfmUjxlzr
eZz9y0OXNWLnDaHrGzEJ/1+j3rjMNVbxtesase0656KX7g/d14iVVzjvINdk
DO9udA1YcEvo5kasuiN0eyNO3OoYDLrTMfhyd+iuRv1MnXsb9Tx+TyPu3OQa
9PcD3tOarkNsI88l1wbOR411XZ+ehx0PhR5s1Osvh15qxJonQo83YgnO/4Zp
a/ujjZj0pOfBoYedC3Y/G3qm0e8A/OnQ4DbWhR5pxTmuPdWIc0851+beC/cD
Hx9x3sGuyRhmPecacOHF0AuNuPNq6JVGzHjJMVjzmmOw5o3Q64148HborUZc
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
Yonnkmsx56MGvDgjdHro/wFiyuo4
           "]]}]}, {}, {}, {}, {}}}, VertexColors -> CompressedData["
1:eJzsfWV0VFnbLO7O4DIQggzuDg8yWCAMMLgm2MCggwQLOsHdYXAZAsGd4IRA
jEDciaebpBsJ7ty+a/XcH7mrVqa4+7ydvN/9xeLQ7NO9zzl716mnnqrKI6f0
GZMtS5YsO1pmyZLd9Gfoo/Hf3pU2imPT7nWGXg+QuNSuDb8tdxd0/GJijz+m
2hhlt7Fail27YJm8yGViX6d7sr19tWopvxrF6u/jjx2vBcv7GTXG779wT7Ls
yn+4nJVRDM8ulbZrHCh7w163cLvkLudvVWmQq6hRlu9pOrB5uwD5OVRXfNNQ
dzjOCP9JxV5VNMq4s6s8+ucPlKlR3klHj+DPo/MW/dyz2oBaRpmb2v3lrycC
5cvvH+r5J7nLrSkbKp0obpS689rs2zk+QGY3OeeZf4K75A73KfllkFHq/f7D
2N/yhUiN/NnzbwvE3wf9LjRvaHw0/7dy+y3yLmcU3fThDrbxAdIxdv/G9dvw
93w7a8WWO72Msv+3hWumbwoW79lff1h++J4cPTj+aNVhRjnr3O7y1EYh0j93
nRGnE+7B799n/apuRxsYZcHEw1vGfg2UgaNsw7Lnuic+P34p3KekUYIH/qz7
uClATm6eP3/pHHc4/2je0PEDo481+bmqUSbVThg/fligPAiquC7yPh4fHW+e
3/1ysQFGORwfWndZYrBU+6PPDVf3e+LhPOL3yFSD5EqotLfJID/xbFTKvfG5
u/h3JS3JsSzGIIGl8pWcNfOhnIifEvvFFn8eXUf0e9n7sHSnoQn+iQYZs65q
w89lH8kP+3LZpP5+V9rX7eIxsYZRno8vfG3askD56Nc1/nWIuxwtfLm9XSGj
xN6qVzS0ZIAUnlNuROme7lJ90tjZz/Ib5VjZNkcPv/CXOsOaX7nWjl8Huk7M
3bKnnen7J03MM3doiCzJPuC85yv+eUTXq9yNDyu65jVK1jZN7Tt6+MuHrxOz
d2iInwt0/6B5hsfB+Gie0XnRfKL7Bz2naN7QOOi5RtfrTJdlq9cbDXKlevEi
03P5yfBZiwa333oXzgN7fNW3DsP2jTVKQ7t7LmtOhUj0J5chn4rfh98fzecg
X5vrK8cb5YY+a/ykoBCJ3TrkWKjVfXhedh9B50XXBd3n6Pei+wFdrzeNS5aI
jTLI0qGfl1+weiiznQ7XcpK7cHy0bqDx2flHx9F50byh64K+D/o8Wg/Z9Rl9
z9hiVtfLbzLKmF32vtsSwiRq36r4I6n4OqrCV+w+2/9USradtkapWPPXVr+P
D5bdjkG3J23BOI2d/4yGr9C+htYBdJ+gz+/UnzjRUW+Q6LB8Oex/eyTvria/
sJ19F/4u9vtrja9eTB/TduAuo7ze8/bIqiHh0rLh+rCLlTxofIX2C3Q/o/0R
/S40n1rjK3Td2d+Fnt9x8QOHeoYaxLN/3hpr//SVkfnePjpZ5S68D9H9zOJe
9Dyi39XJ1nnRsJ+Nsq76TXuH1CBpm/LIe/iYe8rwFXofYfFVcpO/fRxGGeWM
1c5Bfy4NkTPfFuWOz47X4QJbn7+qFW8Qq8BSh1t4PpS4dq22zhp6F94nCFeg
+xDty+z1UoWv0Lyhebj+7uXcJs8NMiJn2QFB9fxkc3D3wtcO3cXrOTgv2jfR
vKHzHt5eZndysul7bim9qcrVR1KzzMW/PZbh+WTxFbpeaH1G46N5YPdfNA/o
OItv2f0dzT9ar9B9hT6PxkfjsDhqUdQt205bjaIPW1txf4Fwybf7QtPbWT1o
/grtd3sX6nb4rDaKXaW8tZw2hski56YtZ/jfh/gQ7b/sedG6hNZVhK/Q92Hx
FRofvb+jz6vir9B12WW3LCZiilHujBzstKhaqLRed7p3vo73af4QnRcdR/sU
i6/QfKJ1Cf0utC+jz6Pzot+Lxu/l4nGi3g6jTLPz7re4YbgUaDrGaXcRD/p3
oedXV7JTsWVdjFJkTMq5hWWDZaLuQ8XZM+/BdeDrxa65D60wSmJ8VPjccWHS
93gB3eA79+H8s88jWpfWVTxUcsMSo4RUmNF7Q5kwsS7R8OcxB/F7Orp/0HPB
rgNonhvmPmB/7IBR3pf+pduek+GyrWbCoift8PVC9w+6T9C8oXFY/go9X2ge
WF490K/tK//DJlzUf95fR0LCxb1aweCsvT3g+o/mE80Del5YXgKdF63/G9tk
91u01ygOkVbvNzuFy7i6rrUf1feAeBI9Xwj/oOMsf8XiK/Qcoflh9010HF0X
dB3RfLLrM8tzonFY3IVwwj+4rpQZ18WYcR3imRE+R+PoChRYdPeiQXZedB7/
21AvGX5/2g3X8W7w86r4q4ih+zZUOG8Qm487Iw/n9ZKa45zztBviBvEt+l3J
TseqtowwSNMDzz6kPvKVjtXCHfI1uPt/eKcgM+/0xsw7sfwVfE8cPPPJiOMG
addi59OrpTwlZn2d98/r89+f5a/QdUfnRcfR+xEaHx0fdLWnx/EzBok6fSFv
uxue0rWHu32CrVu679H/130F6oPo8+z7kSr+CtU90fN7bED3dgcPGaTJ7B3f
/Kp6yJbL5/X7crnB74/uZ/a6oOcRXa+hDY0TrYINMnfXp53e9X2lzoma5RqX
wM8Ry1+h64vWATTPsJ4Ffhe6f9B90tXmTCPb1wZps6J47nEL/eTYLx9/33gL
34dNXfJ8cD1qkJfzV4947+4hLg1GdnSwcpPU67OnjL9ikCdTL7776bSXbLZu
O63RbDd4vdA8p8erp/08mjfbfPGhOU8ZZN3rI/Pm/+4pPzx7f2K8uMF1YNWt
g6Wq3zb9rgaXkoof8Jboz5eX/HnQjV630byx/BWaN/R70fOFrhc6jsZH84DG
QfOA7ucvE5OGF75mWgdq311qzOotnkvyVj+5zA1ed7SPs9eF5a/QPsWuz+j+
ZHEUfO8G67Oq+iBbb0WfZ9+X0brK8szod7H1QZa/QuOo0l+x/BWaf1X8Ffve
rYq/QvOJ7kOWv2L5E1X8FdJfseuA1vyV1vVBFt+iec4s+iv0vGitv2J1j2g+
2fqgKv0VxL3gPkf3CXq+WP4KvSeieVClv0LrM9KroPlH9zmrF0LPFxoH8V0s
3lDFX6H3VpZHYq8vy1+h9QG99yF8hXA4mn+Wv2L1V+z7I6u/Qu81di4ri+38
YJA1HStvrRngJ8UKbAxyisLX3VL8FbrfWB04ek9h+SvEV6D7mb0P0e/KU6FP
z4s3DDJX71f8dF9v+RgbFFltqxu8D5H+il0HWP4KPY/od+1xju71eb9B9NdX
/VEo8L7YDXrSsNr7O3B+0P2DeF2Wx0Y4AZ2Xfb9WxV+h9Za9XvT6A46j+5Pl
r9A8oOuFnjsWV6DrgvhAtM6g+wHtI+g4ug/R9WLrR2j+0fyg87LrP/o+rL4d
3VdofUbjs3UKVfVBlr9C15flr1j+JKPp2xHOZ/sH0Thov0b3M8tfqdK3a81f
sfjKUvp2xF+x94nW/YNa81eq+gfR/cPq29H8I14CnVeV/gqtY2gcxHtorb/S
un+Q5a/QuseeFz2/aN7Q88j2D6Lj6eGrtPctGgfpt9n+QZY/VMVfqeofZPmr
zFIfZNcZVl+N3nfYviG2PojqMqyuhl7fSP4KfX+kv2LnX5U/g6r6oNb4itVP
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
1zHQr+0r/8MmvN1/3l9HQsLFvVrB4Ky9Pej6IJp/NA8svkL7DssXoflnny9L
4StV/YNa669U+TNorb9Kz7/93/bdZ7T+Qa35KzbfGV13Vfk4qH8f9TWz/b/s
fai1fzvyZ1CV74yeR3ReNn/QUv4MbL6z1v4MaL1l/TQyWr4zmgfkS6DKn4HV
X6Hfy+qvtPZnUOXfbqn8QfR8sfVBrf0ZVPmLqsrHUcVfae0vqnV9UJW/KOuP
yvozbGyT3W/RXqM4RFq93+wULuPqutZ+VB/zNqrqg1r7i7L+7Vr7M1hKf4Xu
Z63zB1n+SpX+ShV/xa7/LL5S5c+A8JWq+iD73LH6K1X8ldb+DGh9YP0ZWP0V
q89Rpb/6Xv+rf6u/Su/9JbPm42iNrzKL/1VGqw9aSn/F1gdV8VcZLR9Ha/92
Vf4MqvJxaN9XjeuDLL5C8490LIg3YPXt7LqH5o3Vt7PvKSyOYnGpKn8GVfk4
rL+o1v2DbL4zWx9k/cfYfOeM5t+e0fKdVeErrfsHLaW/QroyhK9YXQ36PDqO
9gv2+yc0WDKz4Cmj5B1UZMZfPSPEyrWoT5FFHjR/qCp/EPFjrL4d6RaQDkGV
vp3VX7H4itVf1X3S7uiVpUYZOGT/wZ0dwqRP0aE7FpzDOAetA+i6oOOq8BW6
/9l8HHb+0Tyz+Tgsb8/yV6r0V6rwFeuL0jD3AftjB4zyvvQv3facDJdtNRMW
PWmH7x923WZxBbou6D7XWn+V0fAVmn80b+x1QZ9H+yYah9XHon1Ba/6K9b9S
VR+0FH/F6sPZ+iCaf635K63929F5tda3q9JfoflE/HNmqQ8i/ZUqfwbEa6ny
Z9C6PsjWuVT5M7D4Smt/BlX4SpX/Fds/yPpUs/nOlsofZOuDqvRX0F8ug/m3
Zxb/q5ofd+X94YhBDrvN928yzUMcAret+1zcDX5/tK6i68vqPGFOHKn3yGj+
7ar07Uivq0p/pUrfrip/EOl12Zw+Vt+uKt+K1Vej8dHvQs8vwldofLY+yPab
oPOy+na0/rcfPPPJiOMGaddi59OrpTwlZn2d98/ru8HjltK3o/uE1bc3dcnz
wfWoaZ7nrx7x3t1DXBqM7Ohg5Ubr29E8IB21qvxBNJ/o/kHfh91HUH8E0smj
ebNU/iCafzZ/EM0Dui6q9O3o+6DPo76YjJY/aKn6oNb+7Sy+YnlOlr9i8RWr
L2X17ar4K7TOaM1fWcr/in0/gv45AF9p3T+oyr+d5UMQTkC/K6P5t6vCV5by
v4K526Q/A9I7oeNsfRDNpyr9FXteVf2D6H5A67Aqf1F2/0XzgNZndv5V6a/Y
5yuj6a9U+V+x15etD6rKH1Slv0LzxuqvVPlfsfgQ+bez1x3NG/o+SHehCl+x
+nY0n6yvL/q9aHxL5Q+y+is0/0iXcnBv5z7XnY2SM/qy//LP4XL/9g2r6BH4
/mf17ej+0TrfGZ2X1YegdR7NG6u/slT+IOt/hfZxVn/F7iPoOrL+V6y/KIuv
0PiW0l+p8hdF9wP6vCr/K637By3lf8WuM6z+h/VvV+Uvain+is13ZvNxWHyl
yl9Ulb7dUv2D6Pey/gAsf4X6LFTpr/6n+bdbKt+Z9RdVlT9I++9p7N/O5uOo
8hfV2v+K1V+x+IrVX7H+7Zmlf/B7/a/+rc+D1vwV2gfZ/CO2v4Dlr1aUXXS7
mq9RavU1THCOj5QtD91yb6nomWn6B1l9O/r+6PlVha/Y/kH0/sjiKzSf7DqP
9l9V/JXW/YNa1wdV4StL+bdr3T+oyr+d5a/QusQ+R+z7HVqv2PcatA6geWD3
d7Zvke0fVJWPg64j6oNm8we15q/Y9Z/FV1rzV6zPoar8QXafVeV/pcpfFOGr
HfPudhgZYpSr/Rd12jU4Sl7aeXw5aOspLTrZB60KN0rrLSe2Hf4zSioNS+19
fZjn/7n/x5rv/yXfWR9E86/Kn8FS9cGMpr/KaP4MLH+lqn+QrQ+qwlds/yDC
V2gfYfEV4rG1znfOaP6i/63+V6rynVl/URZfIX6J5a9U5Ttbqj6otf6Kff/V
mr9SpW9n+Um2r9ZS+nYWX2U0f1FL5eOg76Mq35nFIei+UqVvh/WFdPoH0+4X
lvJvR+9ZWuvbUf8gWx9UpW/X2r+d7R9U5c+Ajqvyb2f7Slh9O+vPgPZNtj7I
+rej5yuj+bejeUgvHyfteqWKv1KVj/O9/YMZHV+x15edf9R3jPDV4yojD3eI
M0rL0S6b3P+OljZ/PW7atp4X5K+09r/SGl+x3z+z8FfofmNxiKr+QZZ/Zn1C
WH27KnzF6q9YPSRbH/xvxVdwHwfrWEbzv2J1a6r0Vyx/wuI62P+rsf8V2z+I
cA7bX8bqr9j5Z/PvWP2VqnwcVf2DbF2A7eNDdWSt/dvR8zj7+u3Bh6KMcqDh
3sH3tsXKtH0t5oZW9ZarIxpM7BtqlFZ5Z1e6ni9epthunZ+/vY/8/PnSk/6x
Rpk4d21+/2ox0ul511vD7bxE3yu+7lcv0z5V8lbZva6RMjZgx/m5hTyl8/Kf
9wTfN0r18E1eWzZESvOQySPsv3qIU90Z3zaZxhle5MEnQ84Yydbx8duwX71k
2C29g7fpeJ/mdc6t00fL3ZcXPLp1xXgPHUd1T4Sv0PdfH9qw26YEo5wbZb84
zv6x7N9eb2vqeU9YR4so9G3MedN83vQP0588ESU9B5U7EjwJ11XRcbZ/EOkf
VNUHUX8f6+uL5p/V/yBdGfpdqvoH0TisngfpZ9B5WX/R760Ppr2+LE5A50XX
C90/aN9h9e2sfztbH1TVP8jiK9ZflNWZsP7tWvNXbP+gqvpgZsdXqt5/WZ0t
exzVBRA+RP4qLH5m6+Zs3hnCVwj/xGwpse9ypFGu3yi8vXtorDi+PpztfX9v
iE+GrYjyvxpnup83VJ/+cVS0XGyf60jDkl5wfFX5OEhPwtY3tc7HQXhDa/0V
+x6d0fgrS9UHte4fZPEVek9n+wfZ+Velv0Lr5/f6i6YdB+kx2Pogmmc0P+jz
aN5Y/3at9Ves/1VG8xdVVR9U5d/O5jurqg+yvutsffC/1V9UlT/DgVt/d+kQ
lyJxa3bUOp9dJ9EDS18L7f9I7iwrWvfxDIP0/TBhb8T2JCnTMeZQmeUPxbFP
+KFY0zwPvvrLyHXRibLmskdo6nVfOfe2ZcSbS0YJHLTlWuOn8dL4m02Z3O99
pJjrwOa3rhnl71Yjqn+Ki5dnf95r+/Cpj/z0+YfDdQ+b8FXnbFnblkmQ+vkW
NKtc6YFsOR13a+dRowy50Gh2XKEEyf5H5NGzJR9APg0dL97vx6I5woxSrZF+
wtGIODl2eOuNqeV9ID688mz+HzEmnPnX/BsBfZbFSt1Xvmd7l/GW+3leXPw1
wigJ5zokXGoeJwUP6stZH/CW5quy//yb6fNH9QvimznHyqXuf3cY1tBb9o0c
uGKeafy7015UvKmPldv7i/jMH+UNeSrEB84L2/0uMsYo7QrnbHE5OErm9ev0
8dl8T8iPoeNeJ68lzAo0vU896ljoauMoeX6/5Jn7bT2V6dtZ/grNA5uDyf4u
1MeK8gcRzlelb2f9r9ZVPFRywxKjhFSY0XtDmTCxLtHw5zEH8fyo6h9E46N5
ZvMHWd8/Nt9Z6/xBVpeldX2Q5a9Y3sZS9UGt9VfsPMD6ewbzZ1Clj1XFX1nK
/4qdTzYfBz2PD4KtTxgbpYid2+XmA5foZGy/IgXGVvUT4+4Nm5Z7pEhA3dXH
F5bUSe6t+iyF5j2SuI+1ggtPNEj+9SWzdNubJB1O7ygwf/NDGdCkQOsx2w1y
/M7D6/sWJMn9v/q/Wdj/oUy4103vaHoe1441rM11K0E+7nauXPbyA1mSJ9ev
xk5G6fzHut+6vU2Q1lXsyk5KxvgK4TEWX82tM6NfadPn298ceLRuuXg5/yFL
5422PhBf1Zy68dvLaBNuGf3qkHNyjITtXh22ysVL9qQeXpsrzihdH044eOx+
tCzu3O3b3VZeEF8hHIXwxt3tra9Fm/DVip5Fau0aFyO+XSr1+n2OF42v2Doa
wkuo3oo+j86L+DoWX2md74y+P8JpqD6oSn+lKn9Qlf9VRusf1Frfzvq0s/p2
tJ6rwlds7okq//Y8Ffr0vHjDIHP1fsVP9/WWj7FBkdW24twutn8wvXycf6u/
YuefxVdsPo6q/EGUs8PyV6xOXpX+iq0ToToUm5eN9jW2PvhTjcSeeZvGS84N
t47Y7NXLmRdee8eVCZfjqS0+n36RILar4rIV89FLjaxTzgwZGCIb73w6mic8
URa5rjpp76mXDvc65w5sHSypdQwVs+bXSa/HBVuFuuvlekxLm2kegfJs9aud
FRP0knCl2dlc0/TSZNxPuTyyBUjr7AtiIlY/kY1dwlbt66aXdvkOnWg9zV+a
B4UN/zwjWWyr1M4bUVAvy1JsD9097idve8Tpgicmy7wz2U/eLq4X52admjid
xccRL1eg6PEWV2+myCr3JgWflddJ/awHxv+x/BHEhw0DZ51ddt8gHRKq++Wr
nCQlXHMen//BV7ZXaL/Ke6lByj6tsshxdZKUnu51v/OUh3L3T+9tg1ob5cDJ
9+uvF0gUjzITHkV/eQB5P6vOT15btTfK9PV3Py3JmiiL9ya9/vvVAxl150Tz
Dc2M8sinjvXbUolScOuLY6Xy+Mrvs8L1u/4yytUlE386Wy9BrmVZadzU+IG0
/HSpbVSICe9Nb1H/QK14eff3xEKlBvvI02sBkweY7tuOMbeijYYEKbzqxuov
MQ/k+Ms9tfJuNEqJWyG9rTsnSJd3mw/k6PZAAq1GfvQw4c86TzxelTXEydNe
WZe9reED68iIx9v84nDCatM4jfccnbf2U5w0+DKxp2MTjG/R+D96BFx8ZcKr
F/PUKxx+P1aad23RcpqNN9Tp/Tlm4eGDJly67Yp/y0UrY6To69WlXyz1gnVq
/7OnvvV5bJT1QwseOTs2Vk6+bXG1dVY8PhoH4dsc3h/8y5rGmZvYs9ylLjGy
cteF5YkTvaRw65MO+RJNeH59tH2pSo+lrAzMofsL842Iv0L6Q4TPEU5G9XQ0
frmDLVfmSDCKW48Gq25/jZJjvaf0zLPOE/Ku6HehdQyte4j3Q+Og9RbhYXSc
1SewvB/r347mgfVfYs+rtX87ul6svp31b2f9GRC+YuefvS7o86z/lSr+ivW/
Yt9b0XVh/UXZ+US/t5v5Pm9kvs+d0vHbsb11auXS0jFyLMJn76XCeily+pVD
3Z7REnn//ctc1eIkx82yOx0c9HI1ccCOAa8iJOKaPjY8V7xcv3Drpf12vfSs
k2S1b4Jp/Thca3DLkkly7PYfo0546GWtt8sP1V4GSf7hP007apUkFU+N3rDc
dPxguVGvPsYHifuUy36JXjq5NXNx52EX9TLz9PBdJ18FSItSRbZODdKJy4Jy
QSHn9LKt2/03h1MwHkPH697eZtXu5BOxdk2Zub+9Xr6UN9gc6OcP8dUJ+3w5
r7ZOkWO1C4Ymz9NJn33nBzT+0U/i7UZHt3+cLD8O63LL5Y5O4sb3qTJqpJ+4
Nbr9bEZYiuy06ri2cj6d5L7nX6XVqEeSdUpnxw6jDHLX+o795cNJMqFcn5mx
+x5C3g/hruu+e/S24Qa5+NZ1VdY3iVLqVMCaUf6+EL8h3NXZ826FEkaD1MzX
o9N7z0Qpd2jf5G7HfCX7t3UR9xsa5UvyyCv1qiRKnyIOTr2K+YrtghcPKv1i
wl13Vtmcj00Qr0LNz7oHP5AT7QrV+t/3m/5gv0tzghPEafO5kNU+GI8hfOXV
4l2nMfuMsmZ0s62zrBPEYWn2YoNrPoB8I+InYR15W+uio014oO/jj7KsR7zM
/9pxn9V0H3lfqdWKciYctdUzyiZ2ZqwYO49M9ingLRNtCl46bzpvsWH9L29x
iZOET1u/BL/D+BCNg3hLdPx4UP46E0w45OCGqU6PnWOk188Xuizc6AVxiEP3
gnZ1442So6dHmSvW0dKw07RTFb56QvzJ4iu2j1gVvqqRWKHPL35GObmx1I0z
+aPkjrdxyMm6uO8D4VI0DtKFsngYzYPW+ArNJ5oH1hcanZf1F0X7Dvq9LL5C
x9H4aB7QOCzORPOD8BWaf9Y/XBW+spS/KOK7tPZvZ+dTVf5gjzT4qpgZXyX1
i8ppLbFSb+LmDT7d9VLQd1jho4eiZLJHcOz5V/FyuG6qdZGrJjzTuFxc6sNQ
iK9e6580nVJKJ/e8s4w7564X3/qvanS5Egjx1Su76bsnmP6+Wd/57TtHEy5y
GLfA+BPGV4i/QnXP5tVr7h1dNEXyfOxbdvMunaw/1jfhXBs/yF+taTy2xNNm
BrF6medvO/ck0dfbsuZx1EPIX5XfcK1TqWiDrAhzeuuRnCj+DW3P1fTwVcZf
IXyFjiMcgvir1398qzDqpAkvbfua4Jw9QW6+6fdwdgGMfxC+ej+gc51apv3r
9O4Rv7tcjpWP74rkT2jrDfVvluKvmpbp1e2l6XixKyt+2tMpWhxSHzscyof7
WFn+Ch1n+auQ53tPuN02StkfarZ3aR8pedptuTEhBvfhon0Z4SjWZxjta2jf
sRS+ymj8Fau/Yv3b0Xkt1T+Ifi/iMVT1D6J5YPPp0Pxn9nwcVfhKa327qnxn
VfiK1Xvc9tvjYz82QvwWxn6sYsJBa52ydbe2ipfNk6K98jZ9LAXmZPnz9E2d
5BwVue9851jZ1WtZqzmNYyV7g1aDm3bVi13h0r+XuhElfW387VLqJkjFtfPP
XnPTy8eLRzfc/y0U8leb5n247ZCUKK+PzI9o7amXfiW/JTnXCYb81SLXsmEx
Lno5Gn1i3IKFeomMymL9piHGXbXT8FdfzfwVwlcnzfzVUTN/1TuD8leIp/oH
X+0346v7ZnzF1gdV4SuET1B9EI3P+nj8+PXx4OwmPOYfdbbuoTxx0vWDfshK
R29l+Ar5jSDeQxW+QvwVwj8IX6VXH0yrf1OFr9B6/p+qD6b1w2H17YiX0Bpf
sfnObH1Klb6d9WewVL4zq3/OaPk4LH+lSt+uCl+hz2e0/kGkx0N9suh5vGnG
V4/M+GqdGV9tMOOr/GZ8lduMr1B90LrsxK3TKydKtsPBqxd7m3DXxbIx4eVD
LIav3hsOFdm+LFmi34V0+pJFL8MWbGlptw/zV4u7r95fOCVFar576vXzlyS5
YBzeZ4bNI8hfbTPzV+XM/FVZM39VzsxfrTTzV4Hp8FcId6nSX7H8FcJLfRtX
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
i6J8Z8S/ae0vin4X69+uyv9KVf5gRuOv/qfl47D5gwgns/wV+r2s/5Wl6oNs
Pk5G82dQlY+jyp+B1V+xOEfrfBz0HoHwlYdD8dk1+gVJ78evJ1VrkSDn+l+P
qGbCU7vP3f5pf8MIcZrhm5CaUyf7P2UZMqNbvHwd2bDJBdN+ENPmaI+y13RS
16m57YRfY2XB60M/fhkXK7+tfxoZPsiEf14UcIqRKLnT7fW0NvZxsqC8c1Wr
hSYcNTapS+01EdC/3co4zfanzwnyd+TnHC9MOK2aW2qHITYh0I8UHb9U26+4
jUEnvfWbGww/qZeGbkdaFAsNgPVNhK/yjel65EaFZNk5KUvus9X0cq5R68Kd
3viJsZv8+mOtFCk9cORf91foZF7+Sbe31/KTgbt+7rQ9T4rcWv9tXtaDOjk0
4uz2xI4Y16HjlRPsqswcbJC5VyfcrXo8SbYszx/d8QTGbyiXh813RvgK+bej
z6NcHsTjofERvkL4B+XjsPhKVX0QHUf5ziy+Qvwem+/M9m9mtHxnrfGVqnwc
Nt8Z7e9oHlTpr9h8ZzRvqvRXaN9k8wdZfIVwFOL3VOErS+UPsveJ1v6i6Llg
851Z/ZWqfGeWv+p05kPstzJxEthy3e3zM/RiV+306B55IqF/e4qd37TUlgny
S5F8qxa466XvjN7u/n1CNfdvZ/NxVPFXCOeoysdh850RztEaXyHeDOErNh8H
1T1V4SuE39A4yPcMHdcaX7H6K1X8FcJ1lsp3Rn3BluKv2L5dFl+p4q9Y/RWa
N/R7EZ+J8DA6zuIrNI4qfTt6Xlj/9sziL4quo6p8HK39GbT2Fy0w2q7Cxbzh
kurRzKf7oSSZVue9zeeaCTS+ut02wa5Ih3hpWrzHwoL79ZL39LSA6TnCYX2Q
xVcIR7H5OIgvUpU/iPCVKn076k9UVR9E9T5V+Tha1wdV6dst5d/O6ttV+ber
0rdr7d+O3hPZ/kHWr4zVWbH+DGydjvW/0tq/XZW/KNofWX17ZsnHYfXVrL5d
lT8D0l9lNP5Klf+VKv6qit3k+TlLJMq6S/HDj3jrxXb0yCw5a4fA+t2c7tcm
PfJNkuoh1ZauMeGiKREhrX8sFiT1F2+OOBuql3VO87LdNeEuXa0WozcUCBCX
4P4Hyrg/kQeVRwVWb62Xv7b6rCvUAfs/JDhHbHV+ZDp+5emz9UV0Uq/B6jV7
pzyCOnbk05XT9lu48xuDPPKNK7/0XKKsP7HFNXQL1kEhf9Tw+8uyeVkbZfCV
XeO/dUyUvPureDaoj/XtiEdCPgzoeL6L11YGmN4Lnuw/cCOlZYJkdSzk4dMW
5zij42wdDenVVfUPsvp21p8B6a/Y/EGt8RWbP4j4K4R/EH+lSt+udf+gKn27
Kn8GrfGVKv2V1v4MqvxFWXzF1gfRPFgKX6nqH1RVH2T7B1XVB5EeHunbVemv
LOXfjnwMkN8Uwifn3raMeHPJKIGDtlxr/DReGn+zKZP7vY9scd3Z1jHMKGW8
qg696xonlXvcrD0mO/YLhXgA8BhsPg7a35F/+/rQht02JRjl3Cj7xXH2j2X/
9npbU8/jegTaTxGvi46jfYrtK0f7GquzRb5J6PMIJ7D5OGidZH1TWf929j2L
7UdD/IOl/K/Y+Uf7Jtp3VPm3s/6ibD6O1v7tqvIH0f2jKn+Q7R9Ule+syl80
o+Ertj7I5uWp0rezfvJs/6Cq/EFV/YPs72XXc6RTQrwQqq+x+TgolxnVs5CP
KDrO+rez/qKsfzs6L9KZsPmD6Lwsz5Oef3ta/TNbl1eVj8PiKzZ/EI3P4itV
/u2q8nHQPCNfd0v5t6N9BM0bWj/RfsrWB1kchT6P/ApY/Y/W/gzoOqL9iPVn
0Bpffa8/Q9r9lNW3a+3frqo+yPozaO1/xfYPWsqfAZ0XPY+q8p3ZfByEr5Bu
GeEoxIMhfIXqcenhqwQzvir4nfmDCEepwleq8p3Tyx/MKPk4LL6yVD4Owl2q
/NvZfBw0z1rjK9b/Smt8pcr/SlW+M8tfsfVBdh9B/Kcq/RWLr5AvFroPM4v+
ir0uWuuvLOUvytYHVenbWf0bWudZ/grpnVj/c3f/lttafjPI9I2zXhfdnSg5
Lq3MMXaRL81fIRzF4ivEI6H6oP2BnhMvBJvu//OrX+90jJefnTuOuLHdB+Ir
1C+GcB3CV6g+yOIrNkcG4SWkj/r/+Or78gdZfMX6i6rKx2HxFdp30LqK7h8W
X7H1QXRdVOUPqsJXLH+lCl9ltPogwleZRd+O9nH2urD6K1aXzn4freuDqvgr
9j1OVf7gVIdG5To90EurXrd+XThLLzufd3UbZMKPyLcT+Rug/jv70Kkfol6m
yDT7juNC3ibJ6kV/Jxdp+4jOH0R4DPFayE+A5a8WXd36a/4/jTJjbeHsr8cm
yNdl7ZOSxj6AfXMIXyFcx+Y7sz6WbH0Q1T0RvkL1RHReVfmDLC+H8BXqH0Tj
I307eu5YfTs6L5uPo0p/xfpksv2DrO8fy1+p8m9n8wfRPqtKf5XZ8wfRPmup
/kF2HiyVP6iKv1KVP8jyVIOu9vQ4fsYgUacv5G13w1O69nC3T7B1g/k4tvni
Q3OeMsi610fmzf/dU3549v7EeHGD9eimLnk+uB41yMv5q0e8d/cQlwYjOzpY
uUGcifzz0efZfJy8KXU6PMibJE0CFzT199CL45yXTXpnDYb+6o7vK1SavOiJ
tC1ePmpID7288j2XL5ejv5y0z5fzausUOVq7YGjyPJ303nd+QOMf/WTN0+fD
lndKkdRtI2fOm6mTNsn9D2Urg/kx1D8YacZjtc14rLMZj6E6JpvvjPT5iL9C
+IrVXyG8N6L+rj/E9Hnv6v5H6r+PlRy2jpuzT8X1x/+U/iotv4E+r4q/YvXt
aD1n9VeszzCr50H7oyp9O8xHA3VAeJzkYVj+in1PR++JaBzEe6B1Eh3/J/ck
2px78s6ce4KOs/PG8idoHtD3YfdNlP+CeBh0nyP9FcJX6HqhfRONj+aBzadD
859ePk7a87L8FZuXh+YT4RP0eYQ32HG0rg+qyh/U2v9qS/m3Pet1i5MKJdfN
2D1PL3eSN8eWuBQhfwToXsYWixdjsx4+1jv1ctSwtr9L/3BxadY6sX1igoTv
fhbc1EcvJc5c8l/2WwidP4j8QlXlD6K+SKQfQ/p8Nn/wH3+G/WZ/hvtmfwaE
69BxlD/I+jOwPpxs/iCqk6rKH2T9GVj+CuErVfmDWvNXqvRXqvwZVOnbVflf
qeKvVPkzqMJX6H2Z1f+wdUmWv9K6f5DVX6H7gcVXltK3I3ylqj7I6pG0xlfo
+yOcw+IrNP/sedG6VH//nXFjZzyWUvbZdtTw0olniQ25l1eOlaR+UTmtJVbq
Tdy8wae7Xgr6Dit89FCUTPEIjj3/Kl4O1021LnJVL20al4tLfRgq1mnyB+3M
+YOv9U+aTimlk3veWcadc9eLb/1XNbpcCYT46k2a/MHP5vxBhK9QHRPp9lH/
I9KPIX9R5N+OfD5Zf1Hkf6Uq3xnhK8TLsfnOqvxFWR8P1v/qH//2tWb/9hNm
/3bW/wrxh0jnw/pfIf0VWx9k8RXrL6p1vrMq/RXb76kKX7H5zpbyF2X1V2jf
YfMH2fqg1vgKzT/ir1T5X7F8C5vvzOIrVf6iWvcPqsofZPVXSE877J3VlDwn
Q+WHIut3Ta+XJL+GPLUJapQomydFe+Vt+lgKzMny5+mbOsk5KnLf+c6x0tns
3x5k9m8fnk4+TtWg8Sfj6iTKrI2eV4aacNf0XIE3ThXEeYJsPg6b74z0Y6i+
ifJx3BrdfjYjLEV2WnVcWzmfTnLf86/SatQjOh+HzXdG/Fg5cy7hSnMuYaA5
lxD1Cxx/uadW3o1GKXErpLd15wTp8m7zgRzdcN4N6hdg/UVRPRSNz+YPsvnO
rL8o8oFHujut/UVV5Tur8m9n/UXZHBBL4Ss2B0dr/ytL6a+0zndG+yPyidU6
35nVX7H4SpX+Sut8Z1X6K1Z3wfp8stdXFb5C7zuFzPk4L835OFPN+TgIX+3q
tazVnMaxkr1Bq8FNu+rFrnDp30vdiIL4SlU+DtKDqcofRPjqsk3SnO2rUmR/
9RrncnbUSdDi3cn+fo80zx+87rtHbxtukItvXVdlfZMopU4FrBnl7wtxFOKv
UL8Ai6+0zh9E+ArxV2h8xMshn1uEr1TlO7P5OOi8rL5dlX+71vgK1fXQPo7m
jc3HQTgKXS+t8wfZHEDWn4HNH9Ra387mO7P8laXwFYtv2boti69U+TOwOE1r
f9Hv1V/9W79WVforVB9E+itUH0ytY6iYNb9Oej0u2CrUXS/XY1raTPMIlEYd
Nmyqkk0vH34psD7JWS8PWy6fv/AuxkWnXUIOjd32ROb3mla6TBe9jDycL3fj
8f5S0lwf7G2uD877Tv0V6y+Rnv7qi1l/FWzWXyH8g+qA/+CNtWa8MSsd/RXC
UarycVB9EPnho/ogwglI54/GR/nFrP4K4SJV+itV/gwIh7D+DKy/KDqe2f1F
VemvVPlfsfVBVfp21qca1b9U5eOw/YOsvyiaB7Z+lFn829F8onFU6a8ymv8V
wleq/EVZ/upSbb/iNgad9NZvbjD8pF4auh1pUSwU45/mHRZXH2+fLNUdu3x1
LKmXQZ/6bra95icnzPzPMTP/08fM/zS9k7ql4X6DvK5lPaTB7CTZU3fPmvI2
D2Hf39NrAZMH2BilY8ytaKMhQQqvurH6S8wD6OeAjqfXP5gWzyB/BtQ/+MrM
29Qz8za3zLwNmz+I8AbqH0R1KMSfIJzD9g8i/IPef9F50Xu01v4MSDeF8nG0
9m9n8ZUqf1E0z2w+Dut/pUrfjtYxtj4Ic8QymL5dVX1QVf9gRtO3s/k4rL83
mge2Pqgq35nVt6vir1icprX+CuF51p9fa/92xPOo8m9H+TjItyqj5Q+ifByE
QxDOYfMHUV3AUv6iiN9Q5S/K+i+x/gz/rf7taD1H6z+aZ9a/HfXFq8ofZP0Z
0PrJ4is2HwcdR/yJqv5BVfiK5W1YfwaWv0LXS2v+Ct0/LH/F+mOw+Ir1F1Wl
b88s+Tisfyzaj1TxVw+CrU8YG6WIndvl5gOX6GRsvyIFxlbFdTfW34D1b0f8
FdLhqMofTA9fpc3HYf2vEK5T5S/K8lcIX6nyv0K4juWvEL7S2p/BUv7tWvNX
rH876y/K1gcRPmf7B9F9yNYH0bqN5sFS+TiW8m/Xmr9i8RXSs7H9g1rr29n6
IMvrovlkdVOs3p7VX2W0fByt9Vd1b2+zanfyiVi7pszc314vX8obbA7084d+
CKy/AcJXyC+UzcdBOE1VvrOqfByt853Rca3xFdofWXylKh9Ha/5Klf4K7Y+s
/grNj6XycSylv1JVH9Q6H8dS/gyZJR8H6WfQvol4VHS9Mlo+DuuHoIq/Qvyh
1vyVqnwctj6oNb5CfnRIfwX9PxXl4yB8hfgr9HlV+Tiq/NuRzhzhK3RcVT6O
Kv0Vwquq/NtZ/grt16ryB1X5t7P8FVqXVPm3q6oPqvJvZ/EV69+O1lut64Po
OMIDltK3a+1/hX4ver4QvlKVj6NKf8X6t6vKd2b921XlD6JxMpp/uyp8xebj
oPe+/Gnyceaa83GQfwLKxwmbtXL86PXJUn1k7cR1H3XS1bPZsro7/eRK9ilu
DXYky5QHi5dUeq2TRsUi/T9vwvXHyxuHNPjiaJCAJQ/jUjYmSYeYJfVc5j2k
9e05bb+FO78xyCPfuPJLzyXK+hNbXEO3+NL5OOH3l2XzsjbK4Cu7xn/rmCh5
91fxbFDfl8ZXrL4d9Q9qrW9n/dtV5Q+i8VX5tyN9O8oftFT/INp3kD8Dm++c
2f3b0bypyne2lL49s9QH0f6eWfKd0Tho/hGO0rp/UGv9FcJFWvtfofMifMX6
X7HXl8VXLH91s1FAzwSrBHmaNzXs/W297H33beg1x1CIr3KOGVB09k2dTGh/
b3uZK3qpPn3yB4cvAVJ/8eaIs6F6Wec0L9vdGXrR1WoxekOBAJg/iPTzCF8h
PKY1vkL5zsj3CfknIHzF5g8ifIWOsz6cCC9ltHxnNL4q/kpVvrMqfTtbH2T5
K1X9gyy+Yn0U2fog8r9i9VcsjlKVP8jWB1X5i6qqD6ryv1KVj5Oevj3tfqoK
XyFcyuazqOKvLFUf1FrfzvKTrP6N1V+tO+C2/vycEJnUuOPT1zsTpXL8pT/u
1E4Sh56pR1M2Rsrcb00dK8/WSacDqROqtI+T0kt+7B/oHi1/XP7j16NZ9RK7
+uds785GS81Gb+ya9ouTnjvL2o6Yr5dyR1v/UPlAhKTY+U1LbZkgvxTJt2qB
u176zujt7t8nVI6ntvh8+kWC2K6Ky1bMRy81sk45M2RgiLz4lhpyKSlJXv3Q
5EInE65bZCx66tXrQOgviuqYtdPoyr6adWXIX4L1F0X+7QN3/dxpe54UubX+
27ysB3VyaMTZ7YkdsW6N9RdF/g+sv2j2b+si7jc0ypfkkVfqVUmUPkUcnHoV
86X921l/UYQnUb8nm4+DfL2Q/5XW/qLoOPJv19pflPVvR/5jiCdk/UURX4rq
yGje0vMXHWvGV0vS8Rdl/dtZfMX6i7L4Cn1Prf1F0bz9t/qLInyF5l+VfzvL
X2U0/3Z0HOmvLMVfqdK3f57pUyl+YKCUd5xwbeD0eHk96ZlD7Qi9tAzv5Nt5
Tqh45XB0al8xScbYGgdbD0mU0lv0ow2VIqRugn1y4Sw6aTgzy6/6/vES7zW4
YmSdGAkpYR3cvbhebkxsUf5W42ip0zbX9FEzYmXbwZmvpg/Vi9OI0yvDa0RJ
ruigl1e/xUvw2flfAq7pZfvLuz98cQ2VjbmCagbnS5A12cOqT7+hl5S5p94c
PhIqm+Z9uO2QlCivj8yPaO2pl34lvyU51wmGx6c6NCrX6YFeWvW69evCWXrZ
+byr26CSAbC+afB+G3fiyhOZ/fSIdWJbvfQYFGkM7e4v+cZ0PXKjQrLsnJQl
99lqejnXqHXhTm/85Gk3+fXHWilSauDIv+6v0Mnc/JNub6/lJ3OaVR73uV+y
BHZZ/UuLMnrJf2t0asl7PL6qnGBXZeZgg8y9OuFu1eNJsmV5/uiOJx5C/1J0
HOGrYfkXrXQKMkjCD88rtsqSJMN+Gvjb7khfsV3w4kGlX4xS4s4qm/OxCeJV
qPlZ92CsZ0OfZ/3b0fiq8gcRLppoU/DSeRNuLDas/+UtLnGS8Gnrl+B3mPdj
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
svgK+Yuyun22PqjKv12Vvh3hK9a/ndW3q/Jv17p/ML38wX+b78zm47DH2Xwc
VfhKa/0Vy1+x+Tha4ytV+TgsvmXxDHoutM4fZMdRle/M4itL+TOo8r9Sha8s
xV8hf4b06oNp9VdsfZDlr1D/oCr+Smv/K9a/neWvWH9RVfyVqvogyh+0lL6d
1V+hfVNr/yut+auM5n+FcDLr346eO0vhK63znS3VP/jfqr9Sle/M+ouy/gys
vxmqD7K+pix/hfRXrL4d6a/Y3F6Wv8po/gwIR7H8Fet/xdYHWX8GVn+F1gd2
f1flz6DKv531q1TlL4rWc63929G+iXQp7PqP1nlL+TOgvnvV/u1p9bdoPtE8
oOeF1Zmw/u1ov2P929H1Qvumqnwcdh7QcdYfg70u6POq8nHY72MpfwbW/wrp
uFTlO1tKf4XwFds/aCl8heqDbD4OOi+bj6Mqf1AVf8X6i6rKH2R5OVX8FVsf
ZPVXaF1i+Su2PqiqfxDhOtb/kNVf/bfWB9F11Lo+yPYPau3PoMpflNXnaN0/
yF4XS+nbVfmLquKvEM5RxV+xfYts/yDCP6h/kPW/YvkrVf5XiEdC/lfrQxt2
22Tar8+Nsl8cZ/9Y9m+vtzX1PMYVaH1G+wU6jtZVVAdk/UXZdR7tv5mFv0LP
b/VJY2c/y2+67mXbHD38wl/qDGt+5Vo7/j1La/4K9Q+y/BXkqUj+CvEG6L0e
rats3zTLX6H1VlV9EPEV6DjbP4jmE63nbP8ay5ux+c4sf4XwFctfofnPaPyV
pfKd0fyz/BWLr7TOx2HxM8tfIXzF6q8izfXB2ub6YOd06oNa9w8ivGep/kFV
9UFWf2WpfGdV/YMsf8X2D6rSX6nyv0K4l8VXiL9i9e1If8X6t7P6K5a/YvVX
rP+VpfwZEP5X5d/O+l+xvhBa9w+y+nZV/JUqfTvLX2ntz/Dfqr/S2r9dlf7q
veFQke3LkiX6XUinL1n0MmzBlpZ2+/yk9PnC7xqUTZFeo12uWG/VydxX7+ou
buYH850HNCnQesx2gxy/8/D6vgVJcv+v/m8W9n8oTe+kbmm43yCva1kPaTA7
SfbU3bOmvA3mx9j+QTSO1vmDqD7Y8tOltlEhRuk6vUX9A7Xi5d3fEwuVGoxx
Hau/Qjgqs9cH2f5BVlemdX2Q1bez/gys/5XW/qKZXd/O8o0sjmLxFVufYvVX
WuMrVf6iquqD6Llg9e2q6oNo3lTVB1l/OUvhK9afQev8Qfb3sv6iUx0alev0
QC+tet36deEsvex83tVtkOn3ve0RpwuemCzzzmQ/ebu4XpybdWridNZPChQ9
3uLqzRRZ5d6k4LPyOqmf9cD4P5Y/ksXdV+8vnJIiNd899fr5S5JcMA7vM8Pm
kbj7t9zW8ptBpm+c9bro7kTJcWlljrGLfKG+C+U7Iz4N4asT7QrV+t/3p/5g
v0tzghPEafO5kNU+fL6P1viKzXdm/RmQnu3PMQsPHzTht21X/FsuWhkjRV+v
Lv1iKc79YfEVwnUIX6F6Lqr/ao2vVPkzsPwV63+lyp9Blf8VOq/W+itL5eNo
rb/SOh9Hlb9oRuOvVPm3a90/qKo+yOIrVfmDltJfqcJXWuvbX0x/mmvz1ySJ
el620Gd3vRxbt2TCnpBAWeRaNizGRS9Ho0+MW7BQL5FRWazfNAyQ5h0WVx9v
nyzVHbt8dSypl0Gf+m62veYnJ+3z5bzaOkWO1i4YmjxPJ733nR/Q+Ec/sQ+d
+iHqZYpMs+84LuRtkqxe9HdykbZYP9/Z826FEqZ5q5mvR6f3nolS7tC+yd2O
+UJ8hY4jfMXqxxZd3fpr/j+NMmNt4eyvxybI12Xtk5LGPlCmb9caXyGcYyl8
hfg6Vt9uKX9RrfXtquqDqvIHVflfqaoPqsrHYflGlqdSxV+x9UGt8RXLX1lK
367Kv91S+vb/1vqgKv5K6/og6xuPnse8KXU6PMibJE0CFzT199CL45yXTXpn
Df4fh6+Qv4QqfIXqkuj4R88P1febcIVtjbJXireOl5Z9wkJ2j8Xjo+OwX+Dr
48HZTZ/3jzpb91CeOOn6QT9kpSP29UL8Evo84n9Yf1HEX7H6K+S7Psu1dVvD
XaPs7t1/0/nfI6VJ65tFlz7HdTqEr1Dd1lL5zpbqH1SFrxB/hdYxVfVBNn+Q
9XXPLPXBzJKPYyn9ldb4Cu3v36tvTzsOmv//afhKVf4gi6/cp1z2S/TSya2Z
izsPu6iXmaeH7zr5KkDunLpaevo+vfR1eeHacole1u4vsuRm6wAxeL+NO3Hl
icx+esQ6sa1eegyKNIZ295c1T58PW94pRVK3jZw5b6ZO2iT3P5StDPYvvbxx
SIMvjgYJWPIwLmVjknSIWVLPZd5DiMcQvspp+y3c+Y1BHvnGlV96LlHWn9ji
GrrFl64PsvgK1QcRjkL8FcJXaHx0XBW+0ro+qLV/u6X4K1X4Sut8Z1bfrsqf
geXtWX07i69Q3YHtH1SVP4jmE+k90PdB84n234zm3476/lj+Kr383387D2z+
oK5AgUV3Lxpk50Xn8b8N9ZLh96fdcB3vlmnwFRpHa3ylyr9dFb5i/dvzp8FX
c9PBV47vK1SavOiJtC1ePmpID7288j2XL5ejP8RXV7JPcWuwI1mmPFi8pNJr
nTQqFun/eRPWz8c7R2x1fmQ6fuXps/VFdFK/weo1e6c8gngM4S4WX6H+R4Sv
Xv/xrcKokyZ8te1rgnP2BLn5pt/D2QUeyO+zwvW7/jLhgSUTfzpbL0GuZVlp
3NT4AcRX6Puw+ArxVwjnaI2vEH+F6oOIH0O+HKz/ldb8FcJXiNdi9VcZjb9C
OFZV/qAqfbuq+mBmz8dRpW9n9Vfo97L5g1r7tyP8gOaB7R9UlY/D+rerysdR
pb9Cx5OdjlVtGWGQpgeefUh95Csdq4U75GuAcQ56D2Lzcdj+AhZfVbGbPD9n
iURZdyl++BFvvdiOHpklZ+0QZfgK8VcIXyH+CvnJo+MIX6mqD2qNr/JdvLYy
wLTPPtl/4EZKywTJ6ljIw6ftA6iz0ro+iPCVqvqg1v6iqvAVm++M8JXW/BXq
P2XzcVD9SxW+0rp/MKPhKzRvWuvb2X1cFb7SWn/F+rez/t5sffAf/jDIzB++
MfOHGU3fntHyB1n+Smt9uyp/hvr774wbO+OxlLLPtqOGCU95ltiQe3nlWEnq
F5XTWmKl3sTNG3y666Wg77DCRw9FyRSP4Njzr+LlcN1U6yJX9dKmcbm41Ieh
Yl124tbplRMl2+Hg1YtNOM3uYtmY8PIhkn/4T9OOWiVJxVOjNyz30MvBcqNe
fYwPgvquN3bTd08w4bnN+s5v3znq5bPDuAXGn3A/Y+vsC2IiVj+RjV3CVu3r
ppd2+Q6daD3NH/rSs/2PaxqPLfG0mUGsXub52849SfT1tqx5HPVQtldov8p7
qUHKPq2yyHF1kpSe7nW/85SHUm7DtU6log2yMszprUdyogQ2tD1X0wPzZgjv
IXx190/vbYNam/bBk+/XXy+QKPfLTHgU/QXjOpjnuK110dEm3NL38UdZ1iNe
5n/tuM9qOu6LRPwS8gFDvBmqh7L8FcvLDVsR5X/VNH7FDdWnfxwVLRfb5zrS
sKQXxFcIv6FxWF8yVforhD8Rf4VwLFufRTiB7R9E/JWq/sHM7t+uNb5C86/K
/0oVf8XmO6vSt7P+omx/AcsronHQ85XZ9Vfo+6uqD7K/l+WvCo22q3Axb7i8
9Gjm0/1Qkkyt897mc80EObXGJ6VGRLTsfem1sk1Ovazutsp5+Y5oibimjw3P
FS/XL9x6ab9dLz3rJFntmxAufW387VLqJkjFtfPPXnPTy8eLRzfc/y1UXuuf
NJ1SSif3vLOMO+euF9/6r2p0uRII+bEWpYpsnRqkE5cF5YJCzullW7f7bw6n
BEA8hvAV8vWyFL5COAr5tSJ8hXAUOo78GY6/3FMr70ajlLgV0tu6c4J0ebf5
QI5uWFeG/MQQvkLnRfVBND7yj2X7IhHvxPozqOKvUL4zOq/W/qIsf6VK357R
6oOs/5UqfJVZ/EW11l8hfZQq/ZWl9O2sfzvCFWgcVf4MrB4ps+vbVflfoefR
w6H47Br9gqT349eTqrVIkHP9r0dUM+EpY6c/570KDhPn69YXymxKkiWH3w7u
0SdBPLNULb5jfqTk35WvzJPpOun9IN+vhXvGyYLXh378Mi5Wflv/NDJ8kAnn
vCjgFCNRcqfb62lt7E3/Xt65qpUJF80cm9Sl9poI03t70Mur3+Il+Oz8LwHX
9LLz5d0fvriGysZcQTWD8yXImuxh1aff0EvK3FNvDh8JlU3zPtx2SEqU10fm
R7T21Eu/kt+SnOtgndil2n7FbQym76ff3GD4Sb00dDvSolgo1ueHzVo5fvT6
ZKk+snbiuo866erZbFndnX6Sb0zXIzcqJMvOSVlyn62ml3ONWhfu9MZPjN3k
1x9rpUjpgSP/ur9CJ/PyT7q9vZaf1F56L9Z4MUXaD46dPLSKTgZPGhwQtPkR
9GVFx6/77tHbhhvk4lvXVVnfJEqpUwFrRvn7Snkzflthxm/+ZvyWdUpnxw6j
DHLX+o795cNJMqFcn5mx+3A/ZvZv6yLuNzTKl+SRV+pVSZQ+RRycehXzFdsF
Lx5U+sWEu+6ssjkfmyBehZqfdQ/GfmKoTop4M8Tj9W1cwbH2OaN8m+X1y+T3
8TJ7rt8ryfYA8lds3RPlNPmfPfWtz2OjrB9a8MjZsbFy8m2Lq62z4vHfV2q1
opzp81s9o2xiZ8aKsfPIZJ8CuH8T8VrHg/LXmWDCgQc3THV67BwjvX6+0GXh
Ruyn4dC9oF3deKPk6OlR5op1tDTsNO1Uha+4foryKxFPiPK7Eb5COBbVJRFu
ZPkrxPtpXR9k+wRZfIXmQWv9VWbnr7T2Z9Dav12Vvj29/Kl/q0vXWt+OvifS
X6HzovpgU5c8H1yPGuTl/NUj3rt7iEuDkR0drNzENl98aM5TBln3+si8+b97
yg/P3p8YL27p5kb92/OifpNCzW5MzTLtkXz+8/5z+/zB0ry1XnbdSZactbPk
tJoeIOGT33QP6Rcn96Y+qH1g/RPJ4dRsj1PFIDm0vnNU1pIJ8tD+3OvGjfUS
X+Jzoxs3Q2XCgY9b+zVJkltDn/Wxr5YorbfV/uPlx0iJHpb8xX2lTi4WNc5e
ni1OHHqmHk3ZGClzvzV1rDxbJ50OpE6o0j5O9iceuP25a6zEP05sXvYXvTS7
3GpLnTVRsF6ZKw1O227GaUhXtvHOp6N5whNlkeuqk/YmnNbhXufcga2DZWaz
+oGX3urk73K9Yg+46GXR122RXX0DZKv/4u0eQ/Ryf9cxt8mb9JIY9u7LRYcA
OT8hcEjYbb3oy2X/u9VcvdicH1ipSqUAufn0hl3WmU8kJXpEndKm7394o9u4
R0v9pXn1mntHF02RPB/7lt28Syfrj/VNONfGDx7v8SFm+Y8nU+TD81V+3j/p
5M/w4q2a738kA3f93Gl7nhS5tf7bvKwHdXJoxNntiR39lOGrI6vi5kW/MMgn
Q8mzN28kSlD1sluK7MN6NoSvkE8swlcsf8XycghfNS3Tq9tLE94odmXFT3s6
RYtD6mOHQ/m8IL5i64MsvkI4JOT53hNut41S9oea7V3aR0qedltuTIjxoOuD
rP8VqyNC50V1T9QfwfJXbL4z2++pNb5ieSQ0D6z+h83dQ+OgfUfr/kE0n2ge
2P5BNA+Zhb9i64Ooz5EdR2v+qpv5OW1kfk6d0qkPsj4wqvxFNzYr2FKmPBLX
VSvGHnMJlRyLz8/1LpEi2Z2nZ/V08pNln3X787aMkkIFNky7GJIsSanOPT+M
C5CIoRXHNe0WJ16VQhs7b38i1luiSh1YHiKHzy6olXIwUY63XRPtVilJPAv2
6uezMkLmHbz8XG+lk982Zh/SNne8zEqDr34246t9afBVCzO+irz//mWuanGS
42bZnQ4OermaOGDHgFcREF8h3wmEr1LrGCpmza+TXo8Ltgp118v1mJY20zwC
5euptYfrOSXJirgeB8fe10tRp6u93k0IkreVp/Z9HKOTr+dCl5Q9o5ekpZe2
R8ZifIX6AhC+ulr7ztH1NsmyqPij/W/K6eXGkhm/xD70g/gK8WaoX6D9gHne
zr0N0rBXyapbzibJzVfunZ2vPKTxFfo8wnWoHor4MTZHicVXiL9C+A2Nw/Z1
svxV0cQJJdebvucK59oVpX+s/G7zMPXSay+av5p9/fbgQybceKDh3sH3tsXK
tH0t5oZW9YbH//EfG2n2H8tu9h9DfQTovAg3InyF+iBQXRWNg9ZbNicd4SsW
dyFcyvJIGY2/Qvsd+r2svp3tH2T9r1j+8D/lf5U2l1lVvnNGyx9U1T/I5nez
/BWbj/Nlpk+l+IGBUtFxwrWB0+Pl1aRnDrUj9GJ/IEubL71C5O0ov533FiaK
Z7cl7/1+SaLrg/36xU8r1TNexm4LG+B3QC9jJ5XLtfB5GKwP5nVoWOzFi0Tp
8X5HVFkT/vk1dPFs5x+x3yk6jnJ/5qfBOS/T6X+Mtxsd3f5xsvw4rMstlzs6
iRvfp8qokXx9EOEKpMti64PoOMIhbH0Q8UuIv0L8D+qjRPs7Wx9EdSvEOyH+
CuEcpL9i92tV+vbv1V+lrQOy9UG0b6L6oNb5g2h/RPuyKv6KxVeIz8lo/gwZ
zf9Ka317Zsl3VqW/slR9UGv9FYuv0vOFS4tLWXw16eenlX5zDZJeM+ttvGe4
IUcrXehwx7Q/63++dcjt5iMxXAl8XvyTv1xtdOa+VctkadXq1Kbqpv9/zWP+
8Jxlo2Tl7/MGTw1Llhq6DV7PAvylmxyMvbMuVsoM3X28eqFkGZha8YdufwZL
j+zFa87+lCDz+yV+e5tFJy3DO/l2nhMqXjkcndpXTJIxtsbB1kMS5cJmQ/v3
HSLEaljeXHb5dXJpVtZW+drEy4ZJ0V55mz6W/HOy/Hn6pk5yj4rcd75zrJw0
6/D3mHX4a806/C3l3/as1y1OKpRcN2P3PL3cSd4cW+JSBK3PL131Ycy49YkS
537Gu5WXXuIn1yx3fFuw5Ktfv+bwL4lyO2l13rceevmtRssBjkWCZUPurxv+
epAo+R9sX7TMhA/rzVhX42v3YMk5ZkDR2abvPaH9ve1lruil+vTJHxy+YD3Y
zzs/7ty5Qi8n2s8een65XlKr12/bu1eAzGlWedznfskS2GX1Ly3K6CX/rdGp
Je9hXqvAzUEfe1ulyKOnBT43Xq+T9Xe8Zng18JMdf87Z/PltstS91leiT+nE
1+f3LF17+Ylbo9vPZoSlyE6rjmsr5zPN8z3/Kq1GPZJZx6olbF9nkFED5lQs
tDRJnucqMjxhJNb5s/wV4scQf4Xqj6gvspjrwOa3rhnl71Yjqn+Ki5dnf95r
+/Cpj0y0KXjpvAk3FhvW//IWlzhJ+LT1S/A7nr9CPBXiteJyeu2sbTo+tJt3
4oUh8XKz58SHZxdgP1ikv0L4k9VfpZf/mJa/QjgWnRfhVeTvwfJXCF/pe8XX
/epllGMlb5Xd6xopYwN2nJ9bCONelr9ifd1V+TOw/u2oDsLiOpa/UpXvrMr/
isVXWufjqOofRLgFXd+Mlo9zMbHHH1NN6/luY7UUu3bBMnmRy8S+TngeWH8G
tt7K+jOg953X9cb6h1x4JMktCg6ebhcgRwd07/Z392QZO6/M9K2v/OTt5GKJ
TmeiZZ7Hil2HLiRLdP8/+uVuECgdnCZ7+LePl0v+c7cd+aCXaub64N/m+qBL
OvXBzWa8VMCMl3Ka8dLY5+9qVm4QJ9cKz7xbcrZeCk3qMOdbTARdH7SU/grh
H1Z/NbvwCKPXt2SZVdXl8ZSjOrlSolCPkjZ+UsfMj7Uz82MDzfwYOs7WBxFe
UqVvR/gK6dtZ/RXCV1rr21Xpr1h9O8oPYvEV6z+G6oOIN2Prg6y+PT391Viz
/mpJOvorxEOy/BWLryxVH2RxHbourL7dUvgK8RvsPLD+7Wj+WTyD8ACLr1T5
M7D6K3TdEb5CzwXCOeg+YfuUWX8G9DxeOT253dwwf+k8apL/2gn3JUePPxL7
F9RL1h4lOxrnPZIP2dYuzXYkSGxK97hR+kyy7C7cN8ebp35i1fLYgUUbouVd
1Rl/Dr+ULMPG18lSclSQLB9c/0S5DgnS+vzGLjU+6OTqsrf71m0NkYi6V8fH
HE+UJrvsu7v/kAT7E/OsHi/Xuj2Wmym9a329o5OyA21Gvm2JeSqke7/ZKKBn
glWCPM2bGvbehIP2vvs29JpjqJxo1jqxfWKChO9+FtzURy/Fz1zyX/ZbCNRf
JTS3Hf92tk7qf30yZ+NdvbTbabOsY/tAeeH6/Jn1yyQZl61GXKV7etnWxnuN
Z1KgZD88eFCuLXrJ4tA4/zsnvcjoSrHLO2OeCumykP4K6bssxV8h/RXCdUjf
zuqvEH+F9FeIv1owsWrfmrdNOOfYhr17Q+PlTorVmeGJPnB8hNOQPwbLXyHc
qIq/QnXY9PirtPjtf7V35dE1nX3XXFPNs1drKqVopEVfVT9tUB2iFX29piKt
saihoalZRBQVaqgGNdeQIGpWTUmiEqGVkAihSSSSK+4tDVpCGm/W+q5/stZ+
0+37PevcfOv796y7nnPPc855nn323r/9Y+sHEV5F/NWjHI/xzhyP1505Hoi/
QuM06PP0kRn5x1vdv+aX4p8sOb9N+PhQY5xLho4jnImOa+ErNJ9oPUf/B+Ei
dF6Ek9E4CK9aha9Y/5VWf2cW35rOb9fSB1mcxvqvXC2fgc01RXzylM/W/sN9
e6zsrv76jZFbY6SM5+QXfWpcE//cdzr173lGwmovqVfdM1HcV6xteLHedYiv
juWV+mLApASpGZBo97uVLnfuVVr2R8VMGfFiwr0JsYkS7j58SYeXM6RV+o3+
N+pclbV7jrVY754kc31+Ts8unSnrHhQb4PNGGsRXiL8adzbzVmq1NHF0ePtU
0yCbhNgX9Qnuc1FaPHu1Z7n2aVJ6ydEtb661ye7fT64dWfcizEetuPm5/h1r
Zcj2YxM+3BGVj39igms0uxUP8RVdPwj6YrP4ivW3o35DiL9C+Ir1tyN8gvxm
CF+1yK2xuU3+fjSoe4nineumi1v5GR0aNdTzt7P6IJvPgI53H/tR+qkkhyT2
mH0urvYVmfdGlYV1Pse8GfK3a+Erlr+yKp+B9bez+iDLX2npg+j/I5yD5gGd
V4u/YvVBNr8d8UsIX2n1d2bnwXQ+A+sXMq0PsuNY5b9i80VZ/orNv8ru8UOn
b55Llvah13fUunBE0h8Gbnv311T53PtmXPvzsTIjMm9EQJkYSQlckTTsN5t8
m5r3TK+ZZ6T9qlsj3psTL6GtT0j94Czpvbv2zaRVseK1ucfzmw9elqFBh6/a
z2RJ5+tTF70w9pw0WF93ztdf5OOgJy8Obxhjk78qtPjuYOcEGfFSi/6DzqRL
1VKld5bslCklmu9a9lbmBen27ZDz81ZmSFDDux3TuqXDekPky/I8umv+3Dop
sj3p1NoDlW1SJfT25DY9k6Xb7pzUh3WvyLmOgcf2+thkSLPQoW+XvQT9V21X
V6q/cVW6dNxW43aV0zbZ329VxqDw89Jky/hhK8tezd+vb7Y9lX89HasHN3J7
+Tz0XyFdEvmy8tLe37B81DX5KnjTjPheNvn3v86e+HpxHMRvENfFXxiU65Ml
nk1alUt60iYB1z03RYbESm4j76zGkiWtUqrd+u4pm4zr7r9z+4VYqTPkx4Mn
p2fJV4tmbx39hE0mvJh948tvY+V0QtMdjheuy5CIgy/19cuU4f+qUnH4M5jv
QvwV0gdR3j7qf4T8XQhfjf7pDdu0/Pdo0XD7ojJH0+X+mq2N6h08LYm+tUpe
887HIfH/KB28L11Olyy9LHgnxm+IB2P7brP8FcJXyB812G31BMnHXTHN47a4
3UuVUp7TlpUcj+sEWf8VyhlDuI7lr7TqBxG+Yvkrq/RBhK+QTorOa9p/heaN
5a8Q/jHNX7H+K3SczW9n8cz/Vf8V2x8HfR9p5TOg95HVBx/5r244/Vfbnf4r
lM+Q6vRfdXP6r/Y5/VconwHxV2uc/JW/k79a7+Sv2PyrCQX4q21O/iqsgD64
3qkPauUzfLy//YfnNlyTWP82UQO72mR36v1tHw3+LzgH8FfoOOKvWH874q+Q
Poj4KIR/2HwGq/gr1t9eVPJFTfuvtPRBNv/KKnyllc9g2n+F8BXiGxEuQvOG
7iPrv2LzGZBfDuEiND6af3b/RfiWxVdo3tj9ndUH0Tjo9yyfo9V/kPW3a+mD
bP0m62+317mX/USpOPntSnm3+pVSxHPvN38sD82SYl+erOD28jnp+lW3kAk9
02R3o/GB67NtMrR58IHOxy/Iu88dPtzhiwyp/dSfXkcHp0v3m5OX1PJNkmZV
3/6jdINMySlfsvd3NdKk3/66S6uu+1XGJ+4p1Ts2UyadS9hRuyzub5h7P6Pl
gwZpsmn+lj+Or7JJ7ie+Hbw8LspEJ476zYmjtjhxFMp1//2T38osy8uQyzfr
VcrNx0vbA/1Gf3P+HOSLkL/9nfoZayM6XZPQUglXFw+0yVtlVgX8tT8O4ivW
34769aB8UZQjyuaLvl9h1nz/eLuk17j51MvFMuT9Fn1HrLmE9T7kP0f9dBD+
QfjKKn+7Vv0g4qlYfIVwHZsvivAVwlGsPoh4A9bfrpXfrpUvio6zPivT/Z2R
HqGlD7L8Fdp30PWy+QysPqhVP4h87Oi+PMo1TXbmmt515pqy+aKm+zuj+Tfd
H+dx89sL5iSw+VdoHPZ62fz2UlVL1Itfclb2v1d/YNiUK/JE2Js1W/tekzyn
fjfSqd9Vdup3tZbbhtobJkmbdO+sysUy5cVJxXrb+qTJT8Fj/zoy/1fpuqb/
L2GnM2XdHff+Z2qkik98mb1uHvnfvb2mVbhSyyYft5wZ/k79ZMg7IXwVkv3P
3NDf08VzwZUS1U7Z5Nni43YP6HtefEsfnvtKUoasjqy7Z8RPNvF/bnH9OyXi
6f44brOXJX2XaJNA/6klIn1skvncP4cuqYjxFcq/QjwS6oOD8FWj9CFNJvW3
y5TvR0c+E5Ihy+dVSPbYgfsbPur7vMHZ9znK2fcZ+aDY/KveTvxT3Pd/8M9n
Tvxz21k/+LyzfvDo3+yPs8jpb//U6W9HuhXirxAOQfgK8U5sfjsah9WbtPLb
Eb+E+IfC+jsXzL/S6u+M+Cv2O12rPw6bf4X2a6v6O7P5DKwOxfqvrMq/ito6
+KNL2XYpk95wbbt+sRL9Qu3jL+7BdXxa+VcId2nhKxYPFJbfXnActn6QHUe7
v/PfzaFi/XVa/QdhfxzQ3xnlJ3R3+pfinf6lQYX4lxxDYidmd0yXd6qUXzDj
uE28fHodj/PC/QR/f5h9/kBGhtyu0W5ft3y8NMtRddftO7gfNNvfGelxqP/g
wTczPlu54Lqsb/7sntIemRI/e01WXOwZ6DtC+AfhK+RHQvmiaHx0nNXREF5i
+zuj86Ysr7nu4CWH/BBWeeVbiaky7c7mEvf6YF+QVv9BlC/66eFOne2RDlnT
q8/SvR9dknadfqw692YU1OnYfAaEr0zni6L9UStflO3vrJUvqoWv0DqJcJfp
/s4szkF6BOuvdrX+ziy+Yvkr1v/M5rdr1Q9q8VcsLjLNX2nlM2j5r1heF31/
oXXpx9hvTnkPT5IzM1PvN6mdKYH+Jd5q2hjnebL+8GfiR+280vqqfPpl9KGB
MTb5pMy5sF1PnpcpBXgnPyfvhPAVm9+uha9QfjvCVyiHSqu/M8JRKB/Aqv7O
SF9D+e1a/Qe1+Cs2v910/pVpfRD1H2T5K6v8V8gnr6UPavmv2P7Opv3trO+r
qORfIZzD5iOx/nZWn9XCV2g+EU7Q8l+h99p0f+fsH3zHjTpkl2vj999tEXpS
ljXtPPEF3wi6vyTqt4j6QbP6YIUCffqmOPv0IfyD9DWETw6VHBfR9ussGXd6
tl/DO5nyQrVLcblLY6XW3sp329a7Lr2GBh9quiJTpt6+22Z2B+zHRnVk6DjC
A8j/U7Fkq/l7+zrksH/Dxl1i0qVznda5XuGnZdb3K3pXmOMQn0WVS94Zni55
Aa9mZAzHviPkw0G8DTp+Pzqn+fr8cTyfrXeoeqc06eh14fya4djPg46zfWQQ
H/XIF93e6Yt+2emLRvsjwglo32T1KaSjoetCuAjhK/Y7C+0vbL0JWq+6eW6d
9X5XhwQ2/9F7cna8dL5+JmbQMMyToO/rPz/9fHn4uw5ZP2LmF58sTZAY37wa
8zb/JEfHLWm4o3r+/5z6yrqgUWfFt92e6Aqj8fc4y1+x+TxonUe6GNpHEO+B
1kl0HPEhqI8w+j3Ss9D6j+7jgqMbazc/ZpdbbQ9kVN8QI8m5B/3mbIyA/4ft
s8b2d9bir9oHl805vC3/uqYvHHzveJQEt/3AY3JjvG+i8dE8oOcB7adoHgrT
BwueF+3j7H1h9UF0Xaz/Cv2fft/3jArZbZfLofvKdQmLlh5vH/dO98Tja9UP
onWV1X9ZPMniK+QDR7wQymtC+Mo7cXzO5VvXZaK3x8jzf2bIwlnfZlXpfEbC
A6q2+dXHLu/ljF6btDJD6nqkbKo77xdY16+Fr5D/B+GriycCSpxs6pD+h1aP
euhxVcqtbxLd1u1nqKNp4StUX8/mLLH4CvEAqO4M4TGErx7lRo5x5kZ2c+ZG
svmWCF8hXiVvf48nNn3ukKtply9OGXlB3gupmNk//IS0udZl26G5Duk7YP3G
oNcuiFfVgV/P2HMCjo/GYfOUEA+DzovwlVX9B63SBxEuReOgejS0PiOc4Gr6
IMKZbH64q/UfRDiK1QfR/LP57ab7O2v1H7Sqv7Pp/HYtfMX6r7T646BcI8ea
JUvnRV2Xs20WhsyslSlPrLAVqzQV61zDKjd4acJ9u2wI3fH5W1uvypttK6es
XfAzzB1CuAj5sZHPGelHyM+D9KlDN6ZPSMn//arpYWe9AlKlze2fv+tVN0a8
N/Qcsy8hf/73LrwTNC1Num71GBy2EvuOEM5h8RXSd1ifD9qvUX8TxJMjXQn9
Hu2nSF9A+ztaJ9H4WvgKrQMsvmL1etZ/heYH7ctFhb9C6x5ax9A4aL3V8rez
x9n+zlr4it03EX5A+7tp/xXLX5n2t6PjyN+ulS9a1OsH0XGkD2rliyKcyfr5
2XxR1PcE4R+kryF8hXKHEC6CdWHg98j/jPAVwjMIX50o+/v+3kkOydjzWvqB
l65IpY22+k034FxEhK+QLoaOI3zF8iQsvkLrPMI/LL5i9UHT+CqzVrdqAa87
pMqw63tm1kuQMZk5T/lOwv4E9J3F7tcIJ6Dzsvogi68g7gL7FIuv0LrK8vZa
+ArWAYH7xfJULL5i/T9s/SC7b7L8FZo3Nr/ddD4D639m6wfRebXyGdj8dja3
ynS+KPR9kfWDLH/F1mOy+Arpg8hXjPgilv9BvmKk+yB8hXw4aBzEt6D9Hf3/
xYnubyzNxyF7PvSefcX7V1m/8vkV2Xsxb4P2WTZfDvmEWXyFcAjrs0X7L4uv
0PqAxmfxFbouLf7KtP8KrUv/77/67/4rNI5WPoMWvkLzxuIc0/wV679C84b8
Zlr1g2x/ZxZfme4/qMVfWdV/UCtflPVfsfkMLH+lpQ+yudmm8RXy7aDfo+PI
z4P8P6gPLIuvEM5h8RXyz7D7Anr+TeMrtj4FjY/8P+x1IVzUfOxw3xsVHLK9
3ivbNv8eJ63ff+nQkS64LgbhNNP4qn5Yzuc9yjmk+CvtvT2i4iQnb0zJ19zx
eo7W/2IZfqUCUuxyrnb5Wp9O+kV2pI1L/cszEuIrlodh+SvWF8H6r9h8Btbf
roWv0PqPcI5pfKWVz2C6ftC0Pmi6/6Dp+kFX46+0+g+idVVLH2R9X2hdQvwV
wi2svmYaXyFeC+ErhGeQD5bFV2j+2fpc0/iK1SkQ/mG/a9DzzPJXpvEVy2Nb
VT+I/B7QfwtwFDv/WviKXfes0gdN+69Y/sp0/lVR97db5b8y3d+Z9bezvnRW
L2P5K618hsfNby84TmH+q797XvS9g+ruEZ5B/A/q84Xq4hEuQvsL4jHQOGi/
QHgGvXfpbf0mPbnLIeX6VfFZ1TNJGh+ueqrKLFz3pIWv0D6lha+QTwm9j2hf
1uofyupTaHy03iJchPAVWgfQOOi9g9/1oL6e1QdRPTjiPVj+Co2PdB90Xnb9
R/XsyOeAxkHrLbpfKFeHzWHQymf4a0zGoMpH8vedVpFzHcVjJNqvXPOdAXge
WP8Pm8+AxkHzia4XvV9a/natfAYtfGVVfxx0XY+Lrwo+J1r8Fdt/ED1vVumD
6H1k6+KRfwnxP0hPQXgJ+bHZPl/IL83yV6uHBKQkjXNI+Af9/Wc1S5ROgaG9
yntgPcI0vmJ5EhZfoeti+SsWX7H8CYuvtPgrNA5679h6k6Liv9LCV6w+yPqv
0HprOp9Bi79ytfpBNA7a77TqB03rg6y/XUsftMrfrpXPYBW+YvVBrfx2dj1H
+ArV5ZnGV2hfQ+sYGoflr6zCVwjvmcZXbJ24aXzF+n/Y60LvL6ofZNcBVm9i
8RXyX6H5KSr6oGl/u6vpg1r+dpa/0sJXbP9B1n+FeCoWX6Hn1ip9EPFCbF0n
uo9FpX4Q6VNa+VdW9cdh/VcIX7H6IOr7hnQ9Lf8VWz+I/j/CV6z/CuEo9H9Y
/xU6jt4jNv9Ky39VWP5Vwf4sWvkM6P1F9YNa/nZ0X1wtn0GrfhDtO2z/Di1/
O5t/xfbHcbX+g+i86L1jeTO0H2n1x9Hir1h8heYfrcOm++OweECrfhA9J+j/
aPXH0fK3s/hZy9/O8lda/iu0HyFchJ4Tts8Xqw+i99cq/xV6r1ldg9UHTeMr
rXwGLX87m3+l5W+3ir8ynX+FzsvmH2rlt2vpg4X1xylYX8DiK9P8len8Ky19
0LS/HY3P5lRYlc9gGl+xzwnrb2d9F1r6IIuv2FxTFl+xfUKRvob2I3bfZPVB
hK/Q84nui6v5r0znM7D6oBb/jMZH+5eWv10rX5Tdr1n+yjS+Mp3PgPCVlv8K
+VdZfdB0PoOr1Q+yvJlWvqhW/pWr1Q+i54H1X7HvBYuvWH+7q+UzaPnb0fVq
+a/YvmOsf4n1XyG+kV3HWP8Vwldeixe8sa2tQ2aM2bx8eN456fuh54WSZXhc
zeIr9N2kxV8Vdf8VGh/hRrZ+kF0HtPgrtO4hfGVVPgPyt7P4iq3rMe2/Qus2
u/6YxldFpf8geh9N4ytWH0TPoZb/Cs0/m4fA5jOg9Rm9j2y/GNP57ab9V6xu
zvqvkE8J6XeF+duHOPHVLCe+Qv4rtn4Q/Z/C+KuCfp7C+LeC/5/VBxG/hOaN
zRdlfT6sT0kLX7H+q6KiD5rOb2f9V+j5RzgHvRfoOBofPT9a/Z3Rc6KVL8re
L9P5oqb9V1r4yrT/Ct0vNr8dPbes/8p0fjvrd2L5Ky3/hpY+qMVfsfntrN6q
xV+hPn2Pi69M8Vda+Qym6wfR/FuVz4CeZ8Q/oOfQtD6IcpnQ/UXfX1r5V6bz
GUz722F/NMQTGva3m/ZfWZXPoJV/xfrMrdIH2fpBrf44pvs7o3nQ8l+Z7u9s
Vb4oi6PQeU3nX5n2XyE/JMIhCF+x/iutfAYWX1mlD6L5Z98vtL6x+zjrU0Lv
EYuvWP6Z3d9N57ebzmdg++MMdHeMaZxglymrHwTFuP0srXe0rP9iTewLcjX/
lVb9YFH3X5nuP4j0YrTusboYqw+a7j+o1d/ZtD6I5o31O7H6ILoudn1mdUar
+CvW387ydWx+O8JXbJ0vui60H7F19+z6poWvEH/F3ndWf4f948h9nPUpofcI
7b+m+Ss2/8rV/Fcsn4zWK8RfaeVfsfwh2tfQebXyr9j8dtP5V66mD7pafxzT
+QxofHRftPo7o+NW9XcuKvlXpvEVWx9qWh/U4q/Qc2s6X1TL347ea638Ky3+
yrS/ndUHWX+76XwGyKuA/lam+SstfOVq+aKm86/Qd4fp/oNa+Qxa/Z216gfZ
Oikt/xXbH8eq/oPsPFjFX5nu78zyOabxFetzZu+v6XxR1t/O+sO1+uOw/nZ0
XVr8FcJX6L6jeWPzr5IqPRy297JDfoy7YNu547L07Fd/S8LYaOP+duR/RvOA
zsv621mfHpsvyua3s/mi6PjGtd29ftjqkNLJB+Pm5V6UE8fCGicPxtcV+NSm
Wkv8HHK+gU+vJXUvSNOa7l2HbcTfy6y/ncVXrL+dxVfovUDzhp5DLX87myPK
zhv6/2g+0Tyw/h+Wt0HvL5o3dL1a/BUaXytflOWv2PpB9r6w+Vda/nb2O1qr
Pw7LI2nlX6H3EemDCF9ZpQ9q8VdW6YNo/l3Nf8XqaJCPBfpRUeGv2PwrLf6K
1eu1+CvW3266Pw77fW2VPsjyV1r5DCx/ouW/Ys9rOl+UrR8srL9zwXlg99+i
kn9VVPoPsnVDrE7kavkM6Hv2cfs7F+SvWHylXT9Y8LoKqx8s+P+1+Cu2Plcr
n0Erv12Lv3K1/HbUHweNr8Vfma4fRM8Pi6/Qe4fmGZ0XXRd6frTy21n+Sqt+
kJ030/kMpvNFtfxX6H6Z9l+h/RQ9z+i46f44aL9g+Su0PrPPCZvP0O/7nlEh
u+1yOXRfuS5h0dLj7ePe6Z4R0vL+6nI1tthlc8T0uHYTo2Tyua8Cc6tHiGf5
tMTSu+wSeGfL1OkfRUuNG/d2jJIIyf7Bd9yoQ3a5Nn7/3RahJ2VZ084TX/CN
kPbBZXMOb7PLrekLB987HiXBbT/wmNwYj5NZseKsyP12Cdq/ddSIgSdl0ImJ
YYdH8eedf3Rj7ebH8o+3PZBRfUOMXM496DdnYwTkJR7h/3gn/v/Dif+RXox0
c+R7QeOj+S/M/1BwHHRd7P/f8PS0Pyf+ZBf/bXHFg7qfkm6HezomH8Xzj77j
0HnR/f1rTMagykfy561V5FxH8RiJ9ivXfGdAhLi7j+7t4W+X95Z2PTO2V6Sc
iHsw/5kB4fC+o/ks28Cr5/4wu0yxxVYPfS9G7qfGX2q2Al/Xq/0nXRscYpcu
/wz67fva0ZKyuPW9m27496uefzVk7jS7vBHncWXO4AiZmjP7swS3cHi96H4l
DVy3pMFeu7x5P+jS5nInpeXIrWW7DMDXBXMvwXN4/fQrTaeNs8vGoOaJNaKP
SdTQCQ+/zDpGrwPovqDnAb2PiL9C9YNoftDzg+4jOo7Gf3NpV/fF8+2SXXaI
/dafkfJ84NLbdXzD4XnRdbHrHuKv0DjovUb3Bb1HaB7Y4+i9C5wZfyTlM7s8
qNm+d3jFCOm++sDxAY3xfKLnh1230bx1Tkt8LSsg/73w9HrfbXOk3H8+qvO6
UeFwHDSf6H1E79enTz+4vMzHLqPW1evQaUS4pCQ/PWBk6XC4b6L5RPPP7r+I
B0b3BZ2XXf/R/0HjsO8Xmv9mfnkffjM7/34ltn81JC9CvvzELSHk7XB6HLa/
s+n+g1r+K9ZPy/IGpusHtfRB9J1uun6Q9bez+Vem8xlM57ez/BWb347Wc9P1
g2w9Gtt/EPmvXK3/oJY+iPYR0/ntVumDbP4V239Qq36Qzb9i89vROszmXyF9
kK0vY/VBdF52/WfxgGl9UIu/QjgQff+yPAZ7f9n3Ap0XvY8svkLrHlrH0H6E
1gE0//T6BvAVmk/0/63Kv0LfTej+sviK9V+x+Qxa+VfoexyNr4Wv2HWAvS/o
fXzc/jgF5wc9PzAHg5x/tK+h8xaWz1PbWTeXUkgfEDRvaBy03rJ+OTQP6Dji
MdDzif4/679i+RO0f2nlM2j1d35cfFXwvqB1np2HwvBVwfMinkqrfhDxSCzv
hP4nej7Z/Cv0e7Q+o//P5rez6wyL6+D3DpnryOIT0/gKPc9a+GpI8PxqQTl2
+cKj0YqWZ2OlWsUv4/0v4+efxVfo/qJ9CukX6Lxszjl6DtF8su8dul40Ptov
WP4K4aLt/36ry8ZNdmnn+/XD2GeiZPnBvbZ1ZbCehfRBVm9i8dU3W5PfzV1v
F9sPCyZUOndChvS75t7sXjicH/T8sPogm0OOzltY/8G/u+4tcOpit5y6WLJT
FzONr9A8o/nRwldoPtE8aOErdF40DnrO0TqDngek32nhKzQOO/9IH0TPA4uv
2PeC1QfZ71+037H6IFs3pNUfh+1zyupTpvs7u5o+qJV/pcVfsfW5bL6oVv2g
6f6DpvPb0Xqrlc/A6oMsf4XOazr/ip1/Nl/Uqvx20/0H2eNa+e2u1h8HzRuL
r0znt7P9U9D8s/kMCBdp8Vds/3RWH2Rz4LXqB7XwFau3msZXWv4rtB+h8dF9
0dIHrfJfme4/yPJXpvVB1n/F7u8sf8X2x2F5bK18US18xeqDrP9KK7+dXfdM
98fR8l+xuJTFOWge2Pwlq/o7s/1x0PpcVPCVq+UzuFp/Z6QvsD4oxH+yfCD6
PfQZAj6ZrR/U0gfR+Gj+oQ4Inmd0XVb5r9B9NM1fsTgEPldgPk3rg1r+dqTr
jUzrOzA60S7Rfco9u2jOz/JB+T/P7GyC/z9aB5A+oqUPovpBq/xXpvVB9F4U
Ff8VO2+s/wqt52z9IKuLadUPsvntaN9E45vWB9Fxdv5ZvxOrD6JxWP8VqzNq
4Sv0/1l/OzufWv52dl9D6x6bz8Dum+z3I/oeZ/8/i6/Qfsp+v5jGV1r+K636
FBbns/ogwlda/nZ039n3ke3vjOZHq/8gixOQL4X9vjZdP8jWI7D+K7YuAP1/
tI+z/FVhus/fxRVa+aKsPmjaf6VVP8jqg1r9B1l8peW/Mt3fGfHSbP9Blg+0
Kp/BKv+VVfogwlfovpvWB7X6O2v1H9TCV6w+xeamsvog5M+V9EE2X5TVB1H+
IZxn8jvLtP8K+RBM9x9k++Ogeny2byObz4DWc7buG80/wldsPgN6Ttj+OKz/
Squ/sxa+Ytd/tq8Bwjla6zPr4yoq/BXL12nxV1r6oBZ/xfLw6LrYfAnT+iBb
P4juLzrO5hiY5q9M64Nsf2ekDyL+XCufgfVfIf5Ky38FdUOyfpDNF2W/01n+
is0XNa0PoueTzQdA67mWPqjVH4fVB1n+Sksf1M6/+t/mM1ilD7L/x7Q+yPqc
TedfFRX+iuUlTOdfuVq+KFxXSX+7Vv9B0/520/1xrMoXZb93Hjf/qiB/wvYf
NM1fFZZ/9Xfrpl0tX5TlrwrT5QvOA9sfx3S+qBa+YvOv0H1E77tV/nY2X1RL
H9TKF7WqvzOrD6Lnjb2/rP/KNL5i+SvT+Ao9z0Uln0GrfhAdR/0I2Dom0/4r
LX2Q7e/M4iu2v7NW/0HT/Z1Z/orFV67GX5nGV+g4wgNoH2H5K636QdZ/pZXf
ruW/YvEVq5Nq4Sv2vhSV/s7/AYRpVd8=
      "]], {
    DisplayFunction -> Identity, AspectRatio -> 1, 
     AxesOrigin -> {Automatic, Automatic}, DisplayFunction :> Identity, Frame -> 
     True, FrameLabel -> {{
        FormBox["\"Magnetic Field / kG\"", TraditionalForm], None}, {
        FormBox["\"Time / ms\"", TraditionalForm], None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], ImageSize -> {450, 450}, LabelStyle -> 
     Directive[16, Bold], 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, "DefaultColorFunction" -> 
       "M10DefaultDensityGradient", 
       "DefaultGraphicsInteraction" -> {
        "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
         "Effects" -> {
          "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
           "Droplines" -> {
            "freeformCursorMode" -> True, 
             "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
       "GridLinesInFront" -> True}, PlotRange -> {{0., 1000.}, {2.5, 4.}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{
       FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           GraphicsBox[{
             RasterBox[CompressedData["
1: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
/wEdeLt3
              "], {{
                Rational[-15, 2], -175}, {
                Rational[15, 2], 175}}], {Antialiasing -> False, 
              AbsoluteThickness[0.1], 
              Directive[
               Opacity[0.3], 
               GrayLevel[0]], 
              LineBox[
               NCache[{{
                  Rational[15, 2], -175}, {
                  Rational[-15, 2], -175}, {
                  Rational[-15, 2], 175}, {
                  Rational[15, 2], 175}, {
                  Rational[15, 2], -175}}, {{
                 7.5, -175}, {-7.5, -175}, {-7.5, 175}, {7.5, 175}, {
                 7.5, -175}}]]}, {
              CapForm[None], {}}, 
             StyleBox[{Antialiasing -> False, 
               StyleBox[
                LineBox[{{7.5, -175.}, {7.5, 175.}}], 
                Directive[
                 AbsoluteThickness[0.2], 
                 Opacity[0.3], 
                 GrayLevel[0]], StripOnInput -> False], 
               StyleBox[
                StyleBox[{{
                   StyleBox[
                    LineBox[{{{7.5, -175.}, 
                    Offset[{4., 0}, {7.5, -175.}]}, {{7.5, -87.5}, 
                    Offset[{4., 0}, {7.5, -87.5}]}, {{7.5, 0.}, 
                    Offset[{4., 0}, {7.5, 0.}]}, {{7.5, 87.5}, 
                    Offset[{4., 0}, {7.5, 87.5}]}, {{7.5, 175.}, 
                    Offset[{4., 0}, {7.5, 175.}]}}], 
                    Directive[
                    AbsoluteThickness[0.2], 
                    GrayLevel[0.4]], StripOnInput -> False], 
                   StyleBox[
                    LineBox[{{{7.5, -157.5}, 
                    Offset[{2.5, 0.}, {7.5, -157.5}]}, {{7.5, -140.}, 
                    Offset[{2.5, 0.}, {7.5, -140.}]}, {{
                    7.5, -122.49999999999999`}, 
                    Offset[{2.5, 0.}, {7.5, -122.49999999999999`}]}, {{
                    7.5, -105.}, 
                    Offset[{2.5, 0.}, {7.5, -105.}]}, {{7.5, -70.}, 
                    Offset[{2.5, 0.}, {7.5, -70.}]}, {{7.5, -52.5}, 
                    Offset[{2.5, 0.}, {7.5, -52.5}]}, {{7.5, -35.}, 
                    Offset[{2.5, 0.}, {7.5, -35.}]}, {{7.5, -17.5}, 
                    Offset[{2.5, 0.}, {7.5, -17.5}]}, {{7.5, 17.5}, 
                    Offset[{2.5, 0.}, {7.5, 17.5}]}, {{7.5, 35.}, 
                    Offset[{2.5, 0.}, {7.5, 35.}]}, {{7.5, 52.5}, 
                    Offset[{2.5, 0.}, {7.5, 52.5}]}, {{7.5, 70.}, 
                    Offset[{2.5, 0.}, {7.5, 70.}]}, {{7.5, 105.}, 
                    Offset[{2.5, 0.}, {7.5, 105.}]}, {{7.5, 
                    122.49999999999999`}, 
                    Offset[{2.5, 0.}, {7.5, 122.49999999999999`}]}, {{7.5, 
                    140.}, 
                    Offset[{2.5, 0.}, {7.5, 140.}]}, {{7.5, 157.5}, 
                    Offset[{2.5, 0.}, {7.5, 157.5}]}}], 
                    Directive[
                    AbsoluteThickness[0.2], 
                    GrayLevel[0.4], 
                    Opacity[0.3]], StripOnInput -> False]}, 
                  StyleBox[
                   StyleBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"-1.0\"", -1., AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, -175.}], {-1, 0.}, Automatic, {1, 
                    0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"-0.5\"", -0.5, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, -87.5}], {-1, 0.}, Automatic, {1, 
                    0}], 
                    InsetBox[
                    FormBox["0", TraditionalForm], 
                    Offset[{7., 0.}, {7.5, 0.}], {-1, 0.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"0.5\"", 0.5, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, 87.5}], {-1, 0.}, Automatic, {1, 
                    0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"1.0\"", 1., AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, 175.}], {-1, 0.}, Automatic, {1, 
                    0}]}, 
                    Directive[
                    AbsoluteThickness[0.2], 
                    GrayLevel[0.4]], {
                    Directive[
                    Opacity[1], 
                    Directive[16, Bold]], 
                    Directive[
                    Opacity[1], 
                    Directive[16, Bold]]}, StripOnInput -> False], 
                    
                    StyleBox[{{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}}, 
                    Directive[
                    AbsoluteThickness[0.2], 
                    GrayLevel[0.4], 
                    Opacity[0.3]], {
                    Directive[
                    Opacity[1], 
                    Directive[16, Bold]], 
                    Directive[
                    Opacity[1], 
                    Directive[16, Bold]]}, StripOnInput -> False]}, {}}, {
                    Directive[
                    Opacity[1], 
                    Directive[16, Bold]], 
                    Directive[
                    Opacity[1], 
                    Directive[16, Bold]]}, StripOnInput -> False], 
                   "GraphicsLabel", StripOnInput -> False]}, "GraphicsTicks", 
                 StripOnInput -> False], {
                 Directive[
                  AbsoluteThickness[0.2], 
                  GrayLevel[0.4]], 
                 Directive[
                  AbsoluteThickness[0.2], 
                  GrayLevel[0.4], 
                  Opacity[0.3]]}, StripOnInput -> False]}, "GraphicsAxes", 
              StripOnInput -> False]}, PlotRangePadding -> Scaled[0.02], 
            PlotRange -> All, Frame -> True, 
            FrameTicks -> {{False, False}, {True, False}}, FrameStyle -> 
            Opacity[0], FrameTicksStyle -> Opacity[0], 
            ImageSize -> {Automatic, 350}, BaseStyle -> {}], Alignment -> 
           Left, AppearanceElements -> None, 
           ImageMargins -> {{0, 0}, {32, 0}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
          Directive[16, Bold], FontFamily -> "Arial"}, Background -> 
         Automatic, StripOnInput -> False], TraditionalForm]}, "BarLegend", 
      DisplayFunction -> (#& ), 
      InterpretationFunction :> (RowBox[{"BarLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{"\"Rainbow\"", ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"Directive", "[", 
               RowBox[{"16", ",", "Bold"}], "]"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}], ",", 
           RowBox[{"LegendMargins", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"0", ",", "0"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"32", ",", "0"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"LegendMarkerSize", "\[Rule]", "350"}], ",", 
           RowBox[{"Charting`TickAnnotations", "\[Rule]", "None"}], ",", 
           RowBox[{"ScalingFunctions", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"Identity", ",", "Identity"}], "}"}]}], ",", 
           RowBox[{"Charting`TickSide", "\[Rule]", "Right"}], ",", 
           RowBox[{"ColorFunctionScaling", "\[Rule]", "True"}]}], "]"}]& )], 
     TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.767486929952992*^9, 3.7674870022612123`*^9, 3.767487202453251*^9, {
   3.767487741908106*^9, 3.767487755310608*^9}, 3.767487803889847*^9, 
   3.767490150370842*^9, 3.7674902199309187`*^9, 3.767490288327586*^9, 
   3.767490349507698*^9, 3.767490380966846*^9},
 CellLabel->"Out[79]=",ExpressionUUID->"621bfa87-2b35-4bf4-b76e-e2e633601a45"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<07_05_2019_Exp03_HighRes.pdf\>\"", ",", "gr"}], "]"}]], "Input",
 CellChangeTimes->{{3.76748694334725*^9, 3.767486955137762*^9}, 
   3.767486998618578*^9, {3.767487075213615*^9, 3.76748707549778*^9}, {
   3.7674877635274553`*^9, 3.767487763923131*^9}, {3.76749030211719*^9, 
   3.767490309152194*^9}, {3.76749699883287*^9, 
   3.767497004944614*^9}},ExpressionUUID->"dbd74b5e-986d-496f-abbe-\
94ee9d91c869"],

Cell[BoxData["\<\"07_05_2019_Exp03.pdf\"\>"], "Output",
 CellChangeTimes->{
  3.76748695596099*^9, {3.76748699932901*^9, 3.767487003469993*^9}, 
   3.767487081685875*^9, 3.767487203978799*^9, 3.767487770903672*^9, 
   3.767487806421373*^9, 3.767490318269032*^9, 3.767490387076007*^9},
 CellLabel->"Out[80]=",ExpressionUUID->"db82aad8-3b09-4dc9-94ac-4e6214b31c12"]
}, Open  ]]
},
WindowSize->{1280, 698},
WindowMargins->{{0, Automatic}, {0, Automatic}},
Magnification:>0.9 Inherited,
FrontEndVersion->"12.0 for Linux x86 (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 2029, 35, 66, "Input",ExpressionUUID->"44007f2d-3311-4868-8693-4ebdb8a0dcbb",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[2612, 59, 321909, 6534, 17, "Input",ExpressionUUID->"bdc319b7-a55f-4762-ae42-36f56ac95e0a",
 CellOpen->False,
 InitializationCell->True],
Cell[324524, 6595, 121185, 2390, 615, "Output",ExpressionUUID->"8a7178d3-44a3-4cc2-be79-55bdc9309cf7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[445746, 8990, 189286, 3835, 17, "Input",ExpressionUUID->"23ce2359-039f-49ae-b53c-6a06ede4a55f",
 CellOpen->False,
 InitializationCell->True],
Cell[635035, 12827, 76149, 1460, 597, "Output",ExpressionUUID->"7b0d704f-b4ca-4823-ab19-a16660907c58"]
}, Open  ]],
Cell[CellGroupData[{
Cell[711221, 14292, 2443, 60, 96, "Input",ExpressionUUID->"19b021b3-b995-4a8d-8301-b6417b72ce92"],
Cell[713667, 14354, 308298, 5116, 423, "Output",ExpressionUUID->"621bfa87-2b35-4bf4-b76e-e2e633601a45"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1022002, 19475, 461, 8, 29, "Input",ExpressionUUID->"dbd74b5e-986d-496f-abbe-94ee9d91c869"],
Cell[1022466, 19485, 363, 5, 33, "Output",ExpressionUUID->"db82aad8-3b09-4dc9-94ac-4e6214b31c12"]
}, Open  ]]
}
]
*)

